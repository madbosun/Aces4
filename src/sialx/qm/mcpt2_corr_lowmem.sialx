import "mcpt2_defs.sialx" 
import "mcpt2_vars.sialx"
#
                           SIAL FRAG_2ORDER_CORR 

      PROC FRAG_TRAN    
#     -------------- 

      sip_barrier

      print "Computing wC_ao"

# ----------------------------------------------------------------------------
#     zero wC_ao
# ----------------------------------------------------------------------------
      PARDO kfrag,mu,nu "Frag{i}{aa}{}"
      where (int)SwAO_frag[(index)mu] == kfrag
      where (int)SwAO_frag[(index)nu] == kfrag

	  PUT wC_ao[mu,nu] = 0.0

      ENDPARDO kfrag,mu,nu

      server_barrier

# ---------------------------------------------------------------------------- 
#     Form wC_ao  
# ---------------------------------------------------------------------------- 

      PARDO ifrag, jfrag, mu, nu "Frag{Nij}{aa}{}"
      WHERE jfrag != ifrag
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag      

	  LwC_ao[mu,nu] = 0.0 

	  DO j
	  where (int)SwOccA_frag[(index)j] == jfrag
	      allocate LVxxqq[mu,nu,j,j]
	  ENDDO j

	  DO lambda
          where (int)SwAO_frag[(index)lambda] == jfrag

	      DO j
	      where (int)SwOccA_frag[(index)j] == jfrag
		  allocate LVxxxq[mu,nu,lambda,j]
	      ENDDO j

	      DO sigma
	      where (int)SwAO_frag[(index)sigma] == jfrag

		  aoint[mu,nu,lambda,sigma]  = 0.0
		  execute compute_integral_batch aoint[mu,nu,lambda,sigma] #  1 1 2 2  

		  DO j
		  where (int)SwOccA_frag[(index)j] == jfrag
		      txxxq[mu,nu,lambda,j]   = aoint[mu,nu,lambda,sigma]*ca[sigma,j]
		      LVxxxq[mu,nu,lambda,j] += txxxq[mu,nu,lambda,j]
		  ENDDO j

	      ENDDO sigma

	      DO j
	      where (int)SwOccA_frag[(index)j] == jfrag

	      DO j1
	      where j == j1
	      where (int)SwOccA_frag[(index)j1] == jfrag
		  txxqq[mu,nu,j1,j]   = LVxxxq[mu,nu,lambda,j]*ca[lambda,j1]
		  LVxxqq[mu,nu,j1,j] += txxqq[mu,nu,j1,j] 
	      ENDDO j1
	      ENDDO j

	      DO j
	      where (int)SwOccA_frag[(index)j] == jfrag
		  deallocate LVxxxq[mu,nu,lambda,j]
	      ENDDO j

	  ENDDO lambda

	  DO j
	  where (int)SwOccA_frag[(index)j] == jfrag

	      DO j1
	      where j == j1 
	      where (int)SwOccA_frag[(index)j1] == jfrag
		  txxqq[mu,nu,j1,j] = LVxxqq[mu,nu,j1,j] 
		  txx[mu,nu]    = 0.0  
		  execute return_vpq txxqq[mu,nu,j1,j] txx[mu,nu] 
		  txx[mu,nu]   *= 2.0  
		  LwC_ao[mu,nu] += txx[mu,nu]
	      ENDDO j1

	  ENDDO j

	  PUT wC_ao[mu,nu] += LwC_ao[mu,nu]

	  DO j
	  where (int)SwOccA_frag[(index)j] == jfrag
	      deallocate LVxxqq[mu,nu,j,j]
	  ENDDO j

      ENDPARDO ifrag, jfrag, mu, nu

      sip_barrier
      print "Done initial formation of wC(AO)"

      PARDO ifrag, mu, nu "Frag{i}{aa}{}"
	 where (int)SwAO_frag[(index)mu] == ifrag
         where (int)SwAO_frag[(index)nu] == ifrag

             GET             wC_ao[mu,nu]
   
	     DO a
	     where (int)SwVirtA_frag[(index)a] == ifrag
		 DO i
		 where (int)SwOccA_frag[(index)i] == ifrag
		     txp[mu,i]     = wC_ao[mu,nu]*ca[nu,i]
		     tpp[a,i]     = txp[mu,i]*ca[mu,a]
		     PUT wC[a,i] += tpp[a,i]
		     t1pp[i,a]    = tpp[a,i]
		     PUT wC[i,a] += t1pp[i,a]
		 ENDDO i
	      ENDDO a
       
	      DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag
		  DO a1
		  where (int)SwVirtA_frag[(index)a1] == ifrag
		      txp[mu,a1] = wC_ao[mu,nu]*ca[nu,a1]
		      tpp[a,a1]  = txp[mu,a1]*ca[mu,a]
		      t1pp[a,a1] = tpp[a,a1]
		      PUT wC[a,a1] += tpp[a,a1]
		  ENDDO a1
	      ENDDO a
       
       
	      DO i1
	      where (int)SwOccA_frag[(index)i1] == ifrag
		  DO i
		  where (int)SwOccA_frag[(index)i] == ifrag
		      txp[mu,i] = wC_ao[mu,nu]*ca[nu,i]
		      tpp[i1,i]  = txp[mu,i]*ca[mu,i1]
		      t1pp[i1,i] = tpp[i1,i]
		      PUT wC[i1,i] += tpp[i1,i]
		  ENDDO i
	      ENDDO i1

      ENDPARDO ifrag, mu, nu

      sip_barrier 

      print "Done Final formation of wC(MO)"

# ---------------------------------------------------------------------------- 
#     First stage --> form Vxxxj (1122) 
# ---------------------------------------------------------------------------- 

      PARDO ifrag, jfrag, mu, nu, lambda "Frag{ij}{aa}{a}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwAO_frag[(index)lambda] == jfrag

	  icount = (scalar)ifrag
	  jcount = (scalar)jfrag


	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      allocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

	  DO sigma 
	  where (int)SwAO_frag[(index)sigma] == jfrag

	      aoint[mu,nu,lambda,sigma]  = 0.0 
	      execute compute_integral_batch aoint[mu,nu,lambda,sigma] #  1 1 2 2  

	      DO j 
	      where (int)SwOccA_frag[(index)j] == jfrag
		  txxxq[mu,nu,lambda,j]   = aoint[mu,nu,lambda,sigma]*ca[sigma,j] 
		  LVxxxq[mu,nu,lambda,j] += txxxq[mu,nu,lambda,j] 
	      ENDDO j 
	  ENDDO sigma 


	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag

	      DO i 
	      where (int)SwOccA_frag[(index)i] == ifrag
		  txpxq[mu,i,lambda,j]      = LVxxxq[mu,nu,lambda,j]*ca[nu,i] 
		  PUT Vxpxq[mu,i,lambda,j] += txpxq[mu,i,lambda,j] 
	      ENDDO i 

	      DO i1 
	      where (int)SwOccA_frag[(index)i1] == ifrag
		  tpxxq[i1,nu,lambda,j]      = LVxxxq[mu,nu,lambda,j]*ca[mu,i1] 
		  PUT Vpxxq[i1,nu,lambda,j] += tpxxq[i1,nu,lambda,j] 
	      ENDDO i1 

	      DO j1  
	      where (int)SwOccA_frag[(index)j1] == jfrag
		  txxqq[mu,nu,j1,j]      = LVxxxq[mu,nu,lambda,j]*ca[lambda,j1] 
		  PUT Vxxqq[mu,nu,j1,j] += txxqq[mu,nu,j1,j] 
	      ENDDO j1  
	  ENDDO j 

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      deallocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

      ENDPARDO ifrag, jfrag, mu, nu, lambda

# Exchange integrals 

      PARDO ifrag, jfrag, nu, lambda, mu "Frag{ij}{aa}{a}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwAO_frag[(index)lambda] == ifrag
      where (int)SwAO_frag[(index)mu] == jfrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      allocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

	  DO sigma 
	  where (int)SwAO_frag[(index)sigma] == jfrag

	      aoint[mu,nu,lambda,sigma]  = 0.0 
	      execute compute_integral_batch aoint[mu,nu,lambda,sigma] #  1 1 2 2  

	      DO j 
	      where (int)SwOccA_frag[(index)j] == jfrag
		txxxq[mu,nu,lambda,j]   = aoint[mu,nu,lambda,sigma]*ca[sigma,j] 
		LVxxxq[mu,nu,lambda,j] += txxxq[mu,nu,lambda,j] 
	      ENDDO j 

	  ENDDO sigma 


	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag

	      DO i 
	      where (int)SwOccA_frag[(index)i] == ifrag
  		 txxqq[mu,nu,i,j]      = LVxxxq[mu,nu,lambda,j]*ca[lambda,i] 
		 PUT Vxxqq_x[mu,nu,i,j] += txxqq[mu,nu,i,j] 
	      ENDDO i  
	  ENDDO j 

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      deallocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

      ENDPARDO ifrag, jfrag, nu, lambda, mu
#
      PARDO ifrag, jfrag, mu, nu, lambda "Frag{ij}{aaa}{}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwAO_frag[(index)lambda] == ifrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      allocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

	  DO sigma 
	  where (int)SwAO_frag[(index)sigma] == jfrag

	      aoint[mu,nu,lambda,sigma]  = 0.0 
	      execute compute_integral_batch aoint[mu,nu,lambda,sigma] #  1 1 2 2  

	      DO j 
	      where (int)SwOccA_frag[(index)j] == jfrag
		    txxxq[mu,nu,lambda,j]   = aoint[mu,nu,lambda,sigma]*ca[sigma,j] 
		    LVxxxq[mu,nu,lambda,j] += txxxq[mu,nu,lambda,j] 
	      ENDDO j 

	  ENDDO sigma 


	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag

	      DO i 
	      where (int)SwOccA_frag[(index)i] == ifrag
		    txxqq[mu,nu,i,j]      = LVxxxq[mu,nu,lambda,j]*ca[lambda,i] 
		    PUT Vxxqq_x[mu,nu,i,j] += txxqq[mu,nu,i,j] 
	      ENDDO i  

	  ENDDO j 

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      deallocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

      ENDPARDO ifrag, jfrag, mu, nu, lambda

# ---------------------------------------------------------------------------- 
#     Done second stage --> form Vixxj (1122) 
# ---------------------------------------------------------------------------- 
      sip_barrier 
      print "Done first two stages of two-electron integral transformation" 

# ---------------------------------------------------------------------------- 
#     Third stage --> form Vxibj (1122) 
# ---------------------------------------------------------------------------- 

      PARDO ifrag, jfrag, mu, i, lambda, j "Frag{ij}{ao}{ao}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwAO_frag[(index)lambda] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag

	  GET                    Vxpxq[mu,i,lambda,j] 

	  DO b 
	  where (int)SwVirtA_frag[(index)b] == jfrag
	      txpqq[mu,i,b,j]      = Vxpxq[mu,i,lambda,j]*ca[lambda,b] 
	      PUT Vxpbq[mu,i,b,j] += txpqq[mu,i,b,j] 
	  ENDDO b 

      ENDPARDO ifrag,jfrag, mu, i, lambda, j

# ---------------------------------------------------------------------------- 
#     Third stage --> form Vixbj (1122) 
# ---------------------------------------------------------------------------- 
#
      PARDO ifrag, jfrag, nu, i, lambda, j "Frag{ij}{ao}{ao}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwAO_frag[(index)lambda] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag

	  GET                    Vpxxq[i,nu,lambda,j] 

	  DO b 
	  where (int)SwVirtA_frag[(index)b] == jfrag
	      tpxqq[i,nu,b,j]      = Vpxxq[i,nu,lambda,j]*ca[lambda,b] 
	      PUT Vixbj[i,nu,b,j] += tpxqq[i,nu,b,j] 
	  ENDDO b 

	  DO j1 
	  where (int)SwOccA_frag[(index)j1] == jfrag
	      tpxqq[i,nu,j1,j]      = Vpxxq[i,nu,lambda,j]*ca[lambda,j1] 
	      PUT Vixjj[i,nu,j1,j] += tpxqq[i,nu,j1,j] 
	  ENDDO j1  
      ENDPARDO ifrag,jfrag, nu, i, lambda, j
#
      PARDO ifrag, jfrag, nu, mu, j, j1 "Frag{ij}{aa}{oo}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwOccA_frag[(index)j1] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag

	  GET                 Vxxqq[mu,nu,j1,j] 

	  DO a 
	  where (int)SwVirtA_frag[(index)a] == ifrag
	      tpxqq[a,nu,j1,j]      = Vxxqq[mu,nu,j1,j]*ca[mu,a] 
	      PUT Vaxjj[a,nu,j1,j] += tpxqq[a,nu,j1,j] 
	  ENDDO a 

      ENDPARDO ifrag,jfrag, nu, mu, j, j1
#
      PARDO ifrag, jfrag,nu,i,mu,j "Frag{ij}{ao}{ao}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwAO_frag[(index)mu] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag
       
		 GET                 Vxxqq_x[mu,nu,i,j] 

		 DO i1 
		 where (int)SwOccA_frag[(index)i1] == ifrag
		       txpqq[mu,i1,i,j]      = Vxxqq_x[mu,nu,i,j]*ca[nu,i1] 
		       PUT Vxiij[mu,i1,i,j] += txpqq[mu,i1,i,j] 
		 ENDDO i1  

      ENDPARDO ifrag, jfrag,nu,i,mu,j

      PARDO ifrag, jfrag,nu,i,mu,j "Frag{ij}{aoa}{o}" ####line 407
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwOccA_frag[(index)j] == jfrag

		 GET                 Vxxqq_x[mu,nu,i,j] 

		 DO i1 
		 where (int)SwOccA_frag[(index)i1] == ifrag
		       txpqq[mu,i1,i,j]      = Vxxqq_x[mu,nu,i,j]*ca[nu,i1] 
		       PUT Vxiij[mu,i1,i,j] += txpqq[mu,i1,i,j] 
		 ENDDO i1  

      ENDPARDO ifrag, jfrag,nu,i,mu,j

      print "Done third stage of two-electron integral transformation" 
      sip_barrier 

# ---------------------------------------------------------------------------- 
#     Fourth stage --> form Vaibj (1122) 
# ---------------------------------------------------------------------------- 

      PARDO ifrag, jfrag, mu, i, b, j "Frag{ij}{ao}{vo}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwVirtA_frag[(index)b] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag

	  GET               Vxpbq[mu,i,b,j] 

	  DO a 
	  where (int)SwVirtA_frag[(index)a] == ifrag
		tppqq[a,i,b,j]      = Vxpbq[mu,i,b,j]*ca[mu,a] 
		PUT Vaibj[a,i,b,j] += tppqq[a,i,b,j] 
	  ENDDO a 

      ENDPARDO ifrag, jfrag, mu, i, b, j

# ---------------------------------------------------------------------------- 
#     Fourth stage --> form Viabj (1122) 
# ---------------------------------------------------------------------------- 
      PARDO ifrag, jfrag, nu, i, b, j  "Frag{ij}{ao}{vo}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwVirtA_frag[(index)b] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag
#

	  GET               Vixbj[i,nu,b,j]  

	  DO a 
	  where (int)SwVirtA_frag[(index)a] == ifrag
		tppqq[i,a,b,j]      = Vixbj[i,nu,b,j]*ca[nu,a] 
		PUT Viabj[i,a,b,j] += tppqq[i,a,b,j] 
	  ENDDO a 

      ENDPARDO ifrag,jfrag, nu, i, b, j

      PARDO ifrag, jfrag, nu, a, j, j1 "Frag{ij}{av}{oo}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwVirtA_frag[(index)a] == ifrag
      where (int)SwOccA_frag[(index)j1] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag

	  GET                Vaxjj[a,nu,j1,j] 

	  DO a1 
	  where (int)SwVirtA_frag[(index)a1] == ifrag
		tppqq[a,a1,j1,j]      = Vaxjj[a,nu,j1,j]*ca[nu,a1] 
		PUT Vaajj[a,a1,j1,j] += tppqq[a,a1,j1,j] 
	  ENDDO a1 

      ENDPARDO ifrag,jfrag, nu, a, j, j1

# ---------------------------------------------------------------------------- 
#     Fourth stage --> form Viijj (1122) 
# ---------------------------------------------------------------------------- 
#
      PARDO ifrag, jfrag, nu, i, j, j1  "Frag{ij}{ao}{oo}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwOccA_frag[(index)j] == jfrag
      where (int)SwOccA_frag[(index)j1] == jfrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag

	  GET                Vixjj[i,nu,j1,j] 

	  DO i1 
	  where (int)SwOccA_frag[(index)i1] == ifrag
		tppqq[i,i1,j1,j]      = Vixjj[i,nu,j1,j]*ca[nu,i1] 
		PUT Viijj[i,i1,j1,j] += tppqq[i,i1,j1,j] 
	  ENDDO i1 

      ENDPARDO ifrag, jfrag, nu, i, j, j1

      PARDO ifrag, jfrag, i, i1, mu, j  "Frag{ij}{oo}{ao}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwOccA_frag[(index)i1] == ifrag
      where (int)SwAO_frag[(index)mu] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag

	 GET                 Vxiij[mu,i1,i,j] 

	 DO j1 
	 where (int)SwOccA_frag[(index)j1] == jfrag
	       tppqq[j1,i1,i,j]      = Vxiij[mu,i1,i,j]*ca[mu,j1] 
	       PUT Vjiij[j1,i1,i,j] += tppqq[j1,i1,i,j] 
	 ENDDO j1  

      ENDPARDO ifrag, jfrag, i, i1, mu, j

      PARDO ifrag, jfrag, mu, i, i1, j "Frag{ij}{aoo}{o}" ######## line 532
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwOccA_frag[(index)i1] == ifrag
      where (int)SwOccA_frag[(index)j] == jfrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag

	 GET                 Vxiij[mu,i1,i,j] 

	 DO j1 
	 where (int)SwOccA_frag[(index)j1] == ifrag
	       tppqq[j1,i1,i,j]      = Vxiij[mu,i1,i,j]*ca[mu,j1] 
	       PUT Viiij[j1,i1,i,j] += tppqq[j1,i1,i,j] 
	 ENDDO j1  

      ENDPARDO ifrag, jfrag, mu, i, i1, j
      
      print "Done fourth stage of transformation" 

      sip_barrier 




# ---------------------------------------------------------------------------- 
#     Compute E^(20) on all dimers  
# ---------------------------------------------------------------------------- 
      PARDO ifrag, jfrag, a, i, b, j "Frag{ij}{vo}{vo}"   #### line 561
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwVirtA_frag[(index)a] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwVirtA_frag[(index)b] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag

	if ifrag != jfrag

	      GET                         Vaibj[a,i,b,j]  
	      tppqq[a,i,b,j]            = Vaibj[a,i,b,j] 
	      t1ppqq[a,i,b,j]           = Vaibj[a,i,b,j] 
	      execute energy_denominator_rhf  tppqq[a,i,b,j] fock_a  
	      etemp                     = tppqq[a,i,b,j]*t1ppqq[a,i,b,j]  
	      etemp                    *= 4.0 
	      t20disp[ifrag,jfrag]      = etemp 
	      PUT e20disp[ifrag,jfrag] += t20disp[ifrag,jfrag] 

	endif # icount != jcount 

	if ifrag == jfrag

	      GET                         Vaibj[a,i,b,j]  
	      GET                         Vaibj[a,j,b,i]  
	      tppqq[a,i,b,j]            = Vaibj[a,i,b,j] 
	      t2ppqq[a,i,b,j]           = Vaibj[a,i,b,j] 
	      t3ppqq[a,j,b,i]           = Vaibj[a,j,b,i] 
	      t1ppqq[a,i,b,j]           = t3ppqq[a,j,b,i] 
	      tppqq[a,i,b,j]           *= 2.0  
	      tppqq[a,i,b,j]           -= t1ppqq[a,i,b,j]   
	      execute energy_denominator_rhf  t2ppqq[a,i,b,j] fock_a  
	      etemp                     = tppqq[a,i,b,j]*t2ppqq[a,i,b,j]  
	     #print_scalar etemp 
	      t20disp[ifrag,jfrag]      = etemp 
	      PUT e20disp[ifrag,jfrag] += t20disp[ifrag,jfrag] 

	endif # icount != jcount 

      ENDPARDO ifrag,jfrag, a, i, b, j

      sip_barrier 


    execute get_my_rank rank
    if rank == 0.0
    do ifrag
    do jfrag
    where (int)elst_dist[ifrag,jfrag] == ifrag
       allocate contiguous final_e20disp[ifrag:ifrag,jfrag:jfrag]
       GET e20disp[ifrag,jfrag] 
       final_e20disp[ifrag:ifrag,jfrag:jfrag] = e20disp[ifrag,jfrag]
       print final_e20disp[ifrag:ifrag,jfrag:jfrag]
       deallocate contiguous final_e20disp[ifrag:ifrag,jfrag:jfrag]
    enddo jfrag
    enddo ifrag
    endif
#
      ENDPROC FRAG_TRAN    


#
# ---------------------------------------------------------------------------- 
#

      PROC REFORM_WC
      server_barrier
      PARDO ifrag, mu, nu "Frag{i}{aa}{}"
	 where (int)SwAO_frag[(index)mu] == ifrag
	 where (int)SwAO_frag[(index)nu] == ifrag

         icount = (scalar)ifrag

               txx[mu,nu] = 0.0 
               execute return_h1frag txx[mu,nu] icount  
# Reform wC_ao for use in alternative exchange energy 
               PUT wC_ao[mu,nu]  = txx[mu,nu] 

               do b 
	       where (int)SwVirtA_frag[(index)b] == ifrag
                     tbx[b,nu] = txx[mu,nu]*ca[mu,b] 

                     do j 
	             where (int)SwOccA_frag[(index)j] == ifrag
                           tbj[b,j]     = tbx[b,nu]*ca[nu,j] 
                           PUT wC[b,j] += tbj[b,j] 
                           tpp[j,b]     = tbj[b,j] 
                           PUT wC[j,b] += tpp[j,b] 
                     enddo j 

                     do b1  
		     where (int)SwVirtA_frag[(index)b1] == ifrag
                           tpp[b,b1] = tbx[b,nu]*ca[nu,b1] 
                           t1pp[b,b1] = tpp[b,b1] 
                           PUT wC[b,b1] += tpp[b,b1] 
                     enddo b1  

               enddo b 

               do i 
	       where (int)SwOccA_frag[(index)i] == ifrag

                     tpx[i,nu] = txx[mu,nu]*ca[mu,i] 

                     do j 
		     where (int)SwOccA_frag[(index)j] == ifrag
                           t1pp[i,j] = tpx[i,nu]*ca[nu,j] 
                           tpp[i,j] = t1pp[i,j] 
                           PUT wC[i,j] += tpp[i,j] 
                     enddo j 

               enddo i 

      ENDPARDO ifrag, mu, nu
      server_barrier

      ENDPROC REFORM_WC


      PROC FORM_ELSTPOT 
#     ----------------- 
#
#     Form the contribution /sum_C V(a,i,C,C) 
#
      sip_barrier 
#
# Form the contribution from /sum_C Hai(C) 
#

      PARDO ifrag, mu, nu "Frag{i}{aa}{}"
	 where (int)SwAO_frag[(index)mu] == ifrag
	 where (int)SwAO_frag[(index)nu] == ifrag

         icount = (scalar)ifrag

               txx[mu,nu] = 0.0 
               execute return_h1frag txx[mu,nu] icount  

               do i 
	       where (int)SwOccA_frag[(index)i] == ifrag

                     tpx[i,nu] = txx[mu,nu]*ca[mu,i] 

                     do j 
		     where (int)SwOccA_frag[(index)j] == ifrag
                           t1pp[i,j] = tpx[i,nu]*ca[nu,j] 
                           PUT VE[i,j] += t1pp[i,j] 
                     enddo j 

               enddo i 

      ENDPARDO ifrag, mu, nu

      PARDO ifrag,jfrag, mu, nu "Frag{Nij}{a}{a}" #line 713
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwAO_frag[(index)nu] == jfrag
#      PARDO ifrag,jfrag
#      where ifrag != jfrag
#      where (int)elst_dist[ifrag,jfrag] == ifrag
#      do mu
#      where (int)SwAO_frag[(index)mu] == ifrag
#      do nu
#      where (int)SwAO_frag[(index)nu] == jfrag

         icount = (scalar)ifrag
         jcount = (scalar)jfrag

                  txx[mu,nu] = 0.0 
                  execute return_h1frag txx[mu,nu] icount  

               do i 
	       where (int)SwOccA_frag[(index)i] == ifrag

                     tpx[i,nu] = txx[mu,nu]*ca[mu,i] 

                     do j 
	             where (int)SwOccA_frag[(index)j] == jfrag
                           t1pp[i,j] = tpx[i,nu]*ca[nu,j] 
                           PUT VE_x[i,j] += t1pp[i,j] 
                     enddo j 

               enddo i 

#      enddo nu
#      enddo mu
#      endpardo ifrag,jfrag
      ENDPARDO ifrag,jfrag, mu, nu
      print "Done form_e1pol" 

      sip_barrier 
#
      ENDPROC FORM_ELSTPOT 
# 
# -----------------------------------------------------------------------------
# 
      PROC OVERLAP_TRANS 
#     ------------------ 
      PARDO ifrag, jfrag 
         t20disp[ifrag,jfrag]    = 0.0  
         PUT e10pol[ifrag,jfrag] = t20disp[ifrag,jfrag] 
      ENDPARDO ifrag, jfrag 
      sip_barrier

      PARDO ifrag,jfrag
      where ifrag != jfrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag
#
         DO mu
	 where (int)SwAO_frag[(index)mu] == ifrag
         DO nu
	 where (int)SwAO_frag[(index)nu] == jfrag

	      execute return_ovl txx[mu,nu]  
	      PUT oed_ovl[mu,nu] = txx[mu,nu] 

         ENDDO nu
         ENDDO mu

      ENDPARDO ifrag,jfrag
      sip_barrier 
# 
      PARDO ifrag,jfrag
      where ifrag != jfrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag
#
         DO mu
	 where (int)SwAO_frag[(index)mu] == ifrag
         DO nu
	 where (int)SwAO_frag[(index)nu] == jfrag

	      GET oed_ovl[mu,nu] 

              DO a
	      where (int)SwVirtA_frag[(index)a] == jfrag
              DO i
	      where (int)SwOccA_frag[(index)i] ==ifrag

                    txp[mu,a] = oed_ovl[mu,nu]*ca[nu,a]  
                    tpp[i,a]  = txp[mu,a]*ca[mu,i] 
                    PUT SOVL[i,a] += tpp[i,a] 

              ENDDO i
              ENDDO a

              DO i1  
	      where (int)SwOccA_frag[(index)i1] == jfrag
              DO i
	      where (int)SwOccA_frag[(index)i] == ifrag

                    txp[mu,i1] = oed_ovl[mu,nu]*ca[nu,i1]  
                    tpp[i,i1]  = txp[mu,i1]*ca[mu,i] 
                    PUT SOVL[i,i1] += tpp[i,i1] 

              ENDDO i
              ENDDO i1  

              DO a1  
	      where (int)SwVirtA_frag[(index)a1] == jfrag
              DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag

                    txp[mu,a1] = oed_ovl[mu,nu]*ca[nu,a1]  
                    tpp[a,a1]  = txp[mu,a1]*ca[mu,a] 
                    PUT SOVL[a,a1] += tpp[a,a1] 

              ENDDO a
              ENDDO a1  

         ENDDO nu
         ENDDO mu

      ENDPARDO ifrag,jfrag
      sip_barrier

# 
      PARDO ifrag,jfrag
      where ifrag != jfrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag
#
         esum = 0.0 
         DO a
	 where (int)SwVirtA_frag[(index)a] == ifrag
         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag

               GET wC[a,i] 

               DO j
	       where (int)SwOccA_frag[(index)j] == jfrag

                     GET SOVL[j,a] 
                     GET SOVL[i,j] 

                     tpp[i,a] = SOVL[i,j]*SOVL[j,a] 
                     etemp = wC[a,i]*tpp[i,a] 
                     etemp*= -2.0  
                     esum += etemp 

               ENDDO j
         ENDDO i
         ENDDO a

         if (int)elst_dist[ifrag,jfrag] == ifrag
#
         DO a
	 where (int)SwVirtA_frag[(index)a] == ifrag
         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag

               DO b
	       where (int)SwVirtA_frag[(index)b] == jfrag
               DO j
	       where (int)SwOccA_frag[(index)i] == jfrag
                     GET Vaibj[a,i,b,j] 
                     GET SOVL[j,a] 
                     GET SOVL[i,b] 
                     tpp[a,j] = Vaibj[a,i,b,j]*SOVL[i,b]  
                     etemp = SOVL[j,a]*tpp[a,j] 

                     etemp*= -1.0  # Not 2 to avoid overcounting ??? 
                     esum += etemp 
               ENDDO j
               ENDDO b
         ENDDO i
         ENDDO a
         endif # pair_flag > zero  

         t20disp[ifrag,jfrag]      = esum   
         PUT e10exch[ifrag,jfrag] += t20disp[ifrag,jfrag] 

      ENDPARDO ifrag,jfrag

# Now compute the first-order polarization energy 
#
      PARDO ifrag,jfrag
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag

         esum = 0.0 

         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag
         DO i1 
         where i == i1 
               DO j
	       where (int)SwOccA_frag[(index)j] == jfrag
               DO j1 
               where j == j1 
                     GET Viijj[i,i1,j,j1] 
                     tpppp[i,i1,j,j1] = Viijj[i,i1,j,j1]
                     execute return_diagonal tpppp[i,i1,j,j1] etemp  
                     etemp*= 2.0  
                     esum += etemp 
               ENDDO j1
               ENDDO j 
         ENDDO i1 
         ENDDO i

         t20disp[ifrag,jfrag]     = esum  
         PUT e10pol[ifrag,jfrag] += t20disp[ifrag,jfrag] 

      ENDPARDO ifrag, jfrag
# 
      PARDO ifrag,jfrag
      where ifrag == jfrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag
# 
         esum = 0.0 
         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag
         DO i1
         where i == i1 
               GET         VE[i,i1] 
               tpp[i,i1] = VE[i,i1] 
               execute return_diagonal tpp[i,i1] etemp  
               etemp*= 2.0  
               esum += etemp 
         ENDDO i1 
         ENDDO i

         t20disp[ifrag,jfrag]     = esum  
         PUT e10pol[ifrag,jfrag] += t20disp[ifrag,jfrag] 

      ENDPARDO ifrag, jfrag
      sip_barrier

      e10pol_at = 0.0
      esum = 0.0 
      sip_barrier
      pardo ifrag,jfrag
         GET e10pol[ifrag,jfrag] 
         etemp = e10pol[ifrag,jfrag] 
         esum += etemp 
      endpardo ifrag,jfrag
      sip_barrier
      collective e10pol_at += esum 
# this is the total systems e10 polarization energy
      e10pol_at += nn_rep
      print e10pol_at
#
      execute get_my_rank rank
      if rank == 0.0
      do ifrag
      do jfrag
      where jfrag >= ifrag
      where (int)elst_dist[ifrag,jfrag] == ifrag
	  icount = (scalar)ifrag
	  jcount = (scalar)jfrag
      
      # nn rep between fragments
	  execute compute_pair_nn icount jcount nn_rep
	  allocate contiguous final_e10pol[ifrag:ifrag,jfrag:jfrag]
	  GET                 e10pol[ifrag,jfrag] 
	  Tij[ifrag,jfrag] = e10pol[ifrag,jfrag]
      # factor of two for upper triangle
	  if jfrag > ifrag
	      Tij[ifrag,jfrag] *= 2.0 
	  endif
	  T1ij[ifrag,jfrag] = nn_rep
	  Tij[ifrag,jfrag] += T1ij[ifrag,jfrag]
	  final_e10pol[ifrag:ifrag,jfrag:jfrag] = Tij[ifrag,jfrag]
#print pair polarization energies
	  print final_e10pol[ifrag:ifrag,jfrag:jfrag]
	  deallocate contiguous final_e10pol[ifrag:ifrag,jfrag:jfrag]
      enddo jfrag
      enddo ifrag
      endif
      sip_barrier

# 
      ENDPROC OVERLAP_TRANS 
# -----------------------------------------------------------------------------
# Exchange integrals here are all over occupied so leave as serialized for now.  
# they are a one off so its fine
      PROC EXCHANGE_ALT
#     ----------------- 

      e1x_at = 0.0  
      esum = 0.0 

      PARDO ifrag, jfrag  
	  put e10exch[ifrag,jfrag] = 0.0
      endPARDO ifrag, jfrag  
      sip_barrier 


      PARDO ifrag, jfrag  
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag

# 1st-term 
         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag
         DO i1 
	 where i==i1

         DO j
	 where (int)SwOccA_frag[(index)j] == jfrag
         DO j1 
         where j == j1 
                  GET                Vjiij[j1,i1,i,j] 
                  tpppp[i,i1,j,j1] = Vjiij[j1,i1,i,j] 
                  etemp = 0.0 
                  execute return_diagonal tpppp[i,i1,j,j1] etemp
                  etemp *= -1.0 
                  esum += etemp 
         ENDDO j1 
         ENDDO j 

         ENDDO i1 
         ENDDO i 

      #print esum  

# second-term 

         DO j
	 where (int)SwOccA_frag[(index)j] == jfrag
         DO i2 
	 where (int)SwOccA_frag[(index)i2] == ifrag

	      GET SOVL[j,i2] 
	      tpp[i2,j] = 0.0 

	     DO i
	     where (int)SwOccA_frag[(index)i] == ifrag
	     DO i1 
	     where i == i1 
		  GET                 Viiij[i,i1,i2,j] 
		  GET                 Viiij[i2,i1,i,j] 
		  tpppp[i2,j,i,i1]  = Viiij[i,i1,i2,j] 
		  tpppp[i2,j,i,i1] *= 2.0  
		  t1pppp[i2,j,i,i1] = Viiij[i2,i1,i,j]   
		  tpppp[i2,j,i,i1] -= t1pppp[i2,j,i,i1] 

		  Ipp[i,i1] = 1.0 
		  execute return_diagonal Ipp[i,i1] etemp  

		  t1pp[i2,j] = tpppp[i2,j,i,i1] * Ipp[i,i1] 
		  tpp[i2,j] += t1pp[i2,j] 

	     ENDDO i1 
	     ENDDO i 

	      GET          VE_x[j,i2] 
	      GET          VE_x[i2,j] 
	      t1pp[i2,j] = VE_x[j,i2] 
	      t1pp[i2,j]+= VE_x[i2,j] 
	      t1pp[i2,j]*= 0.5  
	      tpp[i2,j] += t1pp[i2,j] 
	      etemp = SOVL[j,i2]*tpp[i2,j] 
	      etemp *= -2.0 
	      esum += etemp 

         ENDDO i2  
         ENDDO j 

# Third-term 

         DO j
	 where (int)SwOccA_frag[(index)j] == jfrag
         DO j1  
	 where (int)SwOccA_frag[(index)j1] == jfrag

	      tpp[j1,j] = 0.0 
	      t3pp[j,j1] = 0.0 

	     DO i
	     where (int)SwOccA_frag[(index)i] == ifrag
	     DO i1 
	     where i == i1 
		      GET Viijj[j1,j,i,i1] 
		      tpp[i,i1] = 2.0 
		      execute return_diagonal tpp[i,i1] etemp  
		      t2pp[j1,j] = Viijj[j1,j,i,i1]*tpp[i,i1] 
		      tpp[j1,j] += t2pp[j1,j] 
	     ENDDO i1 
	     ENDDO i 

	     DO i2 
	     where (int)SwOccA_frag[(index)i2] == ifrag

                  GET SOVL[j,i2] 
                  GET SOVL[i2,j1] 

                  t1pp[j,j1] = SOVL[j,i2]*SOVL[i2,j1] 
                  t3pp[j,j1] += t1pp[j,j1] 

	     ENDDO i2 

	      etemp = t3pp[j,j1]*tpp[j1,j] 
	      etemp *= 2.0 
	      esum += etemp 

         ENDDO j1 
         ENDDO j 

      #print esum 

# Fourth-term 

         DO j
	 where (int)SwOccA_frag[(index)j] == jfrag
         DO i1 
	 where (int)SwOccA_frag[(index)i1] == ifrag

                  tpp[i1,j] = 0.0 
                  GET         SOVL[j,i1] 

               DO i
	       where (int)SwOccA_frag[(index)i] == ifrag

                     DO j1  
	             where (int)SwOccA_frag[(index)j1] == jfrag
                           GET         Viijj[i1,i,j1,j] 
                           GET         SOVL[i,j1] 
                           t1pp[i1,j] = Viijj[i1,i,j1,j]*SOVL[i,j1] 
                           tpp[i1,j] += t1pp[i1,j] 
                     ENDDO j1 
               ENDDO i 

               etemp     = tpp[i1,j]*SOVL[j,i1]
               etemp    *= -1.0 
               esum     += etemp 

         ENDDO i1 
         ENDDO j 

         #print esum 


         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag
         DO i1 
	 where (int)SwOccA_frag[(index)i1] == ifrag

               DO j
	       where (int)SwOccA_frag[(index)j] == jfrag
		       GET         VE[i1,i] 
		       GET         SOVL[j,i1] 
		       GET         SOVL[i,j] 
		       tpp[i1,j] = VE[i1,i]*SOVL[i,j] 
		       etemp     = tpp[i1,j]*SOVL[j,i1]
		       etemp    *=  2.0  
		       esum     += etemp 
               ENDDO j 

         ENDDO i1 
         ENDDO i 

	 put e10exch[ifrag,jfrag] += esum
# 
      ENDPARDO ifrag, jfrag  

      sip_barrier
      collective e1x_at += esum   
      print e1x_at 
# 
      execute get_my_rank rank
      if rank == 0.0
	 do ifrag
         do jfrag
	 where ifrag != jfrag
         where (int)elst_dist[ifrag,jfrag] == ifrag
	     icount = (scalar)ifrag
	     jcount = (scalar)jfrag

	     allocate contiguous final_e10exch[ifrag:ifrag,jfrag:jfrag]
	     get e10exch[ifrag,jfrag]
	     final_e10exch[ifrag:ifrag,jfrag:jfrag] = e10exch[ifrag,jfrag]
	     print final_e10exch[ifrag:ifrag,jfrag:jfrag]
	     deallocate contiguous final_e10exch[ifrag:ifrag,jfrag:jfrag]

	 enddo jfrag
	 enddo ifrag
      endif
   
      ENDPROC EXCHANGE_ALT






#
# -----------------------------------------------------------------------------
#  LINE 1216
# -----------------------------------------------------------------------------
# 
      PROC FORM_T10
#     ------------- 
      esum = 0.0 
      et1_correction = 0.0  

      PARDO ifrag, a, i "Frag{i}{vo}{}"
        where (int)SwVirtA_frag[(index)a] == ifrag
        where (int)SwOccA_frag[(index)i] == ifrag
        icount = (scalar)ifrag



# having gone through E1lst we now have the full contribution from wC as per rybak.
              GET        wC[a,i]
              tai[a,i] = wC[a,i]
              execute energy_denominator_rhf tai[a,i] fock_a
              PUT t1old[a,i] += tai[a,i]



      ENDPARDO ifrag, a, i
      sip_barrier
      print "Done forming initial t1" 

# Compute initial singles energy of clusters  

      PARDO ifrag, a, i "Frag{i}{vo}{}"
      where (int)SwVirtA_frag[(index)a] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      icount = (scalar)ifrag
#
      esum = 0.0 




            GET     wC[a,i] 
            GET     t1old[a,i] 
            etemp = t1old[a,i]*wC[a,i]  
            etemp*= 2.0  
            esum += etemp 



 
       PUT e10c[ifrag]     += esum
       PUT e10c_old[ifrag] += esum
       esum = 10.0
       PUT e1error[ifrag]  += esum
# 
      ENDPARDO ifrag, a, i
      sip_barrier
#
      print "Initial singles energies" 
      execute get_my_rank rank
      if rank == 0.0
      DO ifrag  
         allocate contiguous initial_e10c[ifrag:ifrag]
         GET e10c[ifrag] 
	 initial_e10c[ifrag:ifrag] = e10c[ifrag]
	 print initial_e10c[ifrag:ifrag]
         deallocate contiguous initial_e10c[ifrag:ifrag]
      ENDDO ifrag 
      endif

      ENDPROC FORM_T10
#     ---------------- 
#
# -----------------------------------------------------------------------------
# 
      PROC FORM_T1
#     ------------ 
# 

      print "Starting t1 iterations" 
      sip_barrier 

      DO jiter
      print jiter

      PARDO ifrag, a, i "Frag{i}{vo}{}"

         GET     e1error[ifrag] 
         etemp = e1error[ifrag] 
         if etemp < zero  
            etemp *= -1.0 
         endif 

	 IF etemp > cc_conv 

               PUT x1new[a,i] = 0.0

         endif

      ENDPARDO ifrag, a, i

      server_barrier

      PARDO ifrag, a, i "Frag{i}{vo}{}"
	 where (int)SwOccA_frag[(index)i] == ifrag
	 where (int)SwVirtA_frag[(index)a] == ifrag
         icount = (scalar)ifrag

         GET     e1error[ifrag] 
         etemp = e1error[ifrag] 
         if etemp < zero  
            etemp *= -1.0 
         endif 

	 IF etemp > cc_conv 

               GET        wC[a,i] 
               tai[a,i] = wC[a,i] 
               PUT x1new[a,i] += tai[a,i] 

	 ENDIF
      ENDPARDO ifrag, a, i



      PARDO ifrag, a, i, a1, i1 "Frag{i}{vovo}{}"
	 where (int)SwVirtA_frag[(index)a] == ifrag
	 where (int)SwOccA_frag[(index)i] == ifrag
	 where (int)SwVirtA_frag[(index)a1] == ifrag
	 where (int)SwOccA_frag[(index)i1] == ifrag
         icount = (scalar)ifrag

         GET     e1error[ifrag] 
         etemp = e1error[ifrag] 
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 

            t1ai[a,i] = 0.0 


               GET Viabj[i,a,a1,i1]  
               GET Vaajj[a,a1,i,i1] 
               GET     t1old[a1,i1] 

               tppqq[i,a,a1,i1]  = Viabj[i,a,a1,i1] 

               t2ppqq[a,a1,i,i1] = Vaajj[a,a1,i,i1] 
               t1ppqq[i,a,a1,i1] = t2ppqq[a,a1,i,i1] 

               tppqq[i,a,a1,i1] *= 2.0  
               tppqq[i,a,a1,i1] -= t1ppqq[i,a,a1,i1]

               tai[a,i] = tppqq[i,a,a1,i1]*t1old[a1,i1]
               t1ai[a,i] += tai[a,i]  

            PUT x1new[a,i] += t1ai[a,i] 

      ENDIF # etemp > cc_conv 

      ENDPARDO ifrag, a, i, a1, i1



      PARDO ifrag, jfrag, a, i, a1, i1 "Frag{Nij}{vo}{vo}"
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwVirtA_frag[(index)a] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwVirtA_frag[(index)a1] == jfrag
      where (int)SwOccA_frag[(index)i1] == jfrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag

         GET     e1error[ifrag] 
         etemp = e1error[ifrag] 
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 

            t1ai[a,i] = 0.0 

               GET Viabj[i,a,a1,i1]  
               GET t1old[a1,i1] 

               tppqq[i,a,a1,i1]  = Viabj[i,a,a1,i1] 
               tppqq[i,a,a1,i1] *= 2.0  
               tai[a,i] = tppqq[i,a,a1,i1]*t1old[a1,i1]
               t1ai[a,i] += tai[a,i] 

            PUT x1new[a,i] += t1ai[a,i] 

      ENDIF # etemp > cc_conv 

      ENDPARDO ifrag, jfrag, a, i, a1, i1
      sip_barrier 
      pardo ifrag
	  put e10c[ifrag] = 0.0
      endpardo ifrag
      sip_barrier 

      PARDO ifrag, a, i "Frag{i}{vo}{}"
	 where (int)SwVirtA_frag[(index)a] == ifrag
	 where (int)SwOccA_frag[(index)i] == ifrag
         icount = (scalar)ifrag

               GET        x1new[a,i] 
               GET        wC[a,i] 
               tai[a,i] = x1new[a,i] 
               execute energy_denominator_rhf tai[a,i] fock_a  
               PUT t1old[a,i] = tai[a,i] 

               etemp = tai[a,i]*wC[a,i]  
               etemp*= 2.0  

	    PUT e10c[ifrag] += etemp

      ENDPARDO ifrag, a, i
      sip_barrier 
      esum1 = 0.0
      esum2 = 0.0
      PARDO ifrag 
         GET                   e10c[ifrag] 
         GET                   e10c_old[ifrag] 
         etemp2              = e10c_old[ifrag]  
         etemp2             -= e10c[ifrag]  
         PUT e1error[ifrag]  = etemp2
         PUT e10c_old[ifrag] = e10c[ifrag] 
	 esum1 += e10c[ifrag]
	 esum2 += (etemp2**2.0)**0.5
      ENDPARDO ifrag 
      sip_barrier 
      singles = 0.0
      ediff = 0.0
      collective singles += esum1
      collective ediff += esum2
      print singles
      print ediff
      if ediff < cc_conv
	  exit
      endif
      ENDDO jiter
      print "Done singles energy" 
      singles = 0.0
      sip_barrier 
      DO ifrag  
         allocate contiguous final_e10c[ifrag:ifrag]
         GET e10c[ifrag] 
         final_e10c[ifrag:ifrag] = e10c[ifrag] 
	 print final_e10c[ifrag:ifrag]
         etemp = e10c[ifrag] 
         singles += etemp
         deallocate contiguous final_e10c[ifrag:ifrag]
      ENDDO ifrag 
      sip_barrier 
# 
      ENDPROC FORM_T1 
#
# -----------------------------------------------------------------------------
# LINE 1477
# -----------------------------------------------------------------------------
# 
      PROC FORM_T2_0GUESS
#     ------------------- 

      sip_barrier 

# -----------------------------------------------------------------------------
# First form the initial guess to Taiai 
# -----------------------------------------------------------------------------

      esum = 0.0 

      PARDO ifrag, a, i, a1, i1  "Frag{i}{vovo}{}"
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  where (int)SwOccA_frag[(index)i] == ifrag
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  where (int)SwOccA_frag[(index)i1] == ifrag

	     GET                             Vaibj[a,i,a1,i1]  
	     tppqq[a,i,a1,i1]              = Vaibj[a,i,a1,i1] 
	     execute energy_denominator_rhf  tppqq[a,i,a1,i1] fock_a  
	     PUT T2old[a,i,a1,i1]         += tppqq[a,i,a1,i1] 

      ENDPARDO ifrag, a, i, a1, i1

      pardo ifrag
          PUT e20c[ifrag] = 0.0
      endpardo ifrag

      server_barrier


      PARDO ifrag, a, i, a1, i1  "Frag{i}{vovo}{}"
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  where (int)SwOccA_frag[(index)i] == ifrag
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  where (int)SwOccA_frag[(index)i1] == ifrag

		   GET                T2old[a,i,a1,i1] 
		   GET                Vaibj[a,i,a1,i1]  
		   GET                Vaibj[a,i1,a1,i]  

		   t1ppqq[a,i,a1,i1] = Vaibj[a,i,a1,i1]  
		   t3ppqq[a,i1,a1,i] = Vaibj[a,i1,a1,i]  
		   t2ppqq[a,i,a1,i1] = t3ppqq[a,i1,a1,i] 
		   t1ppqq[a,i,a1,i1]*= 2.0  
		   t1ppqq[a,i,a1,i1]-= t2ppqq[a,i,a1,i1] 

		   etemp = T2old[a,i,a1,i1]*t1ppqq[a,i,a1,i1] 
		   PUT e20c[ifrag] += etemp

      ENDPARDO ifrag, a, i, a1, i1
       sip_barrier   


# -----------------------------------------------------------------------------
# Now form the initial guess to Taibj 
# -----------------------------------------------------------------------------

      PARDO ifrag, jfrag, a, i, b, j   "Frag{NRij}{vo}{vo}"
      where ifrag != jfrag
      where (int)rcut_dist[ifrag,jfrag] == ifrag
      where (int)SwVirtA_frag[(index)a] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwVirtA_frag[(index)b] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag

	     GET                             Vaibj[a,i,b,j]  
	     tppqq[a,i,b,j]                = Vaibj[a,i,b,j] 
	     execute energy_denominator_rhf  tppqq[a,i,b,j] fock_a  
	     PUT T2old[a,i,b,j]           += tppqq[a,i,b,j] 

      ENDPARDO ifrag, jfrag, a, i, b, j

      sip_barrier

      ENDPROC FORM_T2_0GUESS




#
# -----------------------------------------------------------------------------
#  line 1562
#
      PROC FORM_T2_GUESS
#     ------------------ 
# Zero out the T20aiai array at the beginning of the microiterations 
# This is the updated doubles V_X + H_0XY*T_XY

      PARDO ifrag, jfrag, a, i, b, j    "Frag{Rij}{vo}{vo}"
      where (int)rcut_dist[ifrag,jfrag] == ifrag
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  where (int)SwOccA_frag[(index)i] == ifrag
	  where (int)SwVirtA_frag[(index)b] == jfrag
	  where (int)SwOccA_frag[(index)j] == jfrag

            PUT T20aiai[a,i,b,j] = 0.0

      ENDPARDO ifrag, jfrag, a, i, b, j

      sip_barrier 




# -----------------------------------------------------------------------------
# First form the initial guess to Taiai 
# -----------------------------------------------------------------------------

      PARDO ifrag, a, i, a1, i1    "Frag{i}{vovo}{}"
	 where (int)SwVirtA_frag[(index)a] == ifrag
	 where (int)SwOccA_frag[(index)i] == ifrag
	 where (int)SwVirtA_frag[(index)a1] == ifrag
	 where (int)SwOccA_frag[(index)i1] == ifrag

	     GET                Vaibj[a,i,a1,i1]  
	     xaiai[a,i,a1,i1] = 0.0  
	     
	     DO jfrag 
	     where ifrag != jfrag
	     where (int)rcut_dist[ifrag,jfrag] == ifrag


		  DO b
	 where (int)SwVirtA_frag[(index)b] == jfrag
		  DO j
	 where (int)SwOccA_frag[(index)j] == jfrag

		      GET                         Viabj[i1,a1,b,j] 
		      GET                         T2old[a,i,b,j] 

		      t3ppqq[b,j,a1,i1]         = Viabj[i1,a1,b,j]  
		      t1ppqq[a,i,a1,i1]         = T2old[a,i,b,j]*t3ppqq[b,j,a1,i1] 
		      xaiai[a,i,a1,i1]         += t1ppqq[a,i,a1,i1] 

		ENDDO j
		ENDDO b
             enddo jfrag

	     t1ppqq[a1,i1,a,i]     = xaiai[a,i,a1,i1] 
	     tppqq[a,i,a1,i1]      = xaiai[a,i,a1,i1] 
	     tppqq[a,i,a1,i1]     += Vaibj[a,i,a1,i1] 
	     t1ppqq[a1,i1,a,i]     = t1ppqq[a1,i1,a,i] 

	     PUT T20aiai[a,i,a1,i1]+= tppqq[a,i,a1,i1] 
	     PUT T20aiai[a1,i1,a,i]+= t1ppqq[a1,i1,a,i] 

      ENDPARDO ifrag, a, i, a1, i1


      server_barrier

#      PARDO ifrag    #: Fragment_i_vovo__
#	  where (int)SwVirtA_frag[(index)a] == ifrag
#	  where (int)SwOccA_frag[(index)i] == ifrag
#	  where (int)SwVirtA_frag[(index)a1] == ifrag
#	  where (int)SwOccA_frag[(index)i1] == ifrag
#
#	  esum = 0.0 
#
#
#               GET                T20aiai[a,i,a1,i1] 
#               GET                Vaibj[a,i,a1,i1]  
#               GET                Vaibj[a,i1,a1,i]  
#
#               tppqq[a,i,a1,i1] = T20aiai[a,i,a1,i1] 
#
#               execute energy_denominator_rhf tppqq[a,i,a1,i1] fock_a  
#
#               t1ppqq[a,i,a1,i1] = Vaibj[a,i,a1,i1]  
#               t3ppqq[a,i1,a1,i] = Vaibj[a,i1,a1,i]  
#               t2ppqq[a,i,a1,i1]   = t3ppqq[a,i1,a1,i] 
#               t1ppqq[a,i,a1,i1]*= 2.0  
#               t1ppqq[a,i,a1,i1]-= t2ppqq[a,i,a1,i1] 
#
#               etemp = tppqq[a,i,a1,i1]*t1ppqq[a,i,a1,i1] 
#               esum += etemp 
#
# 
#      ENDPARDO ifrag 

# -----------------------------------------------------------------------------
# Now form the initial guess to Taibj 
# -----------------------------------------------------------------------------



      PARDO ifrag, jfrag, a, i, b, j     "Frag{NRij}{vo}{vo}"
      where jfrag != ifrag 
      where (int)rcut_dist[ifrag,jfrag] == ifrag
	 where (int)SwVirtA_frag[(index)a] == ifrag
	 where (int)SwOccA_frag[(index)i] == ifrag
	 where (int)SwVirtA_frag[(index)b] == jfrag
	 where (int)SwOccA_frag[(index)j] == jfrag

	     GET                            Vaibj[a,i,b,j]  
	     t2ppqq[a,i,b,j]              = Vaibj[a,i,b,j]  
#

	     DO a1
	     where (int)SwVirtA_frag[(index)a1] == ifrag
	     DO i1  
	     where (int)SwOccA_frag[(index)i1] == ifrag

		  GET T2old[a,i,a1,i1] 
		  GET T2old[a,i1,a1,i] 
		  GET Viabj[i1,a1,b,j] 

		  tppqq[a,i,a1,i1]  = T2old[a,i,a1,i1] 
		  t1ppqq[a,i,a1,i1] = T2old[a,i1,a1,i] 
		  tppqq[a,i,a1,i1] *= 2.0  
		  tppqq[a,i,a1,i1] -= t1ppqq[a,i,a1,i1] 

		  taiai[a,i,b,j]    = tppqq[a,i,a1,i1]*Viabj[i1,a1,b,j] 
		  t2ppqq[a,i,b,j]  += taiai[a,i,b,j] 

	     ENDDO i1
	     ENDDO a1 

	     DO b1
	     where (int)SwVirtA_frag[(index)b1] == jfrag
	     DO j1
	     where (int)SwOccA_frag[(index)j1] == jfrag

		  GET T2old[b,j,b1,j1] 
		  GET T2old[b,j1,b1,j] 
		  GET Viabj[j1,b1,a,i] 

		  tppqq[b,j,b1,j1]  = T2old[b,j,b1,j1] 
		  t1ppqq[b,j,b1,j1] = T2old[b,j1,b1,j] 
		  tppqq[b,j,b1,j1] *= 2.0  
		  tppqq[b,j,b1,j1] -= t1ppqq[b,j,b1,j1] 

		  taiai[a,i,b,j]    = tppqq[b,j,b1,j1]*Viabj[j1,b1,a,i] 
		  t2ppqq[a,i,b,j]  += taiai[a,i,b,j] 

	     ENDDO j1
	     ENDDO b1 

	     PUT T20aiai[a,i,b,j]        += t2ppqq[a,i,b,j] 

      ENDPARDO ifrag, jfrag, a, i, b, j  

      sip_barrier

      ENDPROC FORM_T2_GUESS
#     --------------------- 








# 
# -----------------------------------------------------------------------------
# line 1737
#
      PROC FORM_T2_FRAGMENT_ITERS
#     ---------------------------  
# 
# -----------------------------------------------------------------------------
#     START OF FRAGMENT ITERATIONS 
# -----------------------------------------------------------------------------
      PARDO ifrag  
         PUT e20c_old[ifrag] = 0.0
         PUT e2error[ifrag]  = 1.0
      ENDPARDO ifrag  
      sip_barrier
#
      eold = 0.0
      print "Performing a fragment CCPT2 calc"
      DO kiter 
      print kiter
#
      sip_barrier
      PARDO ifrag, a, i, a1, i1 "Frag{i}{vovo}{}"
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  where (int)SwOccA_frag[(index)i] == ifrag
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  where (int)SwOccA_frag[(index)i1] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 
      IF etemp > cc_conv 
         do_iter = 1.0 

              GET                    T20aiai[a,i,a1,i1] 
              PUT T2new[a,i,a1,i1] = T20aiai[a,i,a1,i1] 

      ENDIF #etemp > c_conv
      ENDPARDO ifrag, a, i, a1, i1


      PARDO ifrag, mu, nu, i, i1 "Frag{i}{aaoo}{}"
	  where (int)SwAO_frag[(index)mu] == ifrag
	  where (int)SwOccA_frag[(index)i] == ifrag
	  where (int)SwAO_frag[(index)nu] == ifrag
	  where (int)SwOccA_frag[(index)i1] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 
      IF etemp > cc_conv 
         do_iter = 1.0 


              txpxq[mu,i,nu,i1]       = 0.0 
              PUT TAO_ab[mu,i,nu,i1]  = txpxq[mu,i,nu,i1] 
              PUT T2AO_ab[mu,i,nu,i1] = txpxq[mu,i,nu,i1] 

      ENDIF #etemp > c_conv
      ENDPARDO ifrag, mu, nu, i, i1


      server_barrier


# Form backtransformed amplitudes 
      PARDO ifrag, mu, i, a, j "Frag{i}{aovo}{}"
	  where (int)SwAO_frag[(index)mu] == ifrag
	  where (int)SwOccA_frag[(index)i] == ifrag
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  where (int)SwOccA_frag[(index)j] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 
      IF etemp > cc_conv 

	     taixj[a,i,mu,j] = 0.0

	      DO b
	      where (int)SwVirtA_frag[(index)b] == ifrag

		     GET                T2old[a,i,b,j] 
		     T1aixj[a,i,mu,j] = T2old[a,i,b,j]*ca[mu,b]
		     Taixj[a,i,mu,j] += T1aixj[a,i,mu,j]

	      ENDDO b

	      DO nu
	      where (int)SwAO_frag[(index)nu] == ifrag

		     Txixi[nu,i,mu,j]       = Taixj[a,i,mu,j]*ca[nu,a]
		     PUT TAO_ab[nu,i,mu,j] += Txixi[nu,i,mu,j]

	       ENDDO nu

      ENDIF #etemp > c_conv
      ENDPARDO ifrag, mu, i, a, j


      server_barrier # barrier because of put tau_ab
#
# Do Ladder contraction 
#
      PARDO ifrag, mu, nu, lambda, sigma "Frag{i}{aaaa}{}"
	  where (int)SwAO_frag[(index)mu] == ifrag
	  where (int)SwAO_frag[(index)nu] == ifrag
	  where (int)SwAO_frag[(index)lambda] == ifrag
	  where (int)SwAO_frag[(index)sigma] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 
      IF etemp > cc_conv 
         do_iter = 1.0 

                 aoint[lambda,mu,sigma,nu]  = 0.0 
                 execute compute_integral_batch aoint[lambda,mu,sigma,nu] #  1 1 2 2  

		  DO i  
		  where (int)SwOccA_frag[(index)i] == ifrag
		  DO j  
		  where (int)SwOccA_frag[(index)j] == ifrag

                     GET                       TAO_ab[lambda,i,sigma,j] 
                     txixi[mu,i,nu,j]        = aoint[lambda,mu,sigma,nu]*TAO_ab[lambda,i,sigma,j] 
                     PUT T2AO_ab[mu,i,nu,j] += txixi[mu,i,nu,j] 

                  ENDDO j 
                  ENDDO i 

      ENDIF #etemp > c_conv
      ENDPARDO ifrag, mu, nu, lambda, sigma


#
# Add the WMEBJ term 
#
      PARDO ifrag, a, i, a1, i1 "Frag{i}{vovo}{}"
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  where (int)SwOccA_frag[(index)i] == ifrag
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  where (int)SwOccA_frag[(index)i1] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 
      IF etemp > cc_conv 

#     AA 

	     GET                 Viabj[i,a,a1,i1]  
	     GET                 Vaajj[a1,a,i,i1] 

	     t2ppqq[i,a,a1,i1] = Viabj[i,a,a1,i1] 
	     tppqq[a,i,a1,i1]  = t2ppqq[i,a,a1,i1] 

	     t3ppqq[a1,a,i,i1] = Vaajj[a1,a,i,i1] 
	     t1ppqq[a,i,a1,i1] = t3ppqq[a1,a,i,i1] 

	     tppqq[a,i,a1,i1] -= t1ppqq[a,i,a1,i1]  

	      DO b
	      where (int)SwVirtA_frag[(index)b] == ifrag
	      DO j  
	      where (int)SwOccA_frag[(index)j] == ifrag
		   GET                   T2old[a1,i1,b,j] 
		   xaiai[a,i,b,j]      = tppqq[a,i,a1,i1]*T2old[a1,i1,b,j]  
		   t2ppqq[b,j,a,i]     = xaiai[a,i,b,j] 
		   PUT T2new[a,i,b,j] += xaiai[a,i,b,j] 
		   PUT T2new[b,j,a,i] += t2ppqq[b,j,a,i] 
	      ENDDO j 
	      ENDDO b 

      ENDIF #etemp > c_conv
      ENDPARDO ifrag, a, i, a1, i1


      PARDO ifrag, a, i, a1, i1 "Frag{i}{vovo}{}"
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  where (int)SwOccA_frag[(index)i] == ifrag
	  where (int)SwOccA_frag[(index)i1] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 
      IF etemp > cc_conv 

#     AB 

	     GET                 T2old[a1,i1,a,i] 
	     GET                 T2old[a1,i,a,i1]  

	     tppqq[a1,i1,a,i]  = T2old[a1,i1,a,i] 
	     t3ppqq[a1,i,a,i1] = T2old[a1,i,a,i1]  
	     t1ppqq[a1,i1,a,i] = t3ppqq[a1,i,a,i1]  

	     tppqq[a1,i1,a,i] -= t1ppqq[a1,i1,a,i]  
	     t2ppqq[a1,i1,i,a] = tppqq[a1,i1,a,i] 

	      DO b
	      where (int)SwVirtA_frag[(index)b] == ifrag
	      DO j  
	      where (int)SwOccA_frag[(index)j] == ifrag
		   GET                     Viabj[i,a,b,j] 
		   xaiai[a1,i1,b,j]      = t2ppqq[a1,i1,i,a]*Viabj[i,a,b,j]  
		   t3ppqq[b,j,a1,i1]     = xaiai[a1,i1,b,j] 

		   PUT T2new[a1,i1,b,j] += xaiai[a1,i1,b,j] 
		   PUT T2new[b,j,a1,i1] += t3ppqq[b,j,a1,i1] 
	      ENDDO j 
	      ENDDO b 

      ENDIF #etemp > c_conv
      ENDPARDO ifrag, a, i, a1, i1


      PARDO ifrag, a, j, b1, i1 "Frag{i}{vovo}{}"
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  where (int)SwOccA_frag[(index)j] == ifrag
	  where (int)SwVirtA_frag[(index)b1] == ifrag
	  where (int)SwOccA_frag[(index)i1] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 
      IF etemp > cc_conv 

#     AB 

	     GET                 T2old[a,i1,b1,j] 
	     t1ppqq[a,i1,b1,j] = T2old[a,i1,b1,j] 

	      DO b
	      where (int)SwVirtA_frag[(index)b] == ifrag
	      DO i  
	      where (int)SwOccA_frag[(index)i] == ifrag
		   GET                   Vaajj[b,b1,i1,i] 
		   xaiai[a,i,b,j]      = t1ppqq[a,i1,b1,j]*Vaajj[b,b1,i1,i]   
		   xaiai[a,i,b,j]     *= -1.0  
		   t3ppqq[b,j,a,i]     = xaiai[a,i,b,j] 

		   PUT T2new[a,i,b,j] += xaiai[a,i,b,j] 
		   PUT T2new[b,j,a,i] += t3ppqq[b,j,a,i] 
	      ENDDO i 
	      ENDDO b 

      ENDIF #etemp > c_conv
      ENDPARDO ifrag, a, j, b1, i1


      PARDO ifrag, a, i1, b, j1 "Frag{i}{vovo}{}"
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  where (int)SwVirtA_frag[(index)b] == ifrag
	  where (int)SwOccA_frag[(index)i1] == ifrag
	  where (int)SwOccA_frag[(index)j1] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 
      IF etemp > cc_conv 

#     v^2 o^4 term  

	     GET                 T2old[a,i1,b,j1] 
	     t1ppqq[a,i1,b,j1] = T2old[a,i1,b,j1] 

	      DO i  
	      where (int)SwOccA_frag[(index)i] == ifrag
	      DO j  
	      where (int)SwOccA_frag[(index)j] == ifrag
		   GET                   Viijj[i1,i,j1,j] 
		   tppqq[i1,i,j1,j]    = Viijj[i1,i,j1,j] 
		   xaiai[a,i,b,j]      = t1ppqq[a,i1,b,j1]*tppqq[i1,i,j1,j]  
		   PUT T2new[a,i,b,j] += xaiai[a,i,b,j] 
	       ENDDO j 
	       ENDDO i 

      ENDIF #etemp > c_conv
      ENDPARDO ifrag, a, i1, b, j1

      server_barrier # barrier because of put t2au_ab
# 
#    Perform final transformation of LADDER contribution
#    ---------------------------------------------------
#
      PARDO ifrag, nu, i, j "Frag{i}{aoo}{}"
	  where (int)SwAO_frag[(index)nu] == ifrag
	  where (int)SwOccA_frag[(index)i] == ifrag
	  where (int)SwOccA_frag[(index)j] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 
      IF etemp > cc_conv 
#
	      DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag
                    allocate LDaixj[a,i,nu,j]
              ENDDO a
#
	      DO mu
	      where (int)SwAO_frag[(index)mu] == ifrag
#
                 GET                T2AO_ab[mu,i,nu,j] 
                 txixj[mu,i,nu,j] = T2AO_ab[mu,i,nu,j] 
#
		  DO a
		  where (int)SwVirtA_frag[(index)a] == ifrag
                       Taixj[a,i,nu,j]   = txixj[mu,i,nu,j]*ca[mu,a]
                       LDaixj[a,i,nu,j] += Taixj[a,i,nu,j]
                  ENDDO a

              ENDDO mu

	      DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag
	      DO b
	      where (int)SwVirtA_frag[(index)b] == ifrag
                 Tppqq[a,i,b,j]      = LDaixj[a,i,nu,j]*ca[nu,b]
                 PUT T2new[a,i,b,j] += Tppqq[a,i,b,j]
              ENDDO b
              ENDDO a
#
	      DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag
                    deallocate LDaixj[a,i,nu,j]
              ENDDO a
#

      ENDIF #etemp > c_conv
      ENDPARDO ifrag, nu, i, j

      server_barrier
#
# Form the new ampllitude 
#
      PARDO ifrag, a, i, a1, i1 "Frag{i}{vovo}{}"
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  where (int)SwOccA_frag[(index)i] == ifrag
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  where (int)SwOccA_frag[(index)i1] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 
      IF etemp > cc_conv 

              GET                        T2new[a,i,a1,i1] 
              tppqq[a,i,a1,i1]         = T2new[a,i,a1,i1] 
              execute energy_denominator_rhf tppqq[a,i,a1,i1] fock_a  
              PUT T2old[a,i,a1,i1] = tppqq[a,i,a1,i1] 

      ENDIF #etemp > c_conv
      ENDPARDO ifrag, a, i, a1, i1

      server_barrier
      pardo ifrag
          put e20c[ifrag] = 0.0
      endpardo ifrag
      server_barrier
#
# Form the new energy 
#
      PARDO ifrag, a, i, a1, i1 "Frag{i}{vovo}{}"
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  where (int)SwOccA_frag[(index)i] == ifrag
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  where (int)SwOccA_frag[(index)i1] == ifrag

      #   GET     e2error[ifrag] 
#	 etemp = e2error[ifrag]
#         if etemp < zero  
#            etemp *= -1.0 
#         endif 
#      IF etemp > cc_conv 
         do_iter = 1.0 

               GET                T2old[a,i,a1,i1] 
               GET                Vaibj[a,i,a1,i1]  
               GET                Vaibj[a,i1,a1,i]  

               t1ppqq[a,i,a1,i1] = Vaibj[a,i,a1,i1]  
               t3ppqq[a,i1,a1,i] = Vaibj[a,i1,a1,i]  
               t2ppqq[a,i,a1,i1] = t3ppqq[a,i1,a1,i] 
               t1ppqq[a,i,a1,i1]*= 2.0  
               t1ppqq[a,i,a1,i1]-= t2ppqq[a,i,a1,i1] 

               etemp = T2old[a,i,a1,i1]*t1ppqq[a,i,a1,i1] 

               PUT e20c[ifrag]  += etemp

#      ENDIF # etemp > cc_conv 
      ENDPARDO ifrag, a, i, a1, i1
      sip_barrier
      esum = 0.0
      sip_barrier
      PARDO ifrag 
         GET                  e20c[ifrag] 
         GET                  e20c_old[ifrag] 
	 etemp = e20c[ifrag]
	 esum += etemp
         tp[ifrag]          = e20c_old[ifrag]  
         tp[ifrag]         -= e20c[ifrag]  
         PUT e2error[ifrag] = tp[ifrag] 
         PUT e20c_old[ifrag]= e20c[ifrag] 
      ENDPARDO ifrag 
      sip_barrier 
#
# -----------------------------------------------------------------------------
#     END OF FRAGMENT ITERATIONS 
# -----------------------------------------------------------------------------
#
      fragment_doubles = 0.0
      sip_barrier 
      collective fragment_doubles += esum
      sip_barrier 
      print fragment_doubles
      ediff = fragment_doubles - eold
      escr = ediff**2.0
      ediff = escr**0.5
      print ediff
      if ediff < cc_conv
	  exit #kiter
      endif
      eold = fragment_doubles
      sip_barrier
      ENDDO kiter 
      sip_barrier
#
      PARDO ifrag, jfrag 
      where ifrag == jfrag 
         GET                        e20c[ifrag] 
         t20disp[ifrag,jfrag]     = e20c[ifrag]  
         PUT e20disp[ifrag,jfrag] = t20disp[ifrag,jfrag] 
      ENDPARDO ifrag, jfrag  
#
# -----------------------------------------------------------------------------
#     END OF FRAGMENT CALCULATIONS  
# -----------------------------------------------------------------------------
# 
      ENDPROC FORM_T2_FRAGMENT_ITERS
# -----------------------------------------------------------------------------
#     Dimer calculations   
# -----------------------------------------------------------------------------







# line 2208
      PROC FORM_T2_DIMER_ITERS
#     ------------------------  
# 
      PARDO ifrag, jfrag   
       WHERE ifrag != jfrag 
         PUT d20c_old[ifrag,jfrag] = 0.0
         PUT d2error[ifrag,jfrag]  = 10.0
      ENDPARDO ifrag, jfrag   
      sip_barrier
#
      eold = 0.0

         print "Performing a dimer CCPT2 calc"
      DO kiter 
	 print kiter
#
      PARDO ifrag, jfrag, a, i, a1, i1 "Frag{NRij}{vo}{vo}"
      where ifrag != jfrag
      where (int)rcut_dist[ifrag,jfrag] == ifrag
      where (int)SwVirtA_frag[(index)a] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwVirtA_frag[(index)a1] == jfrag
      where (int)SwOccA_frag[(index)i1] == jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 

              GET                    T20aiai[a,i,a1,i1] 
              PUT T2new[a,i,a1,i1] = T20aiai[a,i,a1,i1] 

      ENDIF
      ENDPARDO ifrag, jfrag, a, i, a1, i1

      PARDO ifrag, jfrag, mu, i, nu, i1 "Frag{NRij}{ao}{ao}"
      where ifrag != jfrag
      where (int)rcut_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwAO_frag[(index)nu] == jfrag
      where (int)SwOccA_frag[(index)i1] == jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 

              PUT TAO_ab[mu,i,nu,i1]  = 0.0
              PUT T2AO_ab[mu,i,nu,i1] = 0.0

      ENDIF
      ENDPARDO ifrag, jfrag, mu, i, nu, i1

      server_barrier

# Form backtransformed amplitudes 
      PARDO ifrag, jfrag, a, i, mu, j "Frag{NRij}{vo}{ao}"
      where ifrag != jfrag
      where (int)rcut_dist[ifrag,jfrag] == ifrag
      where (int)SwVirtA_frag[(index)a] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwAO_frag[(index)mu] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 

	     taixj[a,i,mu,j] = 0.0

	      DO b
	      where (int)SwVirtA_frag[(index)b] == jfrag

		     GET                T2old[a,i,b,j]
		     T1aixj[a,i,mu,j] = T2old[a,i,b,j]*ca[mu,b]
		     Taixj[a,i,mu,j] += T1aixj[a,i,mu,j]

	      ENDDO b

	      DO nu 
	      where (int) SwAO_frag[(index)nu] == ifrag

		     Txixi[nu,i,mu,j]       = Taixj[a,i,mu,j]*ca[nu,a]
		     PUT TAO_ab[nu,i,mu,j] += Txixi[nu,i,mu,j]

	       ENDDO nu

      ENDIF
      ENDPARDO ifrag, jfrag, a, i, mu, j


      server_barrier


# Do Ladder contraction 
      PARDO ifrag, jfrag, mu, lambda, nu, sigma "Frag{NRij}{aa}{aa}"
      where ifrag != jfrag
      where (int)rcut_dist[ifrag,jfrag] == ifrag
	  where (int)SwAO_frag[(index)mu] == ifrag
	  where (int)SwAO_frag[(index)lambda] == ifrag
	  where (int)SwAO_frag[(index)nu] == jfrag
	  where (int)SwAO_frag[(index)sigma] == jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 

                 aoint[lambda,mu,sigma,nu]  = 0.0
                 execute compute_integral_batch aoint[lambda,mu,sigma,nu] #  1 1 2 2  

                 DO i
		 where (int)SwOccA_frag[(index)i] == ifrag
                 DO j
		 where (int)SwOccA_frag[(index)j] == jfrag

                     GET                       TAO_ab[lambda,i,sigma,j]
                     txixi[mu,i,nu,j]        = aoint[lambda,mu,sigma,nu]*TAO_ab[lambda,i,sigma,j]
                     PUT T2AO_ab[mu,i,nu,j] += txixi[mu,i,nu,j]

                 ENDDO j
                 ENDDO i

      ENDIF
      ENDPARDO ifrag, jfrag, mu, lambda, nu, sigma


# Add the WMEBJ term 
      PARDO ifrag, jfrag, a, i1, b1, j "Frag{NRij}{vo}{vo}"
      where ifrag != jfrag
      where (int)rcut_dist[ifrag,jfrag] == ifrag
      where (int)SwVirtA_frag[(index)a] == ifrag
      where (int)SwOccA_frag[(index)i1] == ifrag
      where (int)SwVirtA_frag[(index)b1] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 

#     AB 

	     GET                 T2old[a,i1,b1,j]
	     t1ppqq[a,i1,b1,j] = T2old[a,i1,b1,j]

	     DO b
	     where (int)SwVirtA_frag[(index)b] == jfrag
	     DO i
	     where (int)SwOccA_frag[(index)i] == ifrag

		   GET                   Vaajj[b,b1,i1,i]
		   xaiai[a,i,b,j]      = t1ppqq[a,i1,b1,j]*Vaajj[b,b1,i1,i]
		   xaiai[a,i,b,j]     *= -1.0
		   PUT T2new[a,i,b,j] += xaiai[a,i,b,j]

	     ENDDO i
	     ENDDO b

      ENDIF
      ENDPARDO ifrag, jfrag, a, i1, b1, j

      PARDO ifrag, jfrag, a, a1, j, j1 "Frag{NRij}{vv}{oo}"
      where ifrag != jfrag
      where (int)rcut_dist[ifrag,jfrag] == ifrag
	  where (int)SwVirtA_frag[(index)a] == ifrag
	  where (int)SwVirtA_frag[(index)a1] == ifrag
	  where (int)SwOccA_frag[(index)j] == jfrag
	  where (int)SwOccA_frag[(index)j1] == jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 

	     DO b
	     where (int)SwVirtA_frag[(index)b] == jfrag
	     DO i
	     where (int)SwOccA_frag[(index)i] == ifrag

		   GET                 T2old[a1,i,b,j1]
		   t1ppqq[a1,i,b,j1] = T2old[a1,i,b,j1]

		   GET                   Vaajj[a,a1,j1,j]
		   xaiai[a,i,b,j]      = t1ppqq[a1,i,b,j1]*Vaajj[a,a1,j1,j]
		   xaiai[a,i,b,j]     *= -1.0
		   PUT T2new[a,i,b,j] += xaiai[a,i,b,j]

	     ENDDO i
	     ENDDO b

      ENDIF
      ENDPARDO ifrag, jfrag, a, a1, j, j1

#     v^2 o^4 term  
      PARDO ifrag, jfrag, a, i1, b, j1 "Frag{NRij}{vo}{vo}"
      where ifrag != jfrag
      where (int)rcut_dist[ifrag,jfrag] == ifrag
      where (int)SwVirtA_frag[(index)a] == ifrag
      where (int)SwOCcA_frag[(index)i1] == ifrag
      where (int)SwVirtA_frag[(index)b] == jfrag
      where (int)SwOccA_frag[(index)j1] == jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 

	     GET                 T2old[a,i1,b,j1]
	     t1ppqq[a,i1,b,j1] = T2old[a,i1,b,j1]

	     DO i
	     where (int)SwOCcA_frag[(index)i] == ifrag
	     DO j
	     where (int)SwOccA_frag[(index)j] == jfrag
		   GET                   Viijj[i1,i,j1,j]
		   tppqq[i1,i,j1,j]    = Viijj[i1,i,j1,j]
		   xaiai[a,i,b,j]      = t1ppqq[a,i1,b,j1]*tppqq[i1,i,j1,j]
		   PUT T2new[a,i,b,j] += xaiai[a,i,b,j]

	     ENDDO j
	     ENDDO i

      ENDIF
      ENDPARDO ifrag, jfrag, a, i1, b, j1

      server_barrier

#    Perform final transformation of LADDER contribution
      PARDO ifrag, jfrag, i, nu, j "Frag{NRij}{o}{ao}"
      where ifrag != jfrag
      where (int)rcut_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == jfrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwOccA_frag[(index)j] == jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
#
		DO a
		where (int)SwVirtA_frag[(index)a] == ifrag
			allocate LDaixj[a,i,nu,j]
		ENDDO a
#
		DO mu
		where (int)SwAO_frag[(index)mu] == ifrag
#
		   GET                T2AO_ab[mu,i,nu,j]
		   txixj[mu,i,nu,j] = T2AO_ab[mu,i,nu,j]
#
		   DO a
		   where (int)SwVirtA_frag[(index)a] == ifrag
			   Taixj[a,i,nu,j]   = txixj[mu,i,nu,j]*ca[mu,a]
			   LDaixj[a,i,nu,j] += Taixj[a,i,nu,j]
		   ENDDO a

		ENDDO mu


		DO a
		where (int)SwVirtA_frag[(index)a] == ifrag
		DO b
		where (int)SwVirtA_frag[(index)b] == jfrag
		     Tppqq[a,i,b,j]      = LDaixj[a,i,nu,j]*ca[nu,b]
		     PUT T2new[a,i,b,j] += Tppqq[a,i,b,j]
		ENDDO b
		ENDDO a
#
		DO a
		where (int)SwVirtA_frag[(index)a] == ifrag
			deallocate LDaixj[a,i,nu,j]
		ENDDO a
#
      ENDIF
      ENDPARDO ifrag, jfrag, i, nu, j


#    Add the contributions coming from Vaiai  
      PARDO ifrag, jfrag, a, i, b, j "Frag{NRij}{vo}{vo}"
      where ifrag != jfrag
      where (int)rcut_dist[ifrag,jfrag] == ifrag
      where (int)SwVirtA_frag[(index)a] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwVirtA_frag[(index)b] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 

	     t2ppqq[a,i,b,j]              = 0.0  

	     DO a1 
	     where (int)SwVirtA_frag[(index)a1] == ifrag
	     DO i1 
	     where (int)SwOccA_frag[(index)i1] == ifrag

		   GET T2old[a1,i1,b,j] 
		   GET Viabj[i1,a1,a,i] 
		   GET Vaajj[a1,a,i,i1] 

		   tppqq[a1,i1,a,i]  = Viabj[i1,a1,a,i]  
		   t1ppqq[a1,i1,a,i] = Vaajj[a1,a,i,i1]  
		   tppqq[a1,i1,a,i] *= 2.0  
		   tppqq[a1,i1,a,i] -= t1ppqq[a1,i1,a,i] 

		   taiai[a,i,b,j]    = T2old[a1,i1,b,j]*tppqq[a1,i1,a,i]   
		   t2ppqq[a,i,b,j]  += taiai[a,i,b,j] 

	     ENDDO i1
	     ENDDO a1 

	     DO b1 
             where (int)SwVirtA_frag[(index)b1] == jfrag
	     DO j1 
	     where (int)SwOccA_frag[(index)j1] == jfrag

		   GET T2old[a,i,b1,j1] 
		   GET Viabj[j1,b1,b,j] 
		   GET Vaajj[b1,b,j,j1] 

		   tppqq[b1,j1,b,j]  = Viabj[j1,b1,b,j]  
		   t1ppqq[b1,j1,b,j] = Vaajj[b1,b,j,j1]  
		   tppqq[b1,j1,b,j] *= 2.0  
		   tppqq[b1,j1,b,j] -= t1ppqq[b1,j1,b,j] 

		   taiai[a,i,b,j]    = T2old[a,i,b1,j1]*tppqq[b1,j1,b,j]   
		   t2ppqq[a,i,b,j]  += taiai[a,i,b,j] 

	     ENDDO j1
	     ENDDO b1 

	     PUT T2new[a,i,b,j]        += t2ppqq[a,i,b,j] 

      ENDIF
      ENDPARDO ifrag, jfrag, a, i, b, j

      server_barrier

# Form the new amplitude 
      PARDO ifrag, jfrag, a, i, a1, i1 "Frag{NRij}{vo}{vo}"
      where ifrag != jfrag
      where (int)rcut_dist[ifrag,jfrag] == ifrag
      where (int)SwVirtA_frag[(index)a] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwVirtA_frag[(index)a1] == jfrag
      where (int)SwOccA_frag[(index)i1] == jfrag

         GET     d2error[ifrag,jfrag] 
         etemp = d2error[ifrag,jfrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 

              GET                        T2new[a,i,a1,i1]
              tppqq[a,i,a1,i1]         = T2new[a,i,a1,i1]
              execute energy_denominator_rhf tppqq[a,i,a1,i1] fock_a
              PUT T2old[a,i,a1,i1] = tppqq[a,i,a1,i1]

      ENDIF
      ENDPARDO ifrag, jfrag, a, i, a1, i1

      server_barrier
      pardo ifrag,jfrag
      where ifrag != jfrag
      where (int)rcut_dist[ifrag,jfrag] == ifrag
	       PUT d20c[ifrag,jfrag] = 0.0
      endpardo ifrag,jfrag
      server_barrier

# Form the new energy 
      PARDO ifrag, jfrag, a, i, a1, i1 "Frag{NRij}{vo}{vo}"
      where ifrag != jfrag
      where (int)rcut_dist[ifrag,jfrag] == ifrag
      where (int)SwVirtA_frag[(index)a] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwVirtA_frag[(index)a1] == jfrag
      where (int)SwOccA_frag[(index)i1] == jfrag

               GET                T2old[a,i,a1,i1]
               GET                Vaibj[a,i,a1,i1]

               etemp = T2old[a,i,a1,i1]*Vaibj[a,i,a1,i1]
               etemp*= 4.0  
	       PUT d20c[ifrag,jfrag] += etemp

      ENDPARDO ifrag, jfrag, a, i, a1, i1

      esum = 0.0 
      dimer_doubles = 0.0 
      sip_barrier 

      PARDO ifrag, jfrag  
      WHERE ifrag != jfrag 
      where (int)rcut_dist[ifrag,jfrag] == ifrag

         GET                        d20c[ifrag,jfrag] 
         GET                        d20c_old[ifrag,jfrag] 
         t20disp[ifrag,jfrag]     = d20c_old[ifrag,jfrag]  
         t20disp[ifrag,jfrag]    -= d20c[ifrag,jfrag]  
         PUT d2error[ifrag,jfrag] = t20disp[ifrag,jfrag] 
         PUT d20c_old[ifrag,jfrag]= d20c[ifrag,jfrag] 

         etemp = d20c[ifrag,jfrag]
         if jfrag > ifrag 
            esum += etemp 
         endif 

      ENDPARDO ifrag, jfrag  
      sip_barrier 
      collective dimer_doubles += esum 
      print dimer_doubles
      ediff = dimer_doubles - eold
      escr = ediff**2.0
      ediff = escr**0.5
      print ediff
      if ediff < cc_conv
	  exit #kiter
      endif
      eold = dimer_doubles
      sip_barrier
#
      ENDDO kiter 
# 
      ENDPROC FORM_T2_DIMER_ITERS
#
# -----------------------------------------------------------------------------
#






      PROC FORM_T2_MONOMER  
#     --------------------  
# 
# -----------------------------------------------------------------------------
#     Fragment only calculation  
# -----------------------------------------------------------------------------
      PARDO ifrag  
         PUT e20c_old[ifrag] = 0.0
         PUT e2error[ifrag]  = 1.0
      ENDPARDO ifrag  
#
      sip_barrier
      PARDO ifrag, a, i, a1, i1 "Frag{i}{vovo}{}"
	where (int)SwVirtA_frag[(index)a] == ifrag
	where (int)SwOccA_frag[(index)i] == ifrag
	where (int)SwVirtA_frag[(index)a1] == ifrag
	where (int)SwOccA_frag[(index)i1] == ifrag

              GET                         T2old[a,i,a1,i1] 
              PUT T2old_mono[a,i,a1,i1] = T2old[a,i,a1,i1] 

      ENDPARDO ifrag, a, i, a1, i1
      sip_barrier
#
      eold = 0.0
      print "Performing a LCCD calc on fragment "
      DO kiter 
         do_iter = 0.0 
#
      sip_barrier
      PARDO ifrag, a, i, a1, i1 "Frag{i}{vovo}{}"
	where (int)SwVirtA_frag[(index)a] == ifrag
	where (int)SwOccA_frag[(index)i] == ifrag
	where (int)SwVirtA_frag[(index)a1] == ifrag
	where (int)SwOccA_frag[(index)i1] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         do_iter = 1.0 


              GET                    Vaibj[a,i,a1,i1] 
              PUT T2new[a,i,a1,i1] = Vaibj[a,i,a1,i1] 

      ENDIF
      ENDPARDO ifrag, a, i, a1, i1


      PARDO ifrag, mu, nu, i, i1 "Frag{i}{aaoo}{}"
	where (int)SwAO_frag[(index)mu] == ifrag
	where (int)SwAO_frag[(index)nu] == ifrag
	where (int)SwOccA_frag[(index)i] == ifrag
	where (int)SwOccA_frag[(index)i1] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         do_iter = 1.0 

              txpxq[mu,i,nu,i1]       = 0.0 
              PUT TAO_ab[mu,i,nu,i1]  = txpxq[mu,i,nu,i1] 
              PUT T2AO_ab[mu,i,nu,i1] = txpxq[mu,i,nu,i1] 

      ENDIF
      ENDPARDO ifrag, mu, nu, i, i1

      server_barrier

      PARDO ifrag, mu, i, a, j "Frag{i}{aovo}{}"
	where (int)SwAO_frag[(index)mu] == ifrag
	where (int)SwOccA_frag[(index)i] == ifrag
	where (int)SwVirtA_frag[(index)a] == ifrag
	where (int)SwOccA_frag[(index)j] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         do_iter = 1.0 

# Form backtransformed amplitudes 

         taixj[a,i,mu,j] = 0.0

          DO b
	  where (int)SwVirtA_frag[(index)b] == ifrag

                 GET                T2old_mono[a,i,b,j] 
                 T1aixj[a,i,mu,j] = T2old_mono[a,i,b,j]*ca[mu,b]
                 Taixj[a,i,mu,j] += T1aixj[a,i,mu,j]

          ENDDO b

          DO nu
	  where (int)SwAO_frag[(index)nu] == ifrag

                 Txixi[nu,i,mu,j]       = Taixj[a,i,mu,j]*ca[nu,a]
                 PUT TAO_ab[nu,i,mu,j] += Txixi[nu,i,mu,j]

           ENDDO nu

      ENDIF
      ENDPARDO ifrag, mu, i, a, j

      server_barrier

      PARDO ifrag, mu, nu, lambda, sigma "Frag{i}{aaaa}{}"
	where (int)SwAO_frag[(index)mu] == ifrag
	where (int)SwAO_frag[(index)nu] == ifrag
	where (int)SwAO_frag[(index)lambda] == ifrag
	where (int)SwAO_frag[(index)sigma] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         do_iter = 1.0 

#
# Do Ladder contraction 
#

                 aoint[lambda,mu,sigma,nu]  = 0.0 
                 execute compute_integral_batch aoint[lambda,mu,sigma,nu] #  1 1 2 2  

                 DO i 
	         where (int)SwOccA_frag[(index)i] == ifrag
                 DO j 
   	         where (int)SwOccA_frag[(index)j] == ifrag

                     GET                       TAO_ab[lambda,i,sigma,j] 
                     txixi[mu,i,nu,j]        = aoint[lambda,mu,sigma,nu]*TAO_ab[lambda,i,sigma,j] 
                     PUT T2AO_ab[mu,i,nu,j] += txixi[mu,i,nu,j] 

                 ENDDO j 
                 ENDDO i 

      ENDIF
      ENDPARDO ifrag, mu, nu, lambda, sigma


      PARDO ifrag, a, i, a1, i1 "Frag{i}{vovo}{}"
	where (int)SwVirtA_frag[(index)a] == ifrag
	where (int)SwOccA_frag[(index)i] == ifrag
	where (int)SwVirtA_frag[(index)a1] == ifrag
	where (int)SwOccA_frag[(index)i1] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         do_iter = 1.0 

#
# Add the WMEBJ term 
#
#     AA 
#

         GET                 Viabj[i,a,a1,i1]  
         GET                 Vaajj[a1,a,i,i1] 

         t2ppqq[i,a,a1,i1] = Viabj[i,a,a1,i1] 
         tppqq[a,i,a1,i1]  = t2ppqq[i,a,a1,i1] 

         t3ppqq[a1,a,i,i1] = Vaajj[a1,a,i,i1] 
         t1ppqq[a,i,a1,i1] = t3ppqq[a1,a,i,i1] 

         tppqq[a,i,a1,i1] -= t1ppqq[a,i,a1,i1]  

         DO b 
	 where (int)SwVirtA_frag[(index)b] == ifrag
         DO j 
	 where (int)SwOccA_frag[(index)j] == ifrag
               GET                   T2old_mono[a1,i1,b,j] 
               xaiai[a,i,b,j]      = tppqq[a,i,a1,i1]*T2old_mono[a1,i1,b,j]  
               t2ppqq[b,j,a,i]     = xaiai[a,i,b,j] 
               PUT T2new[a,i,b,j] += xaiai[a,i,b,j] 
               PUT T2new[b,j,a,i] += t2ppqq[b,j,a,i] 
         ENDDO j 
         ENDDO b 

      ENDIF
      ENDPARDO ifrag, a, i, a1, i1


      PARDO ifrag, a, i, a1, i1 "Frag{i}{vovo}{}"
	where (int)SwVirtA_frag[(index)a1] == ifrag
	where (int)SwVirtA_frag[(index)a] == ifrag
	where (int)SwOccA_frag[(index)i] == ifrag
	where (int)SwOccA_frag[(index)i1] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         do_iter = 1.0 

#
#     AB 
#

         GET                 T2old_mono[a1,i1,a,i] 
         GET                 T2old_mono[a1,i,a,i1]  

         tppqq[a1,i1,a,i]  = T2old_mono[a1,i1,a,i] 
         t3ppqq[a1,i,a,i1] = T2old_mono[a1,i,a,i1]  
         t1ppqq[a1,i1,a,i] = t3ppqq[a1,i,a,i1]  

         tppqq[a1,i1,a,i] -= t1ppqq[a1,i1,a,i]  
         t2ppqq[a1,i1,i,a] = tppqq[a1,i1,a,i] 

         DO b 
	 where (int)SwVirtA_frag[(index)b] == ifrag
         DO j 
	 where (int)SwOccA_frag[(index)j] == ifrag
               GET                     Viabj[i,a,b,j] 
               xaiai[a1,i1,b,j]      = t2ppqq[a1,i1,i,a]*Viabj[i,a,b,j]  
               t3ppqq[b,j,a1,i1]     = xaiai[a1,i1,b,j] 

               PUT T2new[a1,i1,b,j] += xaiai[a1,i1,b,j] 
               PUT T2new[b,j,a1,i1] += t3ppqq[b,j,a1,i1] 
         ENDDO j 
         ENDDO b 

      ENDIF
      ENDPARDO ifrag, a, i, a1, i1


      PARDO ifrag, a, i1, b1, j "Frag{i}{vovo}{}"
	where (int)SwVirtA_frag[(index)a] == ifrag
	where (int)SwOccA_frag[(index)j] == ifrag
	where (int)SwOccA_frag[(index)i1] == ifrag
	where (int)SwVirtA_frag[(index)b1] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         do_iter = 1.0 

#
#     AB 
#

         GET                 T2old_mono[a,i1,b1,j] 
         t1ppqq[a,i1,b1,j] = T2old_mono[a,i1,b1,j] 

         DO b 
	 where (int)SwVirtA_frag[(index)b] == ifrag
         DO i 
	 where (int)SwOccA_frag[(index)i] == ifrag
               GET                   Vaajj[b,b1,i1,i] 
               xaiai[a,i,b,j]      = t1ppqq[a,i1,b1,j]*Vaajj[b,b1,i1,i]   
               xaiai[a,i,b,j]     *= -1.0  
               t3ppqq[b,j,a,i]     = xaiai[a,i,b,j] 

               PUT T2new[a,i,b,j] += xaiai[a,i,b,j] 
               PUT T2new[b,j,a,i] += t3ppqq[b,j,a,i] 
         ENDDO i 
         ENDDO b 

      ENDIF
      ENDPARDO ifrag, a, i1, b1, j


      PARDO ifrag, a, i1, b, j1 "Frag{i}{vovo}{}"
	where (int)SwVirtA_frag[(index)a] == ifrag
	where (int)SwVirtA_frag[(index)b] == ifrag
	where (int)SwOccA_frag[(index)i1] == ifrag
	where (int)SwOccA_frag[(index)j1] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         do_iter = 1.0 

#
#     v^2 o^4 term  
#

         GET                 T2old_mono[a,i1,b,j1] 
         t1ppqq[a,i1,b,j1] = T2old_mono[a,i1,b,j1] 

         DO i 
	 where (int)SwOccA_frag[(index)i] == ifrag
         DO j 
	 where (int)SwOccA_frag[(index)j] == ifrag
               GET                   Viijj[i1,i,j1,j] 
               tppqq[i1,i,j1,j]    = Viijj[i1,i,j1,j] 
               xaiai[a,i,b,j]      = t1ppqq[a,i1,b,j1]*tppqq[i1,i,j1,j]  
               PUT T2new[a,i,b,j] += xaiai[a,i,b,j] 
         ENDDO j 
         ENDDO i 

      ENDIF
      ENDPARDO ifrag, a, i1, b, j1

      server_barrier

      PARDO ifrag, nu, i, j "Frag{i}{aoo}{}"
	where (int)SwAO_frag[(index)nu] == ifrag
	where (int)SwOccA_frag[(index)i] == ifrag
	where (int)SwOccA_frag[(index)j] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         do_iter = 1.0 

# 
#    Perform final transformation of LADDER contribution
#    ---------------------------------------------------
#

              DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag
                    allocate LDaixj[a,i,nu,j]
              ENDDO a
#
              DO mu
	      where (int)SwAO_frag[(index)mu] == ifrag
#
                 GET                T2AO_ab[mu,i,nu,j] 
                 txixj[mu,i,nu,j] = T2AO_ab[mu,i,nu,j] 
#
                 DO a
	         where (int)SwVirtA_frag[(index)a] == ifrag
                       Taixj[a,i,nu,j]   = txixj[mu,i,nu,j]*ca[mu,a]
                       LDaixj[a,i,nu,j] += Taixj[a,i,nu,j]
                 ENDDO a

              ENDDO mu

              DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag
              DO b
	      where (int)SwVirtA_frag[(index)b] == ifrag
                 Tppqq[a,i,b,j]      = LDaixj[a,i,nu,j]*ca[nu,b]
                 PUT T2new[a,i,b,j] += Tppqq[a,i,b,j]
              ENDDO b
              ENDDO a
#
              DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag
                    deallocate LDaixj[a,i,nu,j]
              ENDDO a

      ENDIF
      ENDPARDO ifrag, nu, i, j
      
      server_barrier


      PARDO ifrag, a, i, a1, i1 "Frag{i}{vovo}{}"
	where (int)SwVirtA_frag[(index)a] == ifrag
	where (int)SwOccA_frag[(index)i] == ifrag
	where (int)SwVirtA_frag[(index)a1] == ifrag
	where (int)SwOccA_frag[(index)i1] == ifrag

         GET     e2error[ifrag] 
	 etemp = e2error[ifrag]
         if etemp < zero  
            etemp *= -1.0 
         endif 

      IF etemp > cc_conv 
         do_iter = 1.0 

#
# Form the new ampllitude 
#

              GET                        T2new[a,i,a1,i1] 
              tppqq[a,i,a1,i1]         = T2new[a,i,a1,i1] 
              execute energy_denominator_rhf tppqq[a,i,a1,i1] fock_a  
              PUT T2old_mono[a,i,a1,i1] = tppqq[a,i,a1,i1] 

      ENDIF
      ENDPARDO ifrag, a, i, a1, i1


      server_barrier
      pardo ifrag
        PUT e20c[ifrag] = 0.0
      endpardo ifrag
      server_barrier
      esum = 0.0
      PARDO ifrag, a, i, a1, i1 "Frag{i}{vovo}{}"
	where (int)SwVirtA_frag[(index)a] == ifrag
	where (int)SwOccA_frag[(index)i] == ifrag
	where (int)SwVirtA_frag[(index)a1] == ifrag
	where (int)SwOccA_frag[(index)i1] == ifrag

         do_iter = 1.0 

# Form the new energy 

               GET                T2old_mono[a,i,a1,i1] 
               GET                Vaibj[a,i,a1,i1]  
               GET                Vaibj[a,i1,a1,i]  

               t1ppqq[a,i,a1,i1] = Vaibj[a,i,a1,i1]  
               t3ppqq[a,i1,a1,i] = Vaibj[a,i1,a1,i]  
               t2ppqq[a,i,a1,i1] = t3ppqq[a,i1,a1,i] 
               t1ppqq[a,i,a1,i1]*= 2.0  
               t1ppqq[a,i,a1,i1]-= t2ppqq[a,i,a1,i1] 

               etemp = T2old_mono[a,i,a1,i1]*t1ppqq[a,i,a1,i1] 
	       esum += etemp

               PUT e20c[ifrag] += etemp

      ENDPARDO ifrag, a, i, a1, i1
      sip_barrier 

      PARDO ifrag 
         GET                  e20c[ifrag] 
         GET                  e20c_old[ifrag] 
         tp[ifrag]          = e20c_old[ifrag]  
         tp[ifrag]         -= e20c[ifrag]  
         PUT e2error[ifrag] = tp[ifrag] 
         PUT e20c_old[ifrag]= e20c[ifrag] 
      ENDPARDO ifrag 
      sip_barrier 
#
# -----------------------------------------------------------------------------
#     END OF FRAGMENT ITERATIONS 
# -----------------------------------------------------------------------------
      elccd = 0.0
      sip_barrier
      collective elccd += esum
      sip_barrier

      print elccd
      ediff = elccd - eold
      escr = ediff**2.0
      ediff = escr**0.5
      if ediff < cc_conv
	  exit #kiter
      endif
      eold = elccd
#
      ENDDO kiter 
      mono_lccd = 0.0 
      esum = 0.0 
      sip_barrier
#
      print "Final CCPT2 energy of MONOMER" 
      execute get_my_rank rank
      if rank == 0.0
      do ifrag
	 allocate contiguous monomer_lccd[ifrag:ifrag]
         GET                        e20c[ifrag] 
         monomer_lccd[ifrag:ifrag] = e20c[ifrag]  
	 print monomer_lccd[ifrag:ifrag]
         etemp = e20c[ifrag] 
         esum -= etemp 
	 deallocate contiguous monomer_lccd[ifrag:ifrag]
      enddo ifrag
      endif
      sip_barrier
      collective mono_lccd += esum  
#
# -----------------------------------------------------------------------------
#     END OF T2 MONOMER CALCULATIONS  
# -----------------------------------------------------------------------------
# 
      ENDPROC FORM_T2_MONOMER  
#
# ----------------------------------------------------------------------------





# linenumber 3185
PROC ADDITIONAL_FRAG_TRAN
    server_barrier
    print "performing additional first/second stage integral transformation"

    PARDO ifrag, jfrag, mu, nu, lambda "Frag{ij}{aa}{a}"
    where (int)elst_dist[ifrag,jfrag] == ifrag
    where (int)SwAO_frag[(index)mu] == ifrag
    where (int)SwAO_frag[(index)nu] == ifrag
    where (int)SwAO_frag[(index)lambda] == jfrag

	      DO j 
	      where (int)SwOccA_frag[(index)j] == jfrag
	    allocate LVxxxq[mu,nu,lambda,j] 
	      ENDDO j 

	      DO sigma 
	      where (int)SwAO_frag[(index)sigma] == jfrag

		aoint[mu,nu,lambda,sigma]  = 0.0 
		execute compute_integral_batch aoint[mu,nu,lambda,sigma] #  1 1 2 2  

		DO j 
		where (int)SwOccA_frag[(index)j] == jfrag
			  txxxq[mu,nu,lambda,j]   = aoint[mu,nu,lambda,sigma]*ca[sigma,j] 
			  LVxxxq[mu,nu,lambda,j] += txxxq[mu,nu,lambda,j] 
		ENDDO j 
	    ENDDO sigma 

	      DO j 
	      where (int)SwOccA_frag[(index)j] == jfrag
		DO a1
		where (int)SwVirtA_frag[(index)a1] == jfrag
			  txxqq[mu,nu,a1,j]= LVxxxq[mu,nu,lambda,j]*ca[lambda,a1] 
			  PUT Vxxai[mu,nu,a1,j] += txxqq[mu,nu,a1,j] 
		ENDDO a1
	      ENDDO j 

	      DO j 
	      where (int)SwOccA_frag[(index)j] == jfrag
	    deallocate LVxxxq[mu,nu,lambda,j] 
	      ENDDO j 

    ENDPARDO ifrag, jfrag, mu, nu, lambda

    server_barrier
    print "performing additional third transformation"

    PARDO ifrag, jfrag, mu, nu, b, j "Frag{ij}{aa}{vo}"
    where (int)elst_dist[ifrag,jfrag] == ifrag
    where (int)SwAO_frag[(index)mu] == ifrag
    where (int)SwAO_frag[(index)nu] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag

	get Vxxai[mu,nu,b,j]

	      do a1
	      where (int)SwVirtA_frag[(index)a1] == ifrag
		    tpxqq[a1,nu,b,j]= Vxxai[mu,nu,b,j]*ca[mu,a1]
		    PUT Vaxaj[a1,nu,b,j] += tpxqq[a1,nu,b,j]
	      enddo a1

    ENDPARDO ifrag, jfrag, mu, nu, b, j
    server_barrier
    print "performing additional fourth transformation"



    PARDO ifrag, jfrag, nu, i, j, j1  "Frag{ij}{ao}{oo}"
    where (int)elst_dist[ifrag,jfrag] == ifrag
    where (int)SwAO_frag[(index)nu] == ifrag
    where (int)SwOccA_frag[(index)i] == ifrag
    where (int)SwOccA_frag[(index)j] == jfrag
    where (int)SwOccA_frag[(index)j1] == jfrag


	      GET          Vixjj[i,nu,j1,j] 

	      DO a1 
	      where (int)SwVirtA_frag[(index)a1] == ifrag
		    tppqq[i,a1,j1,j]= Vixjj[i,nu,j1,j]*ca[nu,a1] 
		    PUT Viaii[i,a1,j1,j] += tppqq[i,a1,j1,j] 
	      ENDDO a1 

    ENDPARDO ifrag, jfrag, nu, i, j, j1

    PARDO ifrag, jfrag, nu, a, b, j "Frag{ij}{av}{vo}"
    where (int)elst_dist[ifrag,jfrag] == ifrag
    where (int)SwVirtA_frag[(index)a] == ifrag
    where (int)SwAO_frag[(index)nu] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag

	get Vaxaj[a,nu,b,j]

	      do a1
	      where (int)SwVirtA_frag[(index)a1] == ifrag
		    tppqq[a,a1,b,j]= Vaxaj[a,nu,b,j]*ca[nu,a1]
		    PUT Vaaai[a,a1,b,j] += tppqq[a,a1,b,j]
	      enddo a1

    ENDPARDO ifrag, jfrag, nu, a, b, j

    server_barrier
ENDPROC ADDITIONAL_FRAG_TRAN




# line 3295
PROC FORM_JFRAG_HBAR
    server_barrier

#do ifrag
#where ifrag == 1

    PARDO ifrag, jfrag, i, i1, b, j "Frag{NR1ij}{oo}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwOccA_frag[(index)i] == ifrag
    where (int)SwOccA_frag[(index)i1] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag
	get Viaii[j,b,i,i1]
	get t1old[b,j]

	tpp[i,i1] = t1old[b,j]*Viaii[j,b,i,i1]
 	#tpp[i,i1] *= -1.0

	put HBAR_ii[i,i1] += tpp[i,i1]

    ENDPARDO ifrag, jfrag, i, i1, b, j

    PARDO ifrag, jfrag, i, i1, b, j "Frag{NR1ij}{oo}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwOccA_frag[(index)i] == ifrag
    where (int)SwOccA_frag[(index)i1] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag
	do a1
	    where (int)SwVirtA_frag[(index)a1] == ifrag

	    get Vaibj[a1,i1,b,j]
	    get T2old[a1,i,b,j]
	    tpp[i,i1] = T2old[a1,i,b,j]*Vaibj[a1,i1,b,j]
	    #tpp[i,i1] *= -1.0
	    put HBAR_ii[i,i1] += tpp[i,i1]

	enddo a1

    ENDPARDO ifrag, jfrag, i, i1, b, j

    PARDO ifrag, jfrag, a, a1, b, j "Frag{NR1ij}{vv}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwVirtA_frag[(index)a] == ifrag
    where (int)SwVirtA_frag[(index)a1] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag
	get Vaaai[a,a1,b,j]
	get t1old[b,j]
	tpp[a,a1] = Vaaai[a,a1,b,j]*t1old[b,j]
	    #tpp[a,a1] *= -1.0
	put HBAR_aa[a,a1] += tpp[a,a1]

    ENDPARDO ifrag, jfrag, a, a1, b, j

    PARDO ifrag, jfrag, a, a1, b, j "Frag{NR1ij}{vv}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwVirtA_frag[(index)a] == ifrag
    where (int)SwVirtA_frag[(index)a1] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag
	do i
	where (int)SwOccA_frag[(index)i] == ifrag

	    get Vaibj[a1,i,b,j]
	    get T2old[a,i,b,j]

	    tpp[a,a1] = T2old[a,i,b,j]*Vaibj[a1,i,b,j] 
	    #tpp[a,a1] *= -1.0
            
	    put HBAR_aa[a,a1] += tpp[a,a1]

	enddo i

    ENDPARDO ifrag, jfrag, a, a1, b, j

    PARDO ifrag, jfrag, a, i, b, j "Frag{NR1ij}{vo}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwVirtA_frag[(index)a] == ifrag
    where (int)SwOccA_frag[(index)i] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag
	get Vaibj[a,i,b,j]
	get t1old[b,j]

	tpp[i,a] = Vaibj[a,i,b,j]*t1old[b,j]
	put HBAR_ia[i,a] += tpp[i,a]

    ENDPARDO ifrag, jfrag, a, i, b, j

    PARDO ifrag, jfrag, a, i, b, j "Frag{NR1ij}{vo}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwVirtA_frag[(index)a] == ifrag
    where (int)SwOccA_frag[(index)i] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag

	get Vaibj[a,i,b,j]

	do a1
	where (int)SwVirtA_frag[(index)a1] == ifrag
	do i1
	where (int)SwOccA_frag[(index)i1] == ifrag
	    get T2old[a1,i1,b,j]

	    Tppqq[i1,a1,a,i] = T2old[a1,i1,b,j]*Vaibj[a,i,b,j]

	    put HBAR_AJIB[i1,a1,a,i] += Tppqq[i1,a1,a,i]

	enddo i1
	enddo a1

    ENDPARDO ifrag, jfrag, a, i, b, j

    PARDO ifrag, jfrag, a, i, b, j "Frag{NR1ij}{vo}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwVirtA_frag[(index)a] == ifrag
    where (int)SwOccA_frag[(index)i] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag
	get T2old[a,i,b,j]

	do i1
	where (int)SwOccA_frag[(index)i1] == ifrag
	do i2
	where (int)SwOccA_frag[(index)i2] == ifrag

	get Viaii[j,b,i1,i2]
	T1ppqq[i1,i2,b,j] = Viaii[j,b,i1,i2]

	Tppqq[i1,i2,a,i] = T1ppqq[i1,i2,b,j]*T2old[a,i,b,j]
#	Tppqq[i1,i2,a,i] += -1.0

	put HBAR_IAJK[i1,i2,a,i] += Tppqq[i1,i2,a,i]

	enddo i2
	enddo i1

    ENDPARDO ifrag, jfrag, a, i, b, j

    PARDO ifrag, jfrag, a, i, b, j "Frag{NR1ij}{vo}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwVirtA_frag[(index)a] == ifrag
    where (int)SwOccA_frag[(index)i] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag
	get T2old[a,i,b,j]

	do a1
	where (int)SwVirtA_frag[(index)a1] == ifrag
	do a2
	where (int)SwVirtA_frag[(index)a2] == ifrag

	get Vaaai[a1,a2,b,j]

	Tppqq[a1,a2,a,i] = Vaaai[a1,a2,b,j]*T2old[a,i,b,j]

	put HBAR_ABCI[a1,a2,a,i] += Tppqq[a1,a2,a,i]

	enddo a2
	enddo a1

    ENDPARDO ifrag, jfrag, a, i, b, j

###
#enddo ifrag

    server_barrier
ENDPROC FORM_JFRAG_HBAR


      PROC SET_FRAG_PARMS    
#     ------------------- 
#
#     Determine the number of fragments  
#     --------------------------------- 
      execute set_frag n_frags
     #print_scalar nfrags
      #allocate wAO_frag[*] 
      #allocate wOccA_frag[*] 
      #allocate wOccB_frag[*] 
      #allocate wVirtA_frag[*] 
      #allocate wVirtB_frag[*] 

      #allocate SwAO_frag[*] 
      #allocate SwOccA_frag[*] 
      #allocate SwOccB_frag[*] 
      #allocate SwVirtA_frag[*] 
      #allocate SwVirtB_frag[*] 

      #allocate elst_dist[*,*]
      #allocate rcut_dist[*,*]

      do kfrag
      do jfrag
	  where jfrag <= kfrag
	  icount = (scalar)kfrag
	  jcount = (scalar)jfrag

          execute return_pairs icount jcount elst_thresh pair_flag 
	  elst_dist[kfrag,jfrag] = 0.0
	  elst_dist[jfrag,kfrag] = 0.0

          if pair_flag > zero
	  elst_dist[kfrag,jfrag] = (scalar)kfrag
	  elst_dist[jfrag,kfrag] = (scalar)jfrag
	  endif

          execute return_pairs icount jcount r_thresh pair_flag 
	  rcut_dist[kfrag,jfrag] = 0.0
	  rcut_dist[jfrag,kfrag] = 0.0

          if pair_flag > zero
	  rcut_dist[kfrag,jfrag] = (scalar)kfrag
	  rcut_dist[jfrag,kfrag] = (scalar)jfrag
	  endif

      enddo jfrag
      enddo kfrag

      do jfrag
#
	  icount = (scalar)jfrag
          i_aostart = icount
          i_aoend   = 1.0
          execute frag_index_range i_aostart i_aoend
         i_vstart  = icount
         i_vend    = 6.0
         execute frag_index_range i_vstart i_vend
         a_vstart  = icount
         a_vend    = 7.0
         execute frag_index_range a_vstart a_vend

          m = 0.0
          do mu
              m += 1.0
              if m >= i_aostart
              if m <= i_aoend
              SwAO_frag[(index)mu] = (scalar)jfrag
              endif
              endif
	      if m > i_aoend
		  exit
	      endif
          enddo mu
         DO i
            m = 0.0
            do i1
               m += 1.0
               if i == i1
                  exit
               endif
            enddo i1
            if m >= i_vstart
            if m <= i_vend
               SwOccA_frag[(index)i] = (scalar)jfrag
            endif
            endif
	    if m > i_vend
		exit
            endif
         ENDDO i
         DO a
            m = 0.0
            do a1
               m += 1.0
               if a == a1
                  exit
               endif
            enddo a1
            if m >= a_vstart
            if m <= a_vend
               SwVirtA_frag[(index)a] = (scalar)jfrag
            endif
            endif
	    if m > a_vend
		exit
            endif
         ENDDO a
      enddo jfrag

      sip_barrier
      ENDPROC SET_FRAG_PARMS    
#
      PROC IGUESS   
#     ----------- 
#
#     Get memory requirements from integral calculation 
#     ------------------------------------------------- 
      print "Starting scratch memory calculation" 
      imax = 0.0  
      zmax = 0.0  
      execute compute_int_scratchmem_lowmem zmax imax 
      sip_barrier 
      print "Done computing scratch memory" 
#
      sip_barrier 
      allocate contiguous scr_1[1:max_aoseg,1:max_aoseg]
      allocate contiguous scr_2[1:max_aoseg,1:max_aoseg]
      allocate contiguous scr_3[1:max_aoseg,1:max_aoseg]
      allocate contiguous scr_4[1:max_aoseg,1:max_aoseg]
      allocate contiguous scr_5[1:max_aoseg,1:max_aoseg]
      sip_barrier 

    PARDO katom  
	icount = (scalar)katom

#	print icount # etemp 

	print "Starting computing fragment scf" 
	execute scf_atom_lowmem icount scr_1[1:max_aoseg,1:max_aoseg] scr_2[1:max_aoseg,1:max_aoseg] scr_3[1:max_aoseg,1:max_aoseg] scr_4[1:max_aoseg,1:max_aoseg]
	print "Done computing fragment scf" 
#
# Nowput the coefficients and fock matrices into the full distributed arrays 

	stype = 1.0 # HF coefficients  
	DO mu
	where (int)SwAO_frag[(index)mu] == katom
	    DO a
	    where (int)SwVirtA_frag[(index)a] == katom
		txp[mu,a]      = 0.0  
		execute place_scratch txp[mu,a]  scr_1[1:max_aoseg,1:max_aoseg] stype icount 
		PUT DCa[mu,a] += txp[mu,a]
	    ENDDO a
	    DO i
	    where (int)SwOccA_frag[(index)i] == katom
		txp[mu,i]      = 0.0  
		execute place_scratch txp[mu,i]  scr_1[1:max_aoseg,1:max_aoseg] stype icount  
		PUT DCa[mu,i] += txp[mu,i]
	    ENDDO i
	ENDDO mu
	print "Done placing coefficients"

	stype = 2.0 # Fock matrix  
	DO a   
	where (int)SwVirtA_frag[(index)a] == katom
	    DO a1
	    where (int)SwVirtA_frag[(index)a1] == katom
		tpp[a,a1]          = 0.0  
		execute place_scratch tpp[a,a1]  scr_3[1:max_aoseg,1:max_aoseg] stype icount 
		PUT Dfock_a[a,a1] += tpp[a,a1] 
	    ENDDO a1
	    DO i1
	    where (int)SwOccA_frag[(index)i1] == katom
		tpp[a,i1]          = 0.0  
		execute place_scratch tpp[a,i1]  scr_3[1:max_aoseg,1:max_aoseg] stype icount 
		PUT Dfock_a[a,i1] += tpp[a,i1] 
	    ENDDO i1
	ENDDO a   

	DO i   
	where (int)SwOccA_frag[(index)i] == katom
	    DO i1
	    where (int)SwOccA_frag[(index)i1] == katom
		tpp[i,i1]          = 0.0  
		execute place_scratch tpp[i,i1]  scr_3[1:max_aoseg,1:max_aoseg] stype icount 
		PUT Dfock_a[i,i1] += tpp[i,i1]
	    ENDDO i1
	    DO a1
	    where (int)SwVirtA_frag[(index)a1] == katom
		tpp[i,a1]          = 0.0  
		execute place_scratch tpp[i,a1]  scr_3[1:max_aoseg,1:max_aoseg] stype icount 
		PUT Dfock_a[i,a1] += tpp[i,a1]
	    ENDDO a1
	ENDDO i

	print "Done placing fock_matrix"

    ENDPARDO katom   
      sip_barrier 
      deallocate contiguous scr_1[1:max_aoseg,1:max_aoseg]
      deallocate contiguous scr_2[1:max_aoseg,1:max_aoseg]
      deallocate contiguous scr_3[1:max_aoseg,1:max_aoseg]
      deallocate contiguous scr_4[1:max_aoseg,1:max_aoseg]
      deallocate contiguous scr_5[1:max_aoseg,1:max_aoseg]
      sip_barrier 

      print "Placing HF coefficients on nodes"
      DO p 
         Sx3[p] = 1.0 
      ENDDO p  

      DO p 
         t3[p] = 0.0 
      DO p1 
         if p == p1 
            GET Dfock_a[p,p1] 
#        execute print_block Dfock_a(p,p1)  
            t3_1[p] = Dfock_a[p,p1]*Sx3[p1] 
            t3[p] += t3_1[p] 
         endif 
      ENDDO p1 
         fock_a[p] = t3[p] 
      ENDDO p 

      DO p 
         t3[p] = fock_a[p] 
      ENDDO p 

      DO ifrag

         DO mu
         where (int)SwAO_frag[(index)mu] == ifrag
            DO a 
            where (int)SwVirtA_frag[(index)a] == ifrag
                  GET        Dca[mu,a] 
                  ca[mu,a] = Dca[mu,a] 
            ENDDO a 
            DO i 
            where (int)SwOccA_frag[(index)i] == ifrag
                  GET        Dca[mu,i] 
                  ca[mu,i] = Dca[mu,i] 
            ENDDO i 
         ENDDO mu  

      ENDDO ifrag

      sip_barrier
#
      ENDPROC IGUESS   

#
# ---------------------------------------------------------------------------- 
#
#
# -----------------------------------------------------------------------------
# 
#     START OF MAIN PROGRAM  
#
# -----------------------------------------------------------------------------

print " "
print "-- Second-Order Molecular Cluster Perturbation Theory"
print "-- J. Comp. Chem. 2001, 22, 1574-1589"
print "-- Written by Victor Lotrich and Jason N. Byrd"
print " "

# 
#     Set fragment parameters   
#     ----------------------- 
#
# Restore the persistent arrays. 
     #create DCa 
     #create DFock_a
     #execute enable_all_rank_print
      sip_barrier
#      restore_persistent Dca "ca" 
#      set_persistent Dca "ca" 
#      restore_persistent DFock_a "fock_a"
#      set_persistent DFock_a "fock_a"
      rmaster = 0
      allocate sp[*] 
      zero = 0.0 
      one  = 1.0 
      print r_thresh 
      print elst_thresh 
      mone = -1.0 
      print cc_conv 
      sip_barrier
#
      CALL SET_FRAG_PARMS   
      sip_barrier 
      print "Done setting fragment parameters" 
      print "Performing monomer SCF"
      call IGUESS
      sip_barrier 


#     Compute the NN repusion between fragments  
#     ----------------------------------------- 
      nn_rep = 0.0 
      execute compute_nn_repulsion nn_rep
      print nn_rep 
#
#     Perform 2-el integral transformation and calculate second order energies   
#     ------------------------------------------------------------------------ 
#
      sip_barrier 
      CALL FRAG_TRAN 
      sip_barrier 
      print "Done two-electron integral transformation" 
#
#     Form the electrostatic potential(complete) of all fragments  
#     ----------------------------------------------------------- 
#
      CALL REFORM_WC
      CALL FORM_ELSTPOT 
      sip_barrier 
      print "Done forming electrostatic potential" 
# Now we will compute the Hartree-Fock exchange energy 
# Compute the exchange and polarization energies 
      CALL OVERLAP_TRANS 
      print "Done transforming overlap" 
#
#     Form the density based exchange energy  
#     -------------------------------------- 
#
      CALL EXCHANGE_ALT
      print "Done forming density based exchange energy" 
#
#     Compute the CCPT(2) dimer_doubles amplitudes for Fragment 1.  
#     ------------------------------------------------------ 
#
      CALL FORM_T10
      sip_barrier 
      CALL FORM_T1
      sip_barrier 
      print "Completely Done singles formation" 
      print e1x_at 
      print e10pol_at 
      print eps1_pol  
      print singles  
      sip_barrier 
#
#     Compute the CCPT(2) dimer_doubles amplitudes for Fragment 1.  
#     ------------------------------------------------------ 
      CALL FORM_T2_0GUESS 
      sip_barrier 
      print "Done forming T2_0guess" 
#
# Start macro-iterations 
      DO jiter 
         sip_barrier 
	 print "Macro iteration"
	 print jiter

         PARDO ifrag 
           GET                   e20c[ifrag] 
           PUT e2_macro[ifrag] = e20c[ifrag] 
         ENDPARDO ifrag  

         sip_barrier 
         CALL FORM_T2_GUESS 
         sip_barrier 
	 print "Entering FORM_T2_FRAGMENT_ITERS"
         CALL FORM_T2_FRAGMENT_ITERS 
         sip_barrier 
	 print "Entering FORM_T2_DIMER_ITERS"
         CALL FORM_T2_DIMER_ITERS 
         print "Done forming T2 Dimer calculation" 
         esum = 0.0 
         sip_barrier 
# Print out energies after each macroiteration  
         execute get_my_rank rank
         if rank == 0.0
         print "MCPT(2) monomer macro-iteration energies"
	 fragment_doubles = 0.0
         DO ifrag
            allocate contiguous macro_e20[ifrag:ifrag]
            GET                 e20c[ifrag] 
            macro_e20[ifrag:ifrag]  = e20c[ifrag] 
            print macro_e20[ifrag:ifrag] 
            etemp = e20c[ifrag] 
            fragment_doubles += etemp 
            deallocate contiguous macro_e20[ifrag:ifrag]
         ENDDO ifrag   

         print "MCPT(2) dimer macro-iteration energies"
	 do ifrag
	 do jfrag
	     WHERE jfrag > ifrag 
	     where (int)rcut_dist[ifrag,jfrag] == ifrag
	     icount = (scalar)ifrag
	     jcount = (scalar)jfrag

		 allocate contiguous macro_d20[ifrag:ifrag,jfrag:jfrag]
		 get d20c[ifrag,jfrag]
		 macro_d20[ifrag:ifrag,jfrag:jfrag] = d20c[ifrag,jfrag]
		 print macro_d20[ifrag:ifrag,jfrag:jfrag]
		 deallocate contiguous macro_d20[ifrag:ifrag,jfrag:jfrag]
	 enddo jfrag
	 enddo ifrag
         endif
         sip_barrier 

# Determine if full macro convergence is met 
         do_iter = 0.0 
         DO ifrag 
           GET          e20c[ifrag] 
           GET          e2_macro[ifrag] 
           tp[ifrag]  = e20c[ifrag]  
           tp[ifrag] -= e2_macro[ifrag]  
           execute return_sval tp[ifrag] etemp  
           if etemp < zero 
              etemp *= -1.0 
           endif 
           IF etemp > cc_conv 
              do_iter = 2.0 
           ENDIF 
         ENDDO ifrag 
         print etemp 
         sip_barrier 
         if do_iter < 1.0 
            exit 
         endif 
#
      ENDDO jiter 
      sip_barrier
#
      CALL FORM_T2_MONOMER  
      sip_barrier
#
      eint_tot  = 0.0 
      eint_tot += e1x_at  
      eint_tot += e10pol_at  
      eint_tot += eps1_pol   
      eint_tot += singles  
      eint_tot += dimer_doubles  
      eint_tot += fragment_doubles  
      eint_tot += mono_lccd   

      print e1x_at 
      print e10pol_at 
      print eps1_pol  
      print singles  
      print dimer_doubles  
      print fragment_doubles  
      print mono_lccd  

      print eint_tot 

##
## Form the new energy
##
#
#print "starting additional transformations"
#call ADDITIONAL_FRAG_TRAN
#print "Finished additional transformations"
#print "Forming HBAR elements"
#call FORM_JFRAG_HBAR
#print "done forming HBAR elements"
#
#server_barrier
#do ifrag
#where ifrag == 1
#
#    pardo fa, fi
#        get t1old[fa,fi]
#	get wC[fa,fi]
#
#	tai[fa,fi] = t1old[fa,fi]
#	t1ai[fa,fi] = wC[fa,fi]
#
#	put FT1old[fa,fi] = tai[fa,fi]
#	put FwC[fa,fi] = t1ai[fa,fi]
#
#    endpardo fa, fi
#
#    pardo fa, fi, fa1, fi1
#
#        get T2old[fa,fi,fa1,fi1]
#
#	t1ppqq[fa,fi,fa1,fi1] = T2old[fa,fi,fa1,fi1]
#
#	put FT2old[fa,fi,fa1,fi1] = t1ppqq[fa,fi,fa1,fi1]
#	
#    endpardo fa, fi, fa1, fi1
#
#    pardo fmu, fi
#    print  ca[fmu,fi]
#       put Fca_o[fmu,fi] = ca[fmu,fi]
#    endpardo fmu, fi
#
#    pardo fmu, fa
#    print ca[fmu,fa]
#       put Fca_v[fmu,fa] = ca[fmu,fa]
#    endpardo fmu, fa
#
#    pardo fi, fi1
#        get Dfock_a[fi,fi1]
##	GET         wC[fi,fi1]
#	Tpp[fi,fi1] = Dfock_a[fi,fi1]
##	Tpp[fi,fi1] += wC[fi,fi1]
#        put FFock_oo[fi,fi1] = Tpp[fi,fi1]
#    endpardo fi, fi1
#
#    pardo fa, fa1
#        get Dfock_a[fa,fa1]
##	GET         wC[fa,fa1]
#	Tpp[fa,fa1] = Dfock_a[fa,fa1]
##	Tpp[fa,fa1] += wC[fa,fa1]
#        put FFock_vv[fa,fa1] = Tpp[fa,fa1]
#    endpardo fa, fa1
#
#esum1 = 0.0
#esum2 = 0.0
#    server_barrier
#
#      PARDO fa, fi, fa1, fi1 
#
#               GET                T2old[fa,fi,fa1,fi1]
#               GET                Vaibj[fa,fi,fa1,fi1]
#               GET                Vaibj[fa,fi1,fa1,fi]
#
#               t1ppqq[fa,fi,fa1,fi1] = Vaibj[fa,fi,fa1,fi1]
#               t3ppqq[fa,fi1,fa1,fi] = Vaibj[fa,fi1,fa1,fi]
#               t2ppqq[fa,fi,fa1,fi1] = t3ppqq[fa,fi1,fa1,fi]
#               t1ppqq[fa,fi,fa1,fi1]*= 2.0
#               t1ppqq[fa,fi,fa1,fi1]-= t2ppqq[fa,fi,fa1,fi1]
#
#               etemp = T2old[fa,fi,fa1,fi1]*t1ppqq[fa,fi,fa1,fi1]
#
#               esum2 += etemp
#
#      ENDPARDO fa, fi, fa1, fi1
#
#      PARDO fa, fi
#
#               GET        FT1old[fa,fi] 
#               GET        FwC[fa,fi] 
#               tai[fa,fi] = FT1old[fa,fi] 
#
#               etemp = tai[fa,fi]*FwC[fa,fi]  
#               etemp*= 2.0  
#
#	       esum1 += etemp
#
#      ENDPARDO fa, fi
#
#server_barrier
#e1new = 0.0
#e2new = 0.0
#collective e1new += esum1
#collective e2new += esum2
#print ifrag
#print e1new
#print e2new
#
#enddo ifrag
#
#server_barrier
#set_persistent FwC "MOI_wC"
#set_persistent FT1old "MOI_T1"
#set_persistent FT2old "MOI_T2ab"
#set_persistent FFock_oo "MOI_Fock_oo"
#set_persistent FFock_vv "MOI_Fock_vv"
#set_persistent Fca_o "MOI_Ca_o"
#set_persistent Fca_v "MOI_Ca_v"
#set_persistent HBAR_ii "MOI_HBAR_ii"
#set_persistent HBAR_aa "MOI_HBAR_aa"
#set_persistent HBAR_ia "MOI_HBAR_ia"
#set_persistent HBAR_AJIB "MOI_HBAR_ajib"
#set_persistent HBAR_IAJK "MOI_HBAR_iajk"
#set_persistent HBAR_ABCI "MOI_HBAR_abci"

         sip_barrier 
                           ENDSIAL FRAG_2ORDER_CORR 
##
################################################################################
