
      import "rccsd_rhf_defs.sialx" 
      SIAL CCSD_RHF_SV1
#
#-------------------------------------------------------------------------------
#
# Declare indeces 
# --------------- 
#
      index kiter    = 1: cc_iter   
      index   kbeg   = 1: scf_beg # Change to cc_beg 
      index   korder = 1: scf_hist # Change to cc_hist 
      index   kone   = 1: 1
      index   kdiis  = 1: 30 
      index   k1diis = 1: 30 
      index   jdiis  = 1: 30 
      index   j1diis = 1: 30 
      index      D1  = 1: 30 
      index      D2  = 1: 30 
#
      aoindex mu     = 1: norb 
      aoindex nu     = 1: norb
      aoindex lambda = 1: norb
      aoindex sigma  = 1: norb
#
      moaindex i = baocc: eaocc
      moaindex i1= baocc: eaocc
      moaindex i2= baocc: eaocc
      moaindex i3= baocc: eaocc
#
      moaindex a = bavirt: eavirt
      moaindex a1= bavirt: eavirt
      moaindex a2= bavirt: eavirt
      moaindex a3= bavirt: eavirt
#
      moaindex j = baocc: eaocc
      moaindex j1= baocc: eaocc
      moaindex j2= baocc: eaocc
      moaindex j3= baocc: eaocc
#
      moaindex b = bavirt: eavirt
      moaindex b1= bavirt: eavirt
      moaindex b2= bavirt: eavirt
      moaindex b3= bavirt: eavirt
#
      moaindex p = baocc: eavirt
      moaindex p1= baocc: eavirt
      moaindex p2= baocc: eavirt
      moaindex p3= baocc: eavirt
#
      moaindex q = baocc: eavirt
      moaindex q1= baocc: eavirt
      moaindex q2= baocc: eavirt
      moaindex q3= baocc: eavirt
# 
# Declare static arrays 
# --------------------- 
#
      static ca[mu,p] 
      static fock_a[p,p1] 
# 
# Declare distributed arrays 
# --------------------- 
#
      distributed l1a_old[i,a]
      distributed t1a_old[a,i]
      distributed t1a_new[a,i]
      distributed Fae_a[a,a1]
      distributed Fme_a[i,a]
      distributed Fmi_a[i,i1]
      distributed t1a_ax[a,mu]
      distributed Wminj_ab[i2,i,j3,j1]
# 
# Declare served arrays 
# --------------------- 
#
      served VSpipi[p1,i,p,i1]
      served Viaai[i,a1,a,i1]
      served Vaaii[a,a1,i,i1]
      served Vaaai[a2,a,a1,i]
      served Vpiqj[p,i,q,j]
      served T2new_ab[a,i,b,j]
      served T2old_aa[a,i,a1,i1]
      served T2old_ab[a,i,b,j]
      served L2old_aa[i,a,i1,a1]
      served L2old_ab[i,a,j,b]
      served Tau_ab[a,i,b,j]
      served Taup_aa[a,i,a1,i1]
      served Taup_ab[a,i,b,j]
      served Wiibb[i1,i,b,b1]
      served TAO_ab[lambda,i,sigma,j]
      served T2AO_ab[lambda,i,sigma,j]
      served TDaixj[a,i,nu,j]
      served e5aibj[a,i,b,j]
      served e6aibj[a,i,b,j]
      served e5aiai[a,i,b,j]
# 
# Declare local arrays 
# --------------------- 
#
      local LTAO_ab[lambda,i,sigma,i1]
      local LDaixj[a,i,nu,j]
      local L3aiai[a2,i1,a,i2]
      local L4aiai[a1,i,a2,i1]
      local L1aibj[a1,i,b,j]
      local L3aibj[a,i1,b,j]
      local Liibj[i1,i,b,j]
      local L1iibj[i,i1,b,j]
      local Laabj[a,a1,b,j]
      local L1aiii[a1,i2,i,i1]
      local LWaibj[a,i,b,j]
      local LWiaai[i1,a,a2,i]
      local LWjbai[j,b,a,i]
# 
# Declare scalar arrays 
# --------------------- 
#
      scalar ncount1
      scalar ncount2
      scalar jcount
      scalar kcount
      scalar niter
      scalar zero
      scalar one
      scalar two
      scalar five
      scalar six
      scalar seven
      scalar energy
      scalar lccsd_correlation
      scalar lccsd_energy
      scalar mp2_correlation
      scalar etemp
      scalar esum
      scalar esuma
      scalar esumb
      scalar esumab
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar enew
      scalar eold
      scalar ecrit
      scalar ediff
# 
# Declare temp arrays 
# --------------------- 
#
      temp Tiaai[i,a1,a,i1]
      temp Taaai[a2,a,a1,i]
      temp Txixj[mu,i,nu,j]
      temp T1xixj[mu,i,nu,j]
      temp Taiai[p,i,p1,i1]
      temp T1aiai[p,i,p1,i1]
      temp T2aiai[p,i,p1,i1]
      temp T3aiai[p,i,p1,i1]
      temp T1bjbj[q,j,q1,j1]
      temp T2bjbj[q,j,q1,j1]
      temp Tiajb[i,a,j,b]
      temp Tiaia[i,a,i1,a1]
      temp Taibj[p,i,q,j]
      temp T1aibj[p,i,q,j]
      temp T2aibj[p,i,q,j]
      temp T3aibj[p,i,q,j]
      temp T4aibj[p,i,q,j]
      temp Tpppp[p3,p2,p1,p]
      temp tmp1_aiai[a,i,a1,i1]
      temp tmp2_aiai[a,i,a1,i1]
      temp tmp1_aibj[a,i,b,j]
      temp tmp2_aibj[a,i,b,j]
      temp Tai[a,i]
      temp T1ai[a,i]
      temp T2ai[a,i]
      temp T3ai[a,i]
      temp Tbj[b,j]
      temp Taa[a,a1]
      temp Tia[i,a]
      temp Tme_a[i,a]
      temp Tii[i,i1]
      temp  Tiijj[i,i1,j2,j3]
      temp T1iijj[i,i1,j2,j3]
      temp  tmp_aa[a,a1]
      temp tmp1_aa[a,a1]
      temp  tmp_ii[i,i1]
      temp tmp1_ii[i,i1]
      temp T1aaai[a,a1,a2,i]
      temp R1aibj[a,i,b,j]
      temp  Tiiqq[i,i1,q,q1]
      temp T1iiqq[i,i1,q,q1]
      temp  Tjjai[j,j1,a,i]
      temp T1jjai[j,j1,a,i]
      temp  Tiibj[i,i1,b,j]
      temp T1iibj[i,i1,b,j]
      temp  Tjbai[j,b,a,i]
      temp tpx[p,mu]
      temp t1px[p,mu]
      temp AOINT[mu,nu,lambda,sigma]
      temp Yab[lambda,i,mu,j]
      temp Y1ab[lambda,i,mu,j]
      temp TYaiai[a,i,a1,i1]
      temp Taixj[a,i,nu,j]
#
# Arrays used in the DIIS 
# -----------------------
#
      int Iorder  
      int Idiis_order
      static BB[d1,d2] 
      served Daibj[a,i,b,j,kdiis] 
      served Eaibj[a,i,b,j,jdiis] 
      served D0aibj[a,i,b,j] 
      served D0ai[a,i] 
      distributed DIST_BB[d1,d2] 

      distributed Dai[a,i,kdiis] 
      distributed Eai[a,i,jdiis] 

      scalar n1 
      scalar n2 
      scalar worder  
      scalar diis_start
      scalar diis_order
      scalar temp_order

      temp tbb[d1,d2] 

#
#    ------------------------------------------------------------------------ 
#
     PROC READ_2EL   
# 
#    ------------------------------------------------------------------------ 
#
      restore_persistent ca    "ca" 
      set_persistent     ca    "ca" 
      restore_persistent Fock_a "fock_a" 
      set_persistent     Fock_a "fock_a"
      restore_persistent VSpipi "VSpipi"
      restore_persistent Vaaii  "Vaaii"
      restore_persistent Viaai  "Viaai"
      restore_persistent Vaaai  "Vaaai"
      restore_persistent Vpiqj  "Vpiqj"
     #restore_persistent energy  "energy"

      server_barrier
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC READ_2EL   
# 
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
     PROC IGUESS_UHF  
# 
#    ------------------------------------------------------------------------ 
#
     PARDO a, b, i, j 
#
           REQUEST                     Vpiqj[a,i,b,j]   
           REQUEST                     Vpiqj[b,j,a,i]   
           Taibj[a,i,b,j]            = Vpiqj[b,j,a,i]
           Taibj[a,i,b,j]           += Vpiqj[a,i,b,j]
           execute energy_denominator_rhf  Taibj[a,i,b,j] fock_a  
           Taibj[a,i,b,j]           *= 0.5  
           PREPARE T2old_ab[a,i,b,j] = Taibj[a,i,b,j]  
           PREPARE D0aibj[a,i,b,j]  = Taibj[a,i,b,j]  
#
     ENDPARDO a, b, i, j 
#
     PARDO a, i

#           Tai[a,i] = 0.0
#           T1ai[a,i] = 0.0
#           PUT t1a_old[a,i] = Tai[a,i]
#           PREPARE D0ai[a,i] = T1ai[a,i]
           PUT t1a_old[a,i] = 0.0
           PREPARE D0ai[a,i] = 0.0
#
     ENDPARDO a, i
#
#    ------------------------------------------------------------------------ 
# 
     ENDPROC IGUESS_UHF 
# 
#    ------------------------------------------------------------------------ 
#
# In the procedure T1ANEW all contributions to the singles amplitude t1a 
# are computed. 
#
      PROC T1ANEW 
#     -----------
#
      PARDO a, i
#
            tai[a,i] = 0.0
#
            DO b
            DO j
#
               REQUEST Viaai[i,a,b,j] 
               GET t1a_old[b,j]
#
               t2ai[a,i]  = Viaai[i,a,b,j]*t1a_old[b,j]
               tai[a,i] += t2ai[a,i]
#
            ENDDO j
            ENDDO b
#
            DO a1
#
               DO i1
#
                  REQUEST Vaaii[a,a1,i1,i] 
                  REQUEST Viaai[i1,a1,a,i] 
                  GET t1a_old[a1,i1]
#
                  Tpppp[i1,a1,a,i]  = Vaaii[a,a1,i1,i]
                  Tpppp[i1,a1,a,i] -= Viaai[i1,a1,a,i]
#
                  t2ai[a,i] = Tpppp[i1,a1,a,i]*t1a_old[a1,i1]
                  tai[a,i] -= t2ai[a,i]
#
               ENDDO i1
#
            ENDDO a1
#
            PUT t1a_new[a,i] += tai[a,i]
#
      ENDPARDO a, i
#
      PARDO a1, a2, i1
#
            allocate L4aiai[a1,*,a2,i1]
#
            DO i
#
               REQUEST T2old_aa[a1,i,a2,i1] 
               L4aiai[a1,i,a2,i1] = T2old_aa[a1,i,a2,i1]
#
            ENDDO i
#
            DO a
#
               REQUEST Vaaai[a2,a,a1,i1]   
               REQUEST Vaaai[a1,a,a2,i1]   
               taaai[a2,a,a1,i1] = Vaaai[a2,a,a1,i1] 
               t1aaai[a2,a,a1,i1]= Vaaai[a1,a,a2,i1] 
               taaai[a2,a,a1,i1]-= t1aaai[a2,a,a1,i1] 
#
               DO i
#
                  tai[a,i]  = taaai[a2,a,a1,i1]*L4aiai[a1,i,a2,i1]
                  tai[a,i] *= -0.5
#
                  PUT t1a_new[a,i] += tai[a,i]
#
               ENDDO i
#
            ENDDO a
#
            deallocate L4aiai[a1,*,a2,i1]
#
      ENDPARDO a1, a2, i1
#
      PARDO a1, i1, i2
#
            allocate L1aiii[a1,i2,*,i1]
#
            DO i
#
               REQUEST VSpipi[a1,i2,i,i1] 
               L1aiii[a1,i2,i,i1] = VSpipi[a1,i2,i,i1]
#
            ENDDO i
#
            DO a
#
               REQUEST T2old_aa[a,i1,a1,i2] 
#
               DO i
#
                  tai[a,i]  = L1aiii[a1,i2,i,i1]*T2old_aa[a,i1,a1,i2]
                  tai[a,i] *= -0.5
#
                  PUT t1a_new[a,i] += tai[a,i]
#
               ENDDO i
#
            ENDDO a
#
            deallocate L1aiii[a1,i2,*,i1]
#
      ENDPARDO a1, i1, i2
#
      PARDO a1, b, j
#
            allocate L1aibj[a1,*,b,j]
#
            DO i
#
               REQUEST T2old_ab[a1,i,b,j] 
               L1aibj[a1,i,b,j] = T2old_ab[a1,i,b,j]
#
            ENDDO i
#
            DO a
#
               REQUEST Vaaai[a1,a,b,j] 
#
               DO i
#
                  tai[a,i]  = Vaaai[a1,a,b,j]*L1aibj[a1,i,b,j]
#
                  PUT t1a_new[a,i] += tai[a,i]
#
               ENDDO i
#
            ENDDO a
#
            deallocate L1aibj[a1,*,b,j]
#
      ENDPARDO a1, b, j
#
      PARDO b, j, i1
#
            allocate L1iibj[*,i1,b,j]
#
            DO i
#
               REQUEST Vpiqj[i,i1,b,j] 
               L1iibj[i,i1,b,j] = Vpiqj[i,i1,b,j]
#
            ENDDO i
#
            DO a
#
               REQUEST T2old_ab[a,i1,b,j] 
#
               DO i
#
                  tai[a,i]  = L1iibj[i,i1,b,j]*T2old_ab[a,i1,b,j]
                  tai[a,i] *= -1.0
#
                  PUT t1a_new[a,i] += tai[a,i]
#
               ENDDO i
#
            ENDDO a
#
            deallocate L1iibj[*,i1,b,j]
#
      ENDPARDO b, j, i1
#
      ENDPROC T1ANEW 
#     --------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC WminjAB
#     ------------
#
#
      PARDO i1, j1, a, b
#
            REQUEST T2old_ab[a,i1,b,j1] 
#
            DO i
            DO j
#
               request                      Vpiqj[i1,i,j1,j]
               T1aibj[a,i,b,j]            = T2old_ab[a,i1,b,j1]*Vpiqj[i1,i,j1,j]
               PREPARE T2new_ab[a,i,b,j] += T1aibj[a,i,b,j]
#
            ENDDO j
            ENDDO i
#
      ENDPARDO i1, j1, a, b
      sip_barrier
      delete Wminj_ab
#
      ENDPROC WminjAB
#     --------------- 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMINJ 
#
           CALL WminjAB 
#
      ENDPROC WMINJ 
# 
# ----------------------------------------------------------------------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In PROCEDURE T2NEWAB the new amplitudes T2new_ab are computed. Contributions 
# involving large two-particle intermediates are computed in the corresponding  
# procedures where these intermediates(temp) are computed. Thus the 
# intermediate Wminj is stored and its contribution computed here.  
#
# Contributions coming from P_(ij)P_(ab)t^e_i t^a_m <mb||ej> are computed 
# elsewhere. 
#
      PROC T2NEWAB    
#     ------------
#
      PARDO i, b, j 
#
            allocate Liibj[*,i,b,j] 
#
            DO i1 
#
               REQUEST           Vpiqj[i1,i,b,j]  
               Liibj[i1,i,b,j] = Vpiqj[i1,i,b,j] 
#
            ENDDO i1 
#
            DO a 
#
               REQUEST          Vpiqj[a,i,b,j]  
               Taibj[a,i,b,j] = Vpiqj[a,i,b,j]   
               Taibj[a,i,b,j]*= 0.5  
#
               DO i1 
#
                  GET t1a_old[a,i1] 
#
                  T1aibj[a,i,b,j] = Liibj[i1,i,b,j]*t1a_old[a,i1] 
                  Taibj[a,i,b,j] -= T1aibj[a,i,b,j] 
#
               ENDDO i1 
#
               T1aibj[b,j,a,i]            = Taibj[a,i,b,j]  
               PREPARE T2NEW_AB[a,i,b,j] += Taibj[a,i,b,j]  
               PREPARE T2NEW_AB[b,j,a,i] += T1aibj[b,j,a,i]  
#
            ENDDO a 
#
            deallocate Liibj[*,i,b,j] 
#
      ENDPARDO i, b, j 
#
      PARDO a, b, j 
#
            allocate Laabj[a,*,b,j] 
#
            DO a1 
#
               REQUEST Vaaai[a,a1,b,j]   
               Laabj[a,a1,b,j] = Vaaai[a,a1,b,j]  
#
            ENDDO a1 
#
            DO i 
#
               Taibj[a,i,b,j] = 0.0  
#
               DO a1 
#
                  GET t1a_old[a1,i] 
#
                  T1aibj[a,i,b,j] = Laabj[a,a1,b,j]*t1a_old[a1,i]  
                  Taibj[a,i,b,j] += T1aibj[a,i,b,j] 
#
               ENDDO a1 
#
               T1aibj[b,j,a,i]            = Taibj[a,i,b,j]  
               PREPARE T2NEW_AB[a,i,b,j] += Taibj[a,i,b,j]  
               PREPARE T2NEW_AB[b,j,a,i] += T1aibj[b,j,a,i]  
#
            ENDDO i 
#
            deallocate Laabj[a,*,b,j] 
#
      ENDPARDO a, b, j 
#
      ENDPROC T2NEWAB    
#
#    ------------------------------------------------------------------------ 
#

     PROC AOLADDER  
#
#    ------------------------------------------------------------------------ 
#
#    First create and zero-out intermediate arrays
#    ---------------------------------------------
#
     PARDO mu, nu, i, j
           Txixj[mu,i,nu,j] = 0.0
           T1xixj[mu,i,nu,j] = 0.0
           PREPARE TAO_ab[mu,i,nu,j]  = Txixj[mu,i,nu,j] 
           PREPARE T2AO_ab[mu,i,nu,j] = T1xixj[mu,i,nu,j]
     ENDPARDO mu, nu, i, j
#
     server_barrier 
#
#    Form Half back transformed cluster arrays  
#    -----------------------------------------
#
#    AB spin combination
#     -------------------
#
     PARDO b, a, j, i
#
           REQUEST T2old_ab[a,i,b,j] 
#
           DO mu
#
              Taixj[a,i,mu,j] = T2old_ab[a,i,b,j]*ca[mu,b]
#
              DO nu
#
                 Txixj[nu,i,mu,j]           = Taixj[a,i,mu,j]*ca[nu,a]
                 PREPARE TAO_ab[nu,i,mu,j] += Txixj[nu,i,mu,j]
#
              ENDDO nu
#
           ENDDO mu
#
      ENDPARDO b, a, j, i
#
     server_barrier   
#
#    Contract AOINT with half back transformed Amplitudes 
#    ----------------------------------------------------    
#
     PARDO mu, nu, lambda, sigma
        WHERE mu < nu 
#
           execute compute_integral_batch aoint[lambda,mu,sigma,nu] 
#
           DO i
           DO j
#
              REQUEST                       TAO_ab[lambda,i,sigma,j] 
              Yab[mu,i,nu,j]              = aoint[lambda,mu,sigma,nu]*TAO_ab[lambda,i,sigma,j]
              Y1ab[nu,j,mu,i]             = Yab[mu,i,nu,j]
#
              PREPARE T2AO_ab[mu,i,nu,j] += Yab[mu,i,nu,j]
              PREPARE T2AO_ab[nu,j,mu,i] += Y1ab[nu,j,mu,i]
#
           ENDDO j
           ENDDO i
#
     ENDPARDO mu, nu, lambda, sigma
#
     PARDO mu, nu, lambda, sigma
        WHERE mu == nu 
#
           execute compute_integral_batch aoint[lambda,mu,sigma,nu] 
#
           DO i
           DO j
#
              REQUEST                       TAO_ab[lambda,i,sigma,j] 
              Yab[mu,i,nu,j]              = aoint[lambda,mu,sigma,nu]*TAO_ab[lambda,i,sigma,j]
              PREPARE T2AO_ab[mu,i,nu,j] += Yab[mu,i,nu,j]
#
           ENDDO j
           ENDDO i
#
     ENDPARDO mu, nu, lambda, sigma
#
     server_barrier  
#
#    Perform final transformation
#    ----------------------------
#
        PARDO nu, i, j
#
              allocate LDaixj[*,i,nu,j]
#
              DO mu
#
                 REQUEST T2AO_ab[mu,i,nu,j] 
#
                 DO a
                    Taixj[a,i,nu,j]   = T2AO_ab[mu,i,nu,j]*ca[mu,a]
                    LDaixj[a,i,nu,j] += Taixj[a,i,nu,j]
                 ENDDO a
#
              ENDDO mu
#
              DO a
                 PREPARE TDaixj[a,i,nu,j] = LDaixj[a,i,nu,j]
              ENDDO a
#
              deallocate LDaixj[*,i,nu,j]
#
        ENDPARDO nu, i, j
        server_barrier
#
        PARDO a, i, j, nu
#
              REQUEST TDaixj[a,i,nu,j] 
#
              DO b
#
#
                 Taibj[a,i,b,j]             = TDaixj[a,i,nu,j]*ca[nu,b]
#
                 PREPARE T2new_ab[a,i,b,j] += Taibj[a,i,b,j]
#
              ENDDO b
#
        ENDPARDO a, i, j, nu
#
        sip_barrier
#
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC AOLADDER  
#
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
# --------------------------------------------------------------------------- 
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
# In the procedures WMEBJAA, WMEBJBB, WMEBJAB, and WMEBJBA these  
# intermediates are formed as temporary arrarys. The contribution to the 
# outout arrays is computed directly from these temporary arrays so 
# that the array is never stored.   
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJAA 
#     ------------
#
      PARDO a,i,b,j
#
            Taibj[a,i,b,j] = 0.0
#
            DO i1
            DO a1
#
               REQUEST              Viaai[i,a,a1,i1] 
               REQUEST              Vaaii[a1,a,i,i1] 
               REQUEST              T2old_ab[a1,i1,b,j] 

               TYaiai[a,i,a1,i1]   = 0.0
#
               Taiai[a,i,a1,i1]    = Vaaii[a1,a,i,i1]
               TYaiai[a,i,a1,i1]  -= Taiai[a,i,a1,i1]
               Taiai[a,i,a1,i1]    = Viaai[i,a,a1,i1]
               TYaiai[a,i,a1,i1]  += Taiai[a,i,a1,i1]
#
               R1aibj[a,i,b,j]     = TYaiai[a,i,a1,i1]*T2old_ab[a1,i1,b,j]
               Taibj[a,i,b,j]     += R1aibj[a,i,b,j]
#
            ENDDO a1
            ENDDO i1

            R1aibj[b,j,a,i]            = taibj[a,i,b,j]
            PREPARE T2new_ab[a,i,b,j] += taibj[a,i,b,j]
            PREPARE T2new_ab[b,j,a,i] += R1aibj[b,j,a,i]
#
      ENDPARDO a,i,b,j
      server_barrier 
#
      ENDPROC WMEBJAA 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJAB 
#     ------------
#
# Contribution to T2new_ab
# ------------------------
#
      PARDO i1, a1, a, i
            REQUEST                     T2old_ab[a1,i1,a,i] 
            REQUEST                     T2old_ab[a1,i,a,i1] 
            taiai[a1,i1,a,i]          = T2old_ab[a1,i1,a,i]
            t1aiai[a1,i1,a,i]         = T2old_ab[a1,i,a,i1]
            taiai[a1,i1,a,i]         -= t1aiai[a1,i1,a,i]
            tpppp[a1,i1,i,a]          = taiai[a1,i1,a,i]
#
            DO j
            DO b
#
               REQUEST                        Viaai[i,a,b,j] 
               R1aibj[a1,i1,b,j]            = tpppp[a1,i1,i,a]*Viaai[i,a,b,j]
               Taibj[b,j,a1,i1]             = R1aibj[a1,i1,b,j]
               PREPARE T2new_ab[a1,i1,b,j] += R1aibj[a1,i1,b,j]
               PREPARE T2new_ab[b,j,a1,i1] += Taibj[b,j,a1,i1]
#
            ENDDO b
            ENDDO j
#
      ENDPARDO i1, a1, a, i
#
      server_barrier 
#
      ENDPROC WMEBJAB 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# -------------------------------------------------------------------------------  
#
#
# Compute contributions from 'Wmjbe'. 
#
      PROC WMJBEab
#     -------------
#
#  Calculate contribution to the amplitudes
#  ----------------------------------------
#
      PARDO a, j, i1, b1
#
            REQUEST T2old_ab[a,i1,b1,j] 
#
            DO i
            DO b
#
               REQUEST                      Vaaii[b,b1,i1,i]
#
               Taibj[a,i,b,j]             = T2old_ab[a,i1,b1,j]*Vaaii[b,b1,i1,i]
               Taibj[a,i,b,j]            *= -1.0  
#
               T2aibj[b,j,a,i]            = Taibj[a,i,b,j] 
               PREPARE T2new_ab[a,i,b,j] += Taibj[a,i,b,j]
               PREPARE T2new_ab[b,j,a,i] += T2aibj[b,j,a,i]
#
            ENDDO b
            ENDDO i
#
      ENDPARDO a, j, i1, b1
#
      ENDPROC WMJBEab
#     ---------------
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
      PROC WMEBJ 
# 
           CALL WMEBJAA
           CALL WMEBJAB
           CALL WMJBEab
#
      ENDPROC WMEBJ 
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
#    ------------------------------------------------------------------------ 
#
     PROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
#
     ecorrab = 0.0 
     esumab  = 0.0 
     sip_barrier 
     PARDO a, b, i, j 
#
           REQUEST Vpiqj[a,i,b,j]   
           REQUEST Vpiqj[a,j,b,i]   
#
           REQUEST T2old_ab[a,i,b,j]   
           GET     t1a_old[a,i] 
           GET     t1a_old[b,j] 
           tai[a,i] = t1a_old[a,i] 
#
           #Taibj[a,i,b,j]  = tai[a,i]^t1a_old[b,j] 
           #Taibj[a,i,b,j] += T2old_ab[a,i,b,j]  
           Taibj[a,i,b,j] = T2old_ab[a,i,b,j]  
#
           T1aibj[a,i,b,j] = Vpiqj[a,i,b,j]  
           T2aibj[a,i,b,j] = Vpiqj[a,j,b,i]  
           T1aibj[a,i,b,j]*= 2.0  
           T1aibj[a,i,b,j]-= T2aibj[a,i,b,j]  
#
           etemp = Taibj[a,i,b,j]*T1aibj[a,i,b,j] 
           esumab += etemp 
#
     ENDPARDO a, b, i, j 

     sip_barrier 
#
     collective ecorrab += esumab
     ecorrT = ecorrab 

#    ------------------------------------------------------------------------ 
# 
     ENDPROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
# 
     PROC T2NEW_ZERO
#    --------------- 
#
#     Zero out new 1-particle amplitude arrays 
#     ---------------------------------------- 
#
          PARDO a, i 
	        Tai[a,i] = 0.0
                PUT t1a_new[a,i] = Tai[a,i]
          ENDPARDO a, i 
#
#     Zero out new 2-particle amplitude arrays 
#     ---------------------------------------- 
#
          PARDO a, b, i, j 
	        Taibj[a,i,b,j] = 0.0
                PREPARE T2new_ab[a,i,b,j] = Taibj[a,i,b,j]
          ENDPARDO a, b, i, j 
# 
     ENDPROC T2NEW_ZERO
# 
#    ------------------------------------------------------------------------ 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC UPDATET2 
#     ------------- 
#
      PARDO b, a, j, i
#
            REQUEST                    T2old_ab[b,j,a,i]  
            REQUEST                    T2new_ab[b,j,a,i]  
            Taibj[a,i,b,j]           = T2new_ab[b,j,a,i]
            T1aibj[a,i,b,j]          = T2old_ab[b,j,a,i]
#
            REQUEST                    T2old_ab[a,i,b,j]  
            REQUEST                    T2new_ab[a,i,b,j]  
            Taibj[a,i,b,j]          += T2new_ab[a,i,b,j]
            T1aibj[a,i,b,j]         += T2old_ab[a,i,b,j]

            execute energy_denominator_rhf Taibj[a,i,b,j] fock_a 
            T1aibj[a,i,b,j] -= Taibj[a,i,b,j]
            T1aibj[a,i,b,j] *= -0.5

            if kiter < Idiis_order  
               PREPARE Eaibj[a,i,b,j,kiter] = T1aibj[a,i,b,j] 
            endif  

            if kiter >= Idiis_order  
               DO jdiis 
		  if jdiis == Idiis_order
                     PREPARE Eaibj[a,i,b,j,jdiis] = T1aibj[a,i,b,j] 
                     exit 
                  endif 
               ENDDO jdiis 
            endif  
#
      ENDPARDO b, a, j, i
      server_barrier 
#
      PARDO b, a, j, i
#
            REQUEST                    T2new_ab[a,i,b,j] 
            REQUEST                    T2new_ab[b,j,a,i] 
            Taibj[a,i,b,j]           = T2new_ab[b,j,a,i]
            Taibj[a,i,b,j]          += T2new_ab[a,i,b,j]
            Taibj[a,i,b,j]          *= 0.5  
            execute energy_denominator_rhf Taibj[a,i,b,j] fock_a 
            PREPARE T2old_ab[a,i,b,j]    = Taibj[a,i,b,j]
#
      ENDPARDO b, a, j, i
#
      ENDPROC UPDATET2 
#     ----------------  
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC UPDATET1 
#     ------------- 
#
      PARDO a, i 
#
            GET                t1a_new[a,i] 
            GET                t1a_old[a,i] 
            tai[a,i]         = t1a_new[a,i] 
            t1ai[a,i]        = t1a_old[a,i] 
            execute energy_denominator_rhf tai[a,i] fock_a  
            tai[a,i]        -= t1ai[a,i] 

            if kiter < Idiis_order  
               PUT Eai[a,i,kiter] = Tai[a,i] 
            endif  

            if kiter >= Idiis_order  
               DO jdiis 
                  if jdiis == Idiis_order
                     PUT Eai[a,i,jdiis] = Tai[a,i] 
                     exit 
                  endif 
               ENDDO jdiis 
            endif  
#
      ENDPARDO a, i 
#
      sip_barrier 
#
      PARDO a, i 
#
            GET                t1a_new[a,i] 
            tai[a,i]         = t1a_new[a,i] 
            execute energy_denominator_rhf tai[a,i] fock_a  
            PUT t1a_old[a,i] = tai[a,i] 
#
      ENDPARDO a, i 
#
      sip_barrier 
#
      ENDPROC UPDATET1 
#     ----------------  
#
      PROC MOVET2
#     ------------
#
      PARDO b, a, j, i
#
            REQUEST                    T2old_ab[a,i,b,j]  
            Taibj[a,i,b,j]           = T2old_ab[a,i,b,j]

            if kiter < Idiis_order  
               PREPARE Daibj[a,i,b,j,kiter] = Taibj[a,i,b,j] 
            endif  

            if kiter >= Idiis_order  
               DO kdiis 
                  if kdiis == (Idiis_order - 1)
                     PREPARE Daibj[a,i,b,j,kdiis] = Taibj[a,i,b,j] 
                     exit 
                  endif 
               ENDDO kdiis 
            endif  
#
      ENDPARDO b, a, j, i
#
      ENDPROC MOVET2
#     ----------------
#
      PROC MOVET1
#     ------------
#
      PARDO a, i 
#
            GET        t1a_old[a,i]
            tai[a,i] = t1a_old[a,i]

            if kiter < Idiis_order  
               PUT Dai[a,i,kiter] = Tai[a,i] 
            endif  

            if kiter >= Idiis_order  
               DO kdiis 
                  if kdiis == (Idiis_order - 1)
                     PUT Dai[a,i,kdiis] = Tai[a,i] 
                     exit 
                  endif 
               ENDDO kdiis 
            endif  
#
      ENDPARDO a, i
#
      ENDPROC MOVET1
#     ----------------

      PROC DIISN 
#     ---------- 

      worder = niter 
      if niter >= diis_order 
         worder = diis_order 
      endif 
      Iorder = (int)worder
      sip_barrier 
      PARDO a, i, b, j 
         DO jdiis 
         where jdiis <= Iorder

               REQUEST Eaibj[a,i,b,j,jdiis]   
               REQUEST Eaibj[a,j,b,i,jdiis]   

               t1aibj[a,i,b,j] = Eaibj[a,i,b,j,jdiis] 
               t3aibj[a,j,b,i] = Eaibj[a,j,b,i,jdiis] 
               t2aibj[a,i,b,j] = t3aibj[a,j,b,i] 
               t1aibj[a,i,b,j]-= t2aibj[a,i,b,j] 

         DO j1diis 
         where j1diis <= Iorder

               REQUEST Eaibj[a,i,b,j,j1diis]   
               REQUEST Eaibj[a,j,b,i,j1diis]   

               t3aibj[a,i,b,j] = Eaibj[a,i,b,j,j1diis] 
               t2aibj[a,j,b,i] = Eaibj[a,j,b,i,j1diis] 
               t4aibj[a,i,b,j] = t2aibj[a,j,b,i] 
               t3aibj[a,i,b,j]-= t4aibj[a,i,b,j] 
 
               tbb[jdiis,j1diis]          = Eaibj[a,i,b,j,jdiis]*Eaibj[a,i,b,j,j1diis] 
               tbb[jdiis,j1diis]         *= 2.0  
               PUT DIST_BB[jdiis,j1diis] += tbb[jdiis,j1diis]  
 
               etemp                     = t1aibj[a,i,b,j]*t3aibj[a,i,b,j] 
               tbb[jdiis,j1diis]          = etemp 
               PUT DIST_BB[jdiis,j1diis] += tbb[jdiis,j1diis]  
         ENDDO j1diis 
         ENDDO jdiis 
      ENDPARDO a, i, b, j 

      PARDO a, i 
         DO jdiis 
         where jdiis <= Iorder

               GET Eai[a,i,jdiis] 

         DO j1diis 
         where j1diis <= Iorder

               GET Eai[a,i,j1diis] 

               tbb[jdiis,j1diis]          = Eai[a,i,jdiis]*Eai[a,i,j1diis] 
               tbb[jdiis,j1diis]         *= 4.0  
               PUT DIST_BB[jdiis,j1diis] += tbb[jdiis,j1diis]  
 
         ENDDO j1diis 
         ENDDO jdiis 
      ENDPARDO a, i  

      sip_barrier 

      DO jdiis 
      where jdiis <= Iorder
	  DO j1diis 
	  where j1diis <= Iorder
		GET DIST_BB[jdiis,j1diis] 
		BB[jdiis,j1diis] = DIST_BB[jdiis,j1diis] 
	  ENDDO j1diis 
      ENDDO jdiis 

      execute compute_diis BB 

      sip_barrier 

      PARDO a, i, b, j 
            taibj[a,i,b,j] = 0.0 
            DO kdiis   
	    where kdiis < Iorder
               n1 = (scalar)kdiis
            
                  REQUEST           Daibj[a,i,b,j,kdiis]   
                  t2aibj[a,i,b,j] = Daibj[a,i,b,j,kdiis] 
                  DO d2   
                  where d2 <= Iorder 
                      n2 = (scalar)d2
                      kcount  = n2 
                      kcount -= n1 
                      if kcount == one 
                         REQUEST           Eaibj[a,i,b,j,d2]   
                         t3aibj[a,i,b,j] = Eaibj[a,i,b,j,d2] 
			 etemp =  BB[d2,d2]
                         t3aibj[a,i,b,j] += t2aibj[a,i,b,j] 
                         t3aibj[a,i,b,j] *= etemp   
                         taibj[a,i,b,j]  += t3aibj[a,i,b,j]  
                      endif 
                   ENDDO d2 
            ENDDO kdiis  

            DO d2   
               if d2 == 1
                  REQUEST           D0aibj[a,i,b,j]  
                  t2aibj[a,i,b,j] = D0aibj[a,i,b,j] 
                  REQUEST           Eaibj[a,i,b,j,d2]   
                  t3aibj[a,i,b,j] = Eaibj[a,i,b,j,d2] 
		  etemp =  BB[d2,d2]
                  t3aibj[a,i,b,j] += t2aibj[a,i,b,j] 
                  t3aibj[a,i,b,j] *= etemp   
                  taibj[a,i,b,j]  += t3aibj[a,i,b,j]  
               endif 
            ENDDO d2 

            PREPARE T2old_ab[a,i,b,j] = taibj[a,i,b,j]
      ENDPARDO a, i, b, j 

      PARDO a, i 
            tai[a,i] = 0.0 
            DO kdiis    
	    where kdiis < Iorder
               n1 = (scalar)kdiis
               GET         Dai[a,i,kdiis] 
               t2ai[a,i] = Dai[a,i,kdiis] 
            
		DO d2   
		where d2 <= Iorder
		   n2 = (scalar)d2
		   kcount  = n2 
		   kcount -= n1 
		   if kcount == one 
		      GET         Eai[a,i,d2] 
		      t3ai[a,i] = Eai[a,i,d2] 
		      etemp = BB[d2,d2]
		      t3ai[a,i] += t2ai[a,i] 
		      t3ai[a,i] *= etemp   
		      tai[a,i]  += t3ai[a,i]  
		   endif 
		ENDDO d2   
            ENDDO kdiis 

            DO d2   
               if d2 == 1
                  REQUEST D0ai[a,i]  
                  t2ai[a,i] = D0ai[a,i] 
                  GET         Eai[a,i,d2] 
                  t3ai[a,i] = Eai[a,i,d2] 
                  etemp = BB[d2,d2]
                  t3ai[a,i] += t2ai[a,i] 
                  t3ai[a,i] *= etemp   
                  tai[a,i]  += t3ai[a,i]  
               endif 
            ENDDO d2   

            PUT t1a_old[a,i] = tai[a,i]  
      ENDPARDO a, i  

      server_barrier

# If history space is full shift history end error vectors 

      if kiter >= Idiis_order  

# histories first 

      PARDO a, i, b, j 
      DO kdiis 
      where kdiis < Iorder
         n1 = (scalar)kdiis
         REQUEST Daibj[a,i,b,j,kdiis]   
         taibj[a,i,b,j] = Daibj[a,i,b,j,kdiis] 
	  DO k1diis 
	     n2 = (scalar)k1diis
	     etemp = n1 
	     etemp -= n2 
	     if etemp == 1.0 
		PREPARE Daibj[a,i,b,j,k1diis] = taibj[a,i,b,j] 
	     endif 
	  ENDDO k1diis  
	     if n1 == one 
		PREPARE D0aibj[a,i,b,j] = taibj[a,i,b,j] 
	     endif 
      ENDDO kdiis 
      ENDPARDO a, i, b, j 

      PARDO a, i  
      DO kdiis 
      where kdiis < Iorder
          n1 = (scalar)kdiis
          GET Dai[a,i,kdiis]   
          tai[a,i] = Dai[a,i,kdiis]   
	  DO k1diis 
	     n2 = (scalar)k1diis
	     etemp = n1 
	     etemp -= n2 
	     if etemp == 1.0 
		PUT Dai[a,i,k1diis] = tai[a,i] 
	     endif 
	  ENDDO k1diis  
	     if n1 == one 
		PREPARE D0ai[a,i] = tai[a,i] 
	     endif 
      ENDDO kdiis 
      ENDPARDO a, i  

# Now error vectors 

      PARDO a, i, b, j 
      DO kdiis 
      where kdiis <= Iorder
         n1 = (scalar)kdiis
         REQUEST Eaibj[a,i,b,j,kdiis]   
         taibj[a,i,b,j] = Eaibj[a,i,b,j,kdiis] 
	  DO k1diis 
	     n2 = (scalar)k1diis
	     etemp = n1 
	     etemp -= n2 
	     if etemp == 1.0 
		PREPARE Eaibj[a,i,b,j,k1diis] = taibj[a,i,b,j] 
	     endif 
	  ENDDO k1diis  
      ENDDO kdiis 
      ENDPARDO a, i, b, j 

      PARDO a, i  
      DO kdiis 
      where kdiis <= Iorder
         n1 = (scalar)kdiis
         GET Eai[a,i,kdiis]   
         tai[a,i] = Eai[a,i,kdiis]   
	  DO k1diis 
	     n2 = (scalar)k1diis
	     etemp = n1 
	     etemp -= n2 
	     if etemp == 1.0 
		PUT Eai[a,i,k1diis] = tai[a,i] 
	     endif 
	  ENDDO k1diis  
      ENDDO kdiis 
      ENDPARDO a, i  
      endif 
      server_barrier

      ENDPROC DIISN 
#     ------------- 
#
# ---------------------------------------------------------------------------------
# 
# BEGIN MAIN PROGRAM 
# ------------------ 
#

      print " "
      print "-- Parallel LCCSD program"
      print "-- Written by Jason N. Byrd, 2015"
      print " "

      ecrit = cc_conv
      zero = 0.0 
      one = 1.0
      two = 2.0
      five  = 5.0
      six   = 6.0
      seven = 7.0

      diis_start = (scalar)scf_beg
      diis_order = (scalar)scf_hist
      Idiis_order = scf_hist

      print diis_start
      print diis_order
      print " "

      sip_barrier 
#
# Read transformed integrals from lists 
# ------------------------------------- 
#
      CALL READ_2EL 
#
      SIP_BARRIER  
#
# Get initial second-order guess 
# ------------------------------ 
      CALL IGUESS_UHF
      SERVER_BARRIER  
# 
# zero out the diis vectors 
     PARDO jdiis, j1diis 
#     tbb[jdiis,j1diis] = 0.0
#     PUT DIST_BB[jdiis,j1diis] = tbb[jdiis,j1diis]
     PUT DIST_BB[jdiis,j1diis] = 0.0
     ENDPARDO jdiis, j1diis 

      PARDO a, i, b, j 
            REQUEST                     T2old_ab[a,i,b,j]  
            REQUEST                     T2old_ab[a,j,b,i]  
            taiai[a,i,b,j]            = T2old_ab[a,i,b,j] 
            t1aiai[a,i,b,j]           = T2old_ab[a,j,b,i] 
            taiai[a,i,b,j]           -= t1aiai[a,i,b,j] 
            PREPARE T2old_aa[a,i,b,j] = taiai[a,i,b,j] 
      ENDPARDO a, i, b, j 
#
      SERVER_BARRIER  
#
# Calculate the second-order energy 
# --------------------------------- 
      CALL ENERGY_NEW 
      mp2_correlation = ecorrT
      print mp2_correlation

# Start iterations
# ---------------- 
      DO KITER 
         print " "
	 print kiter
	 niter = (scalar)kiter

         SERVER_BARRIER  
#
         PARDO a, i, b, j 
               REQUEST                     T2old_ab[a,i,b,j]  
               REQUEST                     T2old_ab[a,j,b,i]  
               taiai[a,i,b,j]            = T2old_ab[a,i,b,j] 
               t1aiai[a,i,b,j]           = T2old_ab[a,j,b,i] 
               taiai[a,i,b,j]           -= t1aiai[a,i,b,j] 
               PREPARE T2old_aa[a,i,b,j] = taiai[a,i,b,j] 
         ENDPARDO a, i, b, j 
#
         SERVER_BARRIER  
#
#        Form Tau and Taup 
#        ----------------- 
#
#        Zero-out the new two-particle amplitude arrays
#        ---------------------------------------------- 
#
         CALL T2NEW_ZERO
#
#
#        Calculate new one-particle amplitudes 
#        ------------------------------------- 
#
         CALL T1ANEW 
#
#        Calculate new two-particle amplitudes 
#        ------------------------------------- 
#
         CALL T2NEWAB  
#
         CALL WMINJ 
         CALL AOLADDER 
#         CALL WAEBF  
         CALL WMEBJ 
#
#        Wait for all to finish 
#        ---------------------- 
         SERVER_BARRIER   
         CALL UPDATET1 
         CALL UPDATET2 
#
         SERVER_BARRIER   
         CALL ENERGY_NEW 
	 print ecorrT
         SERVER_BARRIER   
         if kiter >= (int)diis_start # two  
            CALL DIISN 
         ENDIF 
#
         CALL MOVET1
         CALL MOVET2
#
         SERVER_BARRIER  
         PARDO a, i, b, j 
               REQUEST                     T2old_ab[a,i,b,j]  
               REQUEST                     T2old_ab[a,j,b,i]  
               taiai[a,i,b,j]            = T2old_ab[a,i,b,j] 
               t1aiai[a,i,b,j]           = T2old_ab[a,j,b,i] 
               taiai[a,i,b,j]           -= t1aiai[a,i,b,j] 
               PREPARE T2old_aa[a,i,b,j] = taiai[a,i,b,j] 
         ENDPARDO a, i, b, j 
         SERVER_BARRIER  
#
#        Check on convergence 
#        -------------------- 
#
	 assert_same ecorrT
	 assert_same eold
	 etemp = (eold - ecorrT)**(2.0)
	 ediff = (etemp)**(0.5)
	 assert_same ediff
	 print ediff
 	 IF ediff < ecrit 
	    exit # kiter 
	 ENDIF
#
#        Reset eold --> enew 
#        ------------------- 
#
         eold = ecorrT 

      ENDDO KITER 
#
      server_barrier 
      restore_persistent scf_energy "scf_energy"
      server_barrier 
      lccsd_correlation = ecorrT
      totenerg  = ecorrT  
      totenerg += scf_energy
      lccsd_energy = totenerg
      print " "
      print scf_energy
      print lccsd_correlation
      print lccsd_energy
#
######CALL WRITE_2EL   
      server_barrier
pardo a,i
    get T1a_old[a,i]
    Tia[i,a] = T1a_old[a,i]
    put L1a_old[i,a] = Tia[i,a]
endpardo a,i
PARDO a, b, i, j 
#
    request T2old_ab[a,i,b,j]
    request T2old_aa[a,i,b,j]
    Tiajb[i,a,j,b] = T2old_ab[a,i,b,j]
    Tiaia[i,a,j,b] = T2old_aa[a,i,b,j]
    prepare L2old_ab[i,a,j,b] = Tiajb[i,a,j,b]
    prepare L2old_aa[i,a,j,b] = Tiaia[i,a,j,b]
#
ENDPARDO a, b, i, j 
SERVER_BARRIER  
#
      has_singles = 1.0
      is_ccpt = 1.0
      set_persistent has_singles "has_singles"
      set_persistent is_ccpt "is_ccpt"
      set_persistent t1a_old "t1a_old"
      set_persistent T2old_aa "T2old_aa"
      set_persistent T2old_ab "T2old_ab"
      set_persistent l1a_old "l1a_old"
      set_persistent L2old_aa "L2old_aa"
      set_persistent L2old_ab "L2old_ab"
      set_persistent scf_energy "scf_energy"
      set_persistent totenerg "totenerg"
      set_persistent VSpipi "VSpipi"
      set_persistent Vaaii  "Vaaii"
      set_persistent Viaai  "Viaai"
      set_persistent Vaaai  "Vaaai"
      set_persistent Vpiqj  "Vpiqj"
#
                           ENDSIAL CCSD_RHF_SV1    
#
# EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE 
#
#
