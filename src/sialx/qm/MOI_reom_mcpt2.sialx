import "MOI_reom_defs.sialx" 
import "MOI_reom_vars.sialx"
import "MOI_reom_elements.sialx"

SIAL R_EE_EOM_CCSD_RHF

#***********************************************************

PROC READ_AMP
#     -------------
print "Reading persistent arrays"
#     -------------
server_barrier
restore_persistent Dca      "MOI_ca"
restore_persistent DFock_a  "MOI_focka"
restore_persistent R1k1_a   "MOI_C1_a"
restore_persistent RB1_a    "MOI_B1_a"
restore_persistent t1a      "MOI_T1"
restore_persistent T2ab     "MOI_T2ab"
restore_persistent FwC      "MOI_wC"
restore_persistent t1a_old  "MOI_p2T1"

restore_persistent MOI_HBAR_ii "MOI_HBAR_ii"
restore_persistent MOI_HBAR_aa "MOI_HBAR_aa"
restore_persistent MOI_HBAR_ia "MOI_HBAR_ia"
restore_persistent MOI_HBAR_AJIB_aabb "MOI_HBAR_ajib"
restore_persistent MOI_HBAR_IAJK_aabb "MOI_HBAR_iajk"
restore_persistent MOI_HBAR_ABCI_aabb "MOI_HBAR_abci"

#pardo i,i1
#put MOI_HBAR_ii[i,i1] = 0.0
#endpardo i,i1
#pardo a,a1
#put MOI_HBAR_aa[a,a1] = 0.0
#endpardo a,a1
#pardo a,i
#put MOI_HBAR_ia[i,a] = 0.0
#endpardo a,i
#pardo i,a,a1,i1
#    prepare MOI_HBAR_AJIB_aabb[i,a,a1,i1] = 0.0
#endpardo i,a,a1,i1
#pardo i, i1, a, i2
#    prepare MOI_HBAR_IAJK_aabb[i,i1,a,i2] = 0.0
#endpardo i, i1, a, i2
#pardo a, a1, a2, i
#    prepare MOI_HBAR_ABCI_aabb[a,a1,a2,i] = 0.0
#endpardo a, a1, a2, i

server_barrier
print "Setting wC elements of the Fock matrix"
do a
    do a1
        allocate Fock_a[a,a1]
        get DFock_a[a,a1]
	get FwC[a,a1]
	Taa[a,a1]  = FwC[a,a1]

        Fock_a[a,a1]  = DFock_a[a,a1]
        Fock_a[a,a1] += Taa[a,a1]

	SFock_a[a,a1] = DFock_a[a,a1]

    enddo a1
    do i1
        allocate Fock_a[a,i1]
        get DFock_a[a,i1]
	get FwC[a,i1]

        Fock_a[a,i1]  = DFock_a[a,i1]
        Fock_a[a,i1] += FwC[a,i1]

	SFock_a[a,i1] = DFock_a[a,i1]
    enddo i1
enddo a
do i
    do a1
        allocate Fock_a[i,a1]
        get DFock_a[i,a1]
	get FwC[i,a1]

        Fock_a[i,a1]  = DFock_a[i,a1]
        Fock_a[i,a1] += FwC[i,a1]

	SFock_a[i,a1] = DFock_a[i,a1]
    enddo a1
    do i1
        allocate Fock_a[i,i1]
        get DFock_a[i,i1]
	get FwC[i,i1]

	Tii1[i,i1]  = FwC[i,i1]

        Fock_a[i,i1]  = DFock_a[i,i1]
        Fock_a[i,i1] += Tii1[i,i1]

	SFock_a[i,i1] = DFock_a[i,i1]

    enddo i1
enddo i
do mu
    do a
        get DCa[mu,a]
        allocate Ca[mu,a]
        Ca[mu,a] = DCa[mu,a]
    enddo a
    do i
        get DCa[mu,i]
        allocate Ca[mu,i]
        Ca[mu,i] = DCa[mu,i]
    enddo i
enddo mu
# place aa amplitude
pardo a,i,b,j
    request T2ab[a,i,b,j]
    request T2ab[a,j,b,i]
    T1aibj[a,i,b,j]  = T2ab[a,i,b,j]
    T2aibj[a,i,b,j]  = T2ab[a,j,b,i]
    T1aibj[a,i,b,j] -= T2aibj[a,i,b,j]
    prepare T2aa[a,i,b,j] = T1aibj[a,i,b,j]
endpardo a,i,b,j

server_barrier
# place T as Lambda for ccpt theory
PARDO a, a1, i, i1
    request T2aa[a,i,a1,i1]
    Tiaia[i,a,i1,a1] = T2aa[a,i,a1,i1]
    prepare L2aa[i,a,i1,a1] = Tiaia[i,a,i1,a1]
ENDPARDO a, a1, i, i1
PARDO a, b, i, j
    request T2ab[a,i,b,j]
    Tiajb[i,a,j,b] = T2ab[a,i,b,j]
    prepare L2ab[i,a,j,b] = Tiajb[i,a,j,b]
ENDPARDO a, b, i, j
pardo a,i
    get t1a[a,i]
    Tia[i,a] = t1a[a,i]
    put Lam1a[i,a] = Tia[i,a]
endpardo a,i

server_barrier
execute get_my_rank rank
myrank = (int)rank
if myrank == root
    do a
    do i
        get t1a[a,i]
        Tai[a,i] = t1a[a,i]
        St1a[a,i] = 0.0 #t1a[a,i]
        St1b[a,i] = 0.0 #t1a[a,i]
        put t1b[a,i] = Tai[a,i]
    enddo i
    enddo a
endif
broadcast_from root St1a
broadcast_from root St1b

pardo i,a
    get Lam1A[i,a]
    Tia[i,a] = Lam1A[i,a]
    put Lam1B[i,a] = Tia[i,a]
endpardo i,a

# for RHF T2bb=T2aa
pardo a,i,b,j
    request T2aa[a,i,b,j]
    T1aibj[a,i,b,j] = t2aa[a,i,b,j]
    prepare T2bb[a,i,b,j] = T1aibj[a,i,b,j]
endpardo a,i,b,j
server_barrier

print "Done placing amplitudes and Fock matrix"

ENDPROC READ_AMP


#------------------------------------------------------------------------

PROC HB_zero

pardo a,i,ksub
    prepare HB1_a[ksub,a,i] = 0.0
endpardo a,i,ksub

pardo a,i,a1,i1,ksub
    prepare HB2_aa[ksub,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,ksub

pardo a,i,b,j,ksub
    prepare HB2_ab[ksub,a,i,b,j] = 0.0
endpardo a,i,b,j,ksub

server_barrier

ENDPROC HB_zero

PROC VCHACT_ZERO
pardo a,i
    put VCHACT1A[a,i] = 0.0
endpardo a,i

pardo a,i,a1,i1
    prepare VCHACT2AA[a,i,a1,i1] = 0.0
endpardo a,i,a1,i1

pardo a,i,b,j
    prepare VCHACT2AB[a,i,b,j] = 0.0
endpardo a,i,b,j

server_barrier
ENDPROC VCHACT_ZERO

PROC place_VCACT
#
# in loops taken from ACESIII eom we go over 1 subspace vector at a time in H.B so strip ksub out.
#
server_barrier
Tk[ksub] = 1.0
pardo a,i,a1,i1
    request RB2_aa[ksub,a,i,a1,i1]
    Taiai[a,i,a1,i1] = Tk[ksub]*RB2_aa[ksub,a,i,a1,i1]
    prepare VCACT2AA[a,i,a1,i1] = Taiai[a,i,a1,i1]
endpardo a,i,a1,i1

pardo a,i,b,j
    request RB2_ab[ksub,a,i,b,j]
    Taibj[a,i,b,j] = Tk[ksub]*RB2_ab[ksub,a,i,b,j]
    prepare VCACT2AB[a,i,b,j] = Taibj[a,i,b,j]
endpardo a,i,b,j

pardo a,i
    request RB1_a[ksub,a,i]
    Tai[a,i] = Tk[ksub]*RB1_a[ksub,a,i]
    put VCACT1A[a,i] = Tai[a,i]
endpardo a,i

server_barrier
ENDPROC place_VCACT

PROC SYMMETRHC_A

#print "Anti-symmetrizing Q2*H*B _aa"

server_barrier
pardo a,i,a1,i1
    put DRNaiai[a,i,a1,i1] = 0.0
endpardo a,i,a1,i1
pardo a,i,a1,i1
    put D2RNaiai[a,i,a1,i1] = 0.0
endpardo a,i,a1,i1
server_barrier
     PARDO  a, a1, i, i1
     where a == a1
          REQUEST            VCHACT2AA[a,i,a1,i1]
          Raiai[a,i,a1,i1] = VCHACT2AA[a,i,a1,i1]
          execute anti_symm_v Raiai[a,i,a1,i1]
#
          put DRNaiai[a,i,a1,i1] += Raiai[a,i,a1,i1]
     ENDPARDO a, a1, i, i1
#
     PARDO  a, a1, i, i1
     where a < a1
          REQUEST            VCHACT2AA[a,i,a1,i1]
#
	  Raiai[a,i,a1,i1]   = VCHACT2AA[a,i,a1,i1]
	  R3aiai[a1,i,a,i1]  = VCHACT2AA[a,i,a1,i1]
	  R3aiai[a1,i,a,i1] *= -1.0
#
          put DRNaiai[a,i,a1,i1] += Raiai[a,i,a1,i1]
          put DRNaiai[a1,i,a,i1] += R3aiai[a1,i,a,i1]
     ENDPARDO a, a1, i, i1
server_barrier
     PARDO a, a1, i, i1
     where i == i1
           get DRNaiai[a,i,a1,i1]
           Raiai[a,i,a1,i1] = DRNaiai[a,i,a1,i1]
           execute anti_symm_o Raiai[a,i,a1,i1]
#
           put D2RNaiai[a,i,a1,i1]+=Raiai[a,i,a1,i1]
     ENDPARDO  a, a1, i, i1
#
     PARDO a, a1, i, i1
     where i < i1
           get DRNaiai[a,i,a1,i1]
           Raiai[a,i,a1,i1]  = DRNaiai[a,i,a1,i1]
           R2aiai[a,i1,a1,i] = DRNaiai[a,i,a1,i1]
           R2aiai[a,i1,a1,i] *=-1.0
#
           put D2RNaiai[a,i,a1,i1]+=Raiai[a,i,a1,i1]
           put D2RNaiai[a,i1,a1,i]+=R2aiai[a,i1,a1,i]
#
     ENDPARDO  a, a1, i, i1
server_barrier
pardo a,i,a1,i1
    get D2RNaiai[a,i,a1,i1]
    Taiai[a,i,a1,i1] = D2RNaiai[a,i,a1,i1]
    prepare VCHACT2AA[a,i,a1,i1] = Taiai[a,i,a1,i1]
endpardo a,i,a1,i1
server_barrier
pardo a,i,a1,i1
put DRNaiai[a,i,a1,i1] = 0.0
endpardo a,i,a1,i1
pardo a,i,a1,i1
put D2RNaiai[a,i,a1,i1] = 0.0
endpardo a,i,a1,i1
server_barrier
ENDPROC SYMMETRHC_A

PROC place_HB
server_barrier
Tk[ksub] = 1.0
pardo a,i
    get VCHACT1A[a,i]
    Tkai[ksub,a,i] = Tk[ksub]*VCHACT1A[a,i]
    prepare HB1_a[ksub,a,i] = Tkai[ksub,a,i]
endpardo a,i

pardo a,i,a1,i1
    request VCHACT2AA[a,i,a1,i1]
    Tkaiai[ksub,a,i,a1,i1] = Tk[ksub]*VCHACT2AA[a,i,a1,i1]
    prepare HB2_aa[ksub,a,i,a1,i1] = Tkaiai[ksub,a,i,a1,i1]
endpardo a,i,a1,i1

pardo a,i,b,j
    request VCHACT2AB[a,i,b,j]
    Tkaibj[ksub,a,i,b,j] = Tk[ksub]*VCHACT2AB[a,i,b,j]
    prepare HB2_ab[ksub,a,i,b,j] = Tkaibj[ksub,a,i,b,j]
endpardo a,i,b,j
server_barrier
ENDPROC place_HB

#------------------------------------------------------------------------

PROC HB_mult_MCPT

#------------------------------------------------------------------------
#
# JNB verified A3
#
#------------------------------------------------------------------------
print "Starting HR multiplication"
server_barrier

call HB_zero

do ksub

    allocate LFmi_a[*,*]
    allocate LFmi_b[*,*]
    allocate LFae_a[*,*]

    call VCHACT_ZERO
    call place_VCACT

    call FACTORS_NEW_MCPT
    server_barrier

    call AOLADDER_NEW
    call R2ABLIN_NEW_MCPT
    call R2AALIN_NEW_MCPT
    call R1ANEW_MCPT

    server_barrier

    call SYMMETRHC_A

    call place_HB
    server_barrier
    pardo a,a1
    put Fae_a[a,a1] = 0.0
    endpardo a,a1
    pardo i,i1
    put Fmi_a[i,i1] = 0.0
    endpardo i,i1
    pardo i,j
    put Fmi_b[j,i] = 0.0
    endpardo i,j
    deallocate LFae_a[*,*]
    deallocate LFmi_a[*,*]
    deallocate LFmi_b[*,*]
    server_barrier

enddo ksub
server_barrier

ENDPROC HB_mult_MCPT

#------------------------------------------------------------------------

PROC BHB_mult
#
allocate LGmat[*,*]
print "Starting LHR mult"
server_barrier
do ksub
do ksub1
    LGmat[ksub,ksub1] = 0.0
enddo ksub1
enddo ksub

pardo ksub,ksub1
    prepare Gmat[ksub,ksub1] = 0.0
endpardo ksub,ksub1
server_barrier
#
pardo a,i
do ksub
    request HB1_a[ksub,a,i]
    Tkai[ksub,a,i] = HB1_a[ksub,a,i]
    do ksub1
	request LB1_a[ksub1,a,i]
	Tkk[ksub1,ksub] = LB1_a[ksub1,a,i]*Tkai[ksub,a,i]
	Tkk[ksub1,ksub] *= 2.0
	LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
    enddo ksub1
enddo ksub
endpardo a,i
#
pardo a,i,a1,i1
where a < a1
where i < i1
do ksub
    request HB2_aa[ksub,a,i,a1,i1]
    Tkaiai[ksub,a,i,a1,i1] = HB2_aa[ksub,a,i,a1,i1]
    do ksub1
	request LB2_aa[ksub1,a,i,a1,i1]
	Tkk[ksub1,ksub] = LB2_aa[ksub1,a,i,a1,i1]*Tkaiai[ksub,a,i,a1,i1]
	Tkk[ksub1,ksub] *= 2.0
	LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
    enddo ksub1
enddo ksub
endpardo a,i,a1,i1
#
pardo a,i,a1,i1
where a < a1
where i == i1
do ksub
    request HB2_aa[ksub,a,i,a1,i1]
    Tkaiai[ksub,a,i,a1,i1] = HB2_aa[ksub,a,i,a1,i1]
    do ksub1
	request LB2_aa[ksub1,a,i,a1,i1]
	Tkk[ksub1,ksub] = LB2_aa[ksub1,a,i,a1,i1]*Tkaiai[ksub,a,i,a1,i1]
	LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
    enddo ksub1
enddo ksub
endpardo a,i,a1,i1
#
pardo a,i,a1,i1
where a == a1
where i < i1
do ksub
    request HB2_aa[ksub,a,i,a1,i1]
    Tkaiai[ksub,a,i,a1,i1] = HB2_aa[ksub,a,i,a1,i1]
    do ksub1
	request LB2_aa[ksub1,a,i,a1,i1]
	Tkk[ksub1,ksub] = LB2_aa[ksub1,a,i,a1,i1]*Tkaiai[ksub,a,i,a1,i1]
	LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
    enddo ksub1
enddo ksub
endpardo a,i,a1,i1
#
pardo a,i,a1,i1
where a == a1
where i == i1
do ksub
    request HB2_aa[ksub,a,i,a1,i1]
    Tkaiai[ksub,a,i,a1,i1] = HB2_aa[ksub,a,i,a1,i1]
    do ksub1
	request LB2_aa[ksub1,a,i,a1,i1]
	Tkk[ksub1,ksub] = LB2_aa[ksub1,a,i,a1,i1]*Tkaiai[ksub,a,i,a1,i1]
	Tkk[ksub1,ksub] *= 0.5
	LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
    enddo ksub1
enddo ksub
endpardo a,i,a1,i1
#
#
pardo a,i,b,j
do ksub
    request HB2_ab[ksub,a,i,b,j]
    Tkaibj[ksub,a,i,b,j] = HB2_ab[ksub,a,i,b,j]
    do ksub1
	request LB2_ab[ksub1,a,i,b,j]
	Tkk[ksub1,ksub] = LB2_ab[ksub1,a,i,b,j]*Tkaibj[ksub,a,i,b,j]
	LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
    enddo ksub1
enddo ksub
endpardo a,i,b,j
server_barrier
#
do ksub
do ksub1
    Tkk[ksub1,ksub] = LGmat[ksub1,ksub]
    prepare Gmat[ksub1,ksub] += LGmat[ksub1,ksub]
enddo ksub1
enddo ksub
#
server_barrier
deallocate LGmat
server_barrier
#
ENDPROC BHB_mult

PROC form_G

call HB_mult_MCPT

call BHB_mult

ENDPROC form_G

#------------------------------------------------------------------------

PROC diag_G
#
server_barrier

execute get_my_rank rank
myrank = (int)rank
if myrank == root
    do ksub
    do ksub1
	request Gmat[ksub1,ksub]
	Tkk[ksub1,ksub] = Gmat[ksub1,ksub]
	GSmat[ksub1,ksub] = Tkk[ksub1,ksub]
    enddo ksub1
    enddo ksub

    do ksub
        SEk[ksub] = 0.0
    enddo ksub

    execute gen_eigen_calc GSmat SAlphaL SAlphaR SEk

    do kstate
	SEk0[kstate] = SEk[kstate]
    enddo kstate
    print "-- EOM-CCPT(2) excited state energies --"

    do kstate
	allocate contiguous EOM_EE_Energy[kstate:kstate]
	EOM_EE_Energy[kstate:kstate] = SEk0[kstate]
	print EOM_EE_Energy[kstate:kstate]
	deallocate contiguous EOM_EE_Energy[kstate:kstate]
    enddo kstate

endif
broadcast_from root SAlphaL
broadcast_from root SAlphaR
broadcast_from root SEk
broadcast_from root SEk0

server_barrier
#
ENDPROC diag_G

#------------------------------------------------------------------------

PROC move_by_one_RK1
#
pardo a,i,kstate
    request R1k1_a[kstate,a,i]
    prepare R0k1_a[kstate,a,i] = R1k1_a[kstate,a,i]
endpardo a,i,kstate
#
ENDPROC move_by_one_RK1

PROC move_by_one_RK2aa
#
pardo a,i,a1,i1,kstate
    request R1k2_aa[kstate,a,i,a1,i1]
    prepare R0k2_aa[kstate,a,i,a1,i1] = R1k2_aa[kstate,a,i,a1,i1]
endpardo a,i,a1,i1,kstate
#
ENDPROC move_by_one_RK2aa

PROC move_by_one_RK2ab
#
pardo a,i,b,j,kstate
    request R1k2_ab[kstate,a,i,b,j]
    prepare R0k2_ab[kstate,a,i,b,j] = R1k2_ab[kstate,a,i,b,j]
endpardo a,i,b,j,kstate
#
ENDPROC move_by_one_RK2ab

PROC move_by_one_LK1
#
pardo a,i,kstate
    request L1k1_a[kstate,a,i]
    prepare L0k1_a[kstate,a,i] = L1k1_a[kstate,a,i]
endpardo a,i,kstate
#
ENDPROC move_by_one_LK1

PROC move_by_one_LK2aa
#
pardo a,i,a1,i1,kstate
    request L1k2_aa[kstate,a,i,a1,i1]
    prepare L0k2_aa[kstate,a,i,a1,i1] = L1k2_aa[kstate,a,i,a1,i1]
endpardo a,i,a1,i1,kstate
#
ENDPROC move_by_one_LK2aa

PROC move_by_one_LK2ab
#
pardo a,i,b,j,kstate
    request L1k2_ab[kstate,a,i,b,j]
    prepare L0k2_ab[kstate,a,i,b,j] = L1k2_ab[kstate,a,i,b,j]
endpardo a,i,b,j,kstate
#
ENDPROC move_by_one_LK2ab

PROC form_new_RK1
#
pardo a,i,kstate
Tkai[kstate,a,i] = 0.0
do ksub
    request RB1_a[ksub,a,i]
    T1kai[kstate,a,i] = RB1_a[ksub,a,i]*SalphaR[ksub,kstate]
    Tkai[kstate,a,i] += T1kai[kstate,a,i]
enddo ksub
prepare R1k1_a[kstate,a,i] = Tkai[kstate,a,i]
endpardo a,i,kstate
#
#
ENDPROC form_new_RK1

PROC form_new_RK2aa
#
pardo a,i,a1,i1,kstate
Tkaiai[kstate,a,i,a1,i1] = 0.0
do ksub
    request RB2_aa[ksub,a,i,a1,i1]
    T1kaiai[kstate,a,i,a1,i1] = RB2_aa[ksub,a,i,a1,i1]*SalphaR[ksub,kstate]
    Tkaiai[kstate,a,i,a1,i1] += T1kaiai[kstate,a,i,a1,i1]
enddo ksub
prepare R1k2_aa[kstate,a,i,a1,i1] = Tkaiai[kstate,a,i,a1,i1]
endpardo a,i,a1,i1,kstate
#
#
ENDPROC form_new_RK2aa

PROC form_new_RK2ab
#
pardo a,i,b,j,kstate
Tkaibj[kstate,a,i,b,j] = 0.0
do ksub
    request RB2_ab[ksub,a,i,b,j]
    T1kaibj[kstate,a,i,b,j] = RB2_ab[ksub,a,i,b,j]*SalphaR[ksub,kstate]
    Tkaibj[kstate,a,i,b,j] += T1kaibj[kstate,a,i,b,j]
enddo ksub
prepare R1k2_ab[kstate,a,i,b,j] = Tkaibj[kstate,a,i,b,j]
endpardo a,i,b,j,kstate
#
ENDPROC form_new_RK2ab

PROC form_new_LK1
#
pardo a,i,kstate
Tkai[kstate,a,i] = 0.0
do ksub
    request LB1_a[ksub,a,i]
    T1kai[kstate,a,i] = LB1_a[ksub,a,i]*SalphaL[ksub,kstate]
    Tkai[kstate,a,i] += T1kai[kstate,a,i]
enddo ksub
prepare L1k1_a[kstate,a,i] = Tkai[kstate,a,i]
endpardo a,i,kstate
#
#
ENDPROC form_new_LK1

PROC form_new_LK2aa
#
pardo a,i,a1,i1,kstate
Tkaiai[kstate,a,i,a1,i1] = 0.0
do ksub
    request LB2_aa[ksub,a,i,a1,i1]
    T1kaiai[kstate,a,i,a1,i1] = LB2_aa[ksub,a,i,a1,i1]*SalphaL[ksub,kstate]
    Tkaiai[kstate,a,i,a1,i1] += T1kaiai[kstate,a,i,a1,i1]
enddo ksub
prepare L1k2_aa[kstate,a,i,a1,i1] = Tkaiai[kstate,a,i,a1,i1]
endpardo a,i,a1,i1,kstate
#
#
ENDPROC form_new_LK2aa

PROC form_new_LK2ab
#
pardo a,i,b,j,kstate
Tkaibj[kstate,a,i,b,j] = 0.0
do ksub
    request LB2_ab[ksub,a,i,b,j]
    T1kaibj[kstate,a,i,b,j] = LB2_ab[ksub,a,i,b,j]*SalphaL[ksub,kstate]
    Tkaibj[kstate,a,i,b,j] += T1kaibj[kstate,a,i,b,j]
enddo ksub
prepare L1k2_ab[kstate,a,i,b,j] = Tkaibj[kstate,a,i,b,j]
endpardo a,i,b,j,kstate
#
ENDPROC form_new_LK2ab

PROC form_residual_R1
#
pardo a,i

    get VCONV1A[a,i]

do kstate
    etemp = SEk[kstate]
    etemp *= -1.0
    Tkai[kstate,a,i] = 0.0

    do ksub
        request HB1_a[ksub,a,i]
        request RB1_a[ksub,a,i]

# a*HB
        T1kai[kstate,a,i] = HB1_a[ksub,a,i]*SalphaR[ksub,kstate]

        Tkai[kstate,a,i] += T1kai[kstate,a,i]
# a*E*B
        T2kai[kstate,a,i]  = RB1_a[ksub,a,i]*SalphaR[ksub,kstate]
        T2kai[kstate,a,i] *= etemp

        Tkai[kstate,a,i] += T2kai[kstate,a,i]
    enddo ksub

    Tk[kstate] = 1.0
    Tai[a,i]   = 1.0

    T3kai[kstate,a,i] = Tk[kstate]^VCONV1A[a,i]

    T4kai[kstate,a,i] = etemp
    T3kai[kstate,a,i] += T4kai[kstate,a,i]
    
    execute invert_diagonal Tkai[kstate,a,i] T3kai[kstate,a,i]
    Tkai[kstate,a,i] *= -1.0
    prepare cRk1_a[kstate,a,i] = Tkai[kstate,a,i]

enddo kstate
endpardo a,i
#
ENDPROC form_residual_R1

PROC form_residual_R2aa
#
pardo a,i,a1,i1

    request VCONV2AA[a,i,a1,i1]

do kstate
    etemp = SEk[kstate]
    etemp *= -1.0
    Tkaiai[kstate,a,i,a1,i1] = 0.0

    do ksub
        request HB2_aa[ksub,a,i,a1,i1]
        request RB2_aa[ksub,a,i,a1,i1]

# a*HB
        T1kaiai[kstate,a,i,a1,i1] = HB2_aa[ksub,a,i,a1,i1]*SalphaR[ksub,kstate]

        Tkaiai[kstate,a,i,a1,i1] += T1kaiai[kstate,a,i,a1,i1]
# a*E*B
        T2kaiai[kstate,a,i,a1,i1]  = RB2_aa[ksub,a,i,a1,i1]*SalphaR[ksub,kstate]
        T2kaiai[kstate,a,i,a1,i1] *= etemp

        Tkaiai[kstate,a,i,a1,i1] += T2kaiai[kstate,a,i,a1,i1]
    enddo ksub

    Tk[kstate] = 1.0
    Taiai[a,i,a1,i1]   = 1.0

    T3kaiai[kstate,a,i,a1,i1] = Tk[kstate]^VCONV2AA[a,i,a1,i1]
    T4kaiai[kstate,a,i,a1,i1] = etemp
    T3kaiai[kstate,a,i,a1,i1] += T4kaiai[kstate,a,i,a1,i1]

    execute invert_diagonal_asym Tkaiai[kstate,a,i,a1,i1] T3kaiai[kstate,a,i,a1,i1]
    Tkaiai[kstate,a,i,a1,i1] *= -1.0
    prepare cRk2_aa[kstate,a,i,a1,i1] = Tkaiai[kstate,a,i,a1,i1]

enddo kstate
endpardo a,i,a1,i1
#
ENDPROC form_residual_R2aa

PROC form_residual_R2ab
#
pardo a,i,b,j

    request VCONV2AB[a,i,b,j]

do kstate
    etemp = SEk[kstate]
    etemp *= -1.0
    Tkaibj[kstate,a,i,b,j] = 0.0

    do ksub
        request HB2_ab[ksub,a,i,b,j]
        request RB2_ab[ksub,a,i,b,j]

# a*HB
        T1kaibj[kstate,a,i,b,j] = HB2_ab[ksub,a,i,b,j]*SalphaR[ksub,kstate]

        Tkaibj[kstate,a,i,b,j] += T1kaibj[kstate,a,i,b,j]
# a*E*B
        T2kaibj[kstate,a,i,b,j]  = RB2_ab[ksub,a,i,b,j]*SalphaR[ksub,kstate]
        T2kaibj[kstate,a,i,b,j] *= etemp

        Tkaibj[kstate,a,i,b,j] += T2kaibj[kstate,a,i,b,j]
    enddo ksub

    Tk[kstate] = 1.0
    Taibj[a,i,b,j]   = 1.0

    T3kaibj[kstate,a,i,b,j] = Tk[kstate]^VCONV2AB[a,i,b,j]
    T4kaibj[kstate,a,i,b,j] = etemp
    T3kaibj[kstate,a,i,b,j] += T4kaibj[kstate,a,i,b,j]

    execute invert_diagonal Tkaibj[kstate,a,i,b,j] T3kaibj[kstate,a,i,b,j]
    Tkaibj[kstate,a,i,b,j] *= -1.0
    prepare cRk2_ab[kstate,a,i,b,j] = Tkaibj[kstate,a,i,b,j]

enddo kstate
endpardo a,i,b,j
#
ENDPROC form_residual_R2ab

PROC update_RB1
#
pardo a,i
    allocate contiguous CLRB1_a[1:subspc,a:a,i:i]
    do kstate
        request R1k1_a[kstate,a,i]
        request R0k1_a[kstate,a,i]
        request cRk1_a[kstate,a,i]

# davidson space 1
        kstart = kstate
        CLRB1_a[kstart:kstart,a:a,i:i] = R0k1_a[kstate,a,i]
# davidson space 2
        kstart = kstate + roots
        CLRB1_a[kstart:kstart,a:a,i:i] = R1k1_a[kstate,a,i]
# davidson space 3
        kstart = kstate + 2*roots
        CLRB1_a[kstart:kstart,a:a,i:i] = cRk1_a[kstate,a,i]
    enddo kstate
    do ksub
        Tkai[ksub,a,i] = CLRB1_a[ksub:ksub,a:a,i:i]
        prepare RB1_a[ksub,a,i] = Tkai[ksub,a,i]
    enddo ksub

    deallocate contiguous CLRB1_a[1:subspc,a:a,i:i]
endpardo a,i
#
ENDPROC update_RB1

PROC update_RB2aa
#
pardo a,i,a1,i1
    allocate contiguous CLRB2_aa[1:subspc,a:a,i:i,a1:a1,i1:i1]
    do kstate
        request R1k2_aa[kstate,a,i,a1,i1]
        request R0k2_aa[kstate,a,i,a1,i1]
        request cRk2_aa[kstate,a,i,a1,i1]

# davidson space 1
        kstart = kstate
        CLRB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] = R0k2_aa[kstate,a,i,a1,i1]
# davidson space 2
        kstart = kstate + roots
        CLRB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] = R1k2_aa[kstate,a,i,a1,i1]
# davidson space 3
        kstart = kstate + 2*roots
        CLRB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] = cRk2_aa[kstate,a,i,a1,i1]
    enddo kstate
    do ksub
        Tkaiai[ksub,a,i,a1,i1] = CLRB2_aa[ksub:ksub,a:a,i:i,a1:a1,i1:i1]
        prepare RB2_aa[ksub,a,i,a1,i1] = Tkaiai[ksub,a,i,a1,i1]
    enddo ksub

    deallocate contiguous CLRB2_aa[1:subspc,a:a,i:i,a1:a1,i1:i1]
endpardo a,i,a1,i1
#
ENDPROC update_RB2aa

PROC update_RB2ab
#
pardo a,i,b,j
    allocate contiguous CLRB2_ab[1:subspc,a:a,i:i,b:b,j:j]
    do kstate
        request R1k2_ab[kstate,a,i,b,j]
        request R0k2_ab[kstate,a,i,b,j]
        request cRk2_ab[kstate,a,i,b,j]

# davidson space 1
        kstart = kstate
        CLRB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] = R0k2_ab[kstate,a,i,b,j]
# davidson space 2
        kstart = kstate + roots
        CLRB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] = R1k2_ab[kstate,a,i,b,j]
# davidson space 3
        kstart = kstate + 2*roots
        CLRB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] = cRk2_ab[kstate,a,i,b,j]
    enddo kstate
    do ksub
        Tkaibj[ksub,a,i,b,j] = CLRB2_ab[ksub:ksub,a:a,i:i,b:b,j:j]
        prepare RB2_ab[ksub,a,i,b,j] = Tkaibj[ksub,a,i,b,j]
    enddo ksub

    deallocate contiguous CLRB2_ab[1:subspc,a:a,i:i,b:b,j:j]
endpardo a,i,b,j
#
ENDPROC update_RB2ab

PROC update_LB1
#
pardo a,i
    allocate contiguous CLLB1_a[1:subspc,a:a,i:i]
    do kstate
        request L1k1_a[kstate,a,i]
        request L0k1_a[kstate,a,i]
        request cRk1_a[kstate,a,i]

# davidson space 1
        kstart = kstate
        CLLB1_a[kstart:kstart,a:a,i:i] = L0k1_a[kstate,a,i]
# davidson space 2
        kstart = kstate + roots
        CLLB1_a[kstart:kstart,a:a,i:i] = L1k1_a[kstate,a,i]
# davidson space 3
        kstart = kstate + 2*roots
        CLLB1_a[kstart:kstart,a:a,i:i] = cRk1_a[kstate,a,i]
    enddo kstate
    do ksub
        Tkai[ksub,a,i] = CLLB1_a[ksub:ksub,a:a,i:i]
        prepare LB1_a[ksub,a,i] = Tkai[ksub,a,i]
    enddo ksub

    deallocate contiguous CLLB1_a[1:subspc,a:a,i:i]
endpardo a,i
#
ENDPROC update_LB1

PROC update_LB2aa
#
pardo a,i,a1,i1
    allocate contiguous CLLB2_aa[1:subspc,a:a,i:i,a1:a1,i1:i1]
    do kstate
        request L1k2_aa[kstate,a,i,a1,i1]
        request L0k2_aa[kstate,a,i,a1,i1]
        request cRk2_aa[kstate,a,i,a1,i1]

# davidson space 1
        kstart = kstate
        CLLB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] = L0k2_aa[kstate,a,i,a1,i1]
# davidson space 2
        kstart = kstate + roots
        CLLB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] = L1k2_aa[kstate,a,i,a1,i1]
# davidson space 3
        kstart = kstate + 2*roots
        CLLB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] = cRk2_aa[kstate,a,i,a1,i1]
    enddo kstate
    do ksub
        Tkaiai[ksub,a,i,a1,i1] = CLLB2_aa[ksub:ksub,a:a,i:i,a1:a1,i1:i1]
        prepare LB2_aa[ksub,a,i,a1,i1] = Tkaiai[ksub,a,i,a1,i1]
    enddo ksub

    deallocate contiguous CLLB2_aa[1:subspc,a:a,i:i,a1:a1,i1:i1]
endpardo a,i,a1,i1
#
ENDPROC update_LB2aa

PROC update_LB2ab
#
pardo a,i,b,j
    allocate contiguous CLLB2_ab[1:subspc,a:a,i:i,b:b,j:j]
    do kstate
        request L1k2_ab[kstate,a,i,b,j]
        request L0k2_ab[kstate,a,i,b,j]
        request cRk2_ab[kstate,a,i,b,j]

# davidson space 1
        kstart = kstate
        CLLB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] = L0k2_ab[kstate,a,i,b,j]
# davidson space 2
        kstart = kstate + roots
        CLLB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] = L1k2_ab[kstate,a,i,b,j]
# davidson space 3
        kstart = kstate + 2*roots
        CLLB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] = cRk2_ab[kstate,a,i,b,j]
    enddo kstate
    do ksub
        Tkaibj[ksub,a,i,b,j] = CLLB2_ab[ksub:ksub,a:a,i:i,b:b,j:j]
        prepare LB2_ab[ksub,a,i,b,j] = Tkaibj[ksub,a,i,b,j]
    enddo ksub

    deallocate contiguous CLLB2_ab[1:subspc,a:a,i:i,b:b,j:j]
endpardo a,i,b,j
#
ENDPROC update_LB2ab

PROC all_GS
#
#---------------------------------------------------------------
# we do Left | Right biorthogonalization.
# when coded this paper was open
#ROCKY MOUNTAIN JOURNAL OF MATHEMATICS Volume 44, Number 4, 2014
#INTRODUCTION TO A GRAM-SCHMIDT-TYPE BIORTHOGONALIZATION METHOD
#L. KOHAUPT
# modification to the scheme by having L and R scaled by 1/norm**0.5 
#  this is done for numerical stability concerns due to imballanced 
#  weighting of L and R within the above algorithm
#---------------------------------------------------------------
#
do ksub
where ksub == 1
server_barrier
#######################
# get k=k'=1 overlap
    normS   = 0.0
    Tk[ksub] = 1.0
    pardo a,i
	request RB1_a[ksub,a,i]
	request LB1_a[ksub,a,i]
	normT  = LB1_a[ksub,a,i]*RB1_a[ksub,a,i]
	normT *= 2.0
	normS += normT
    endpardo a,i
    pardo a,i,a1,i1
	request RB2_aa[ksub,a,i,a1,i1]
	request LB2_aa[ksub,a,i,a1,i1]
	normT  = LB2_aa[ksub,a,i,a1,i1]*RB2_aa[ksub,a,i,a1,i1]
	normT *= 0.5
	normS += normT
    endpardo a,i,a1,i1

    pardo a,i,b,j
	request RB2_ab[ksub,a,i,b,j]
	request LB2_ab[ksub,a,i,b,j]
	normT  = LB2_ab[ksub,a,i,b,j]*RB2_ab[ksub,a,i,b,j]
	normS += normT
    endpardo a,i,b,j
    server_barrier
    norm1   = 0.0
    collective norm1   += normS
    etemp = 1.0
    if norm1 < 0.0
	etemp = -1.0
    endif
    norm1 *= etemp
    norm2 = (norm1)**(-0.5)
#    if norm1 < (10.0)**(-12.0)
#	norm2 = 1.0
#    endif
#######################
    pardo a,i
        prepare RB1_a[ksub,a,i] *= norm2
    endpardo a,i
    pardo a,i,a1,i1
        prepare RB2_aa[ksub,a,i,a1,i1] *= norm2
    endpardo a,i,a1,i1
    pardo a,i,b,j
        prepare RB2_ab[ksub,a,i,b,j] *= norm2
    endpardo a,i,b,j
    server_barrier
#
# flip sign of left vector for negative bi-norm
    norm2 *= etemp
#
    pardo a,i
        prepare LB1_a[ksub,a,i] *= norm2
    endpardo a,i
    pardo a,i,a1,i1
        prepare LB2_aa[ksub,a,i,a1,i1] *= norm2
    endpardo a,i,a1,i1
    pardo a,i,b,j
        prepare LB2_ab[ksub,a,i,b,j] *= norm2
    endpardo a,i,b,j
server_barrier
enddo ksub

# loop over "k+1"
do qsub
server_barrier
#######################
# make copy of Ak+1
    Tk[qsub] = 1.0
    pardo a,i
	request LB1_a[qsub,a,i]
	Tai[a,i] = Tk[qsub]*LB1_a[qsub,a,i]
	put DLNai[a,i] = Tai[a,i]
    endpardo a,i
    pardo a,i,a1,i1
	request LB2_aa[qsub,a,i,a1,i1]
	Taiai[a,i,a1,i1] = Tk[qsub]*LB2_aa[qsub,a,i,a1,i1]
	put DLNaiai[a,i,a1,i1] = Taiai[a,i,a1,i1]
    endpardo a,i,a1,i1
    pardo a,i,b,j
	request LB2_ab[qsub,a,i,b,j]
	Taibj[a,i,b,j] = Tk[qsub]*LB2_ab[qsub,a,i,b,j]
	put DLNaibj[a,i,b,j] = Taibj[a,i,b,j]
    endpardo a,i,b,j
# make copy of Fk+1
    pardo a,i
	request RB1_a[qsub,a,i]
	Tai[a,i] = Tk[qsub]*RB1_a[qsub,a,i]
	put DRNai[a,i] = Tai[a,i]
    endpardo a,i
    pardo a,i,a1,i1
	request RB2_aa[qsub,a,i,a1,i1]
	Taiai[a,i,a1,i1] = Tk[qsub]*RB2_aa[qsub,a,i,a1,i1]
	put DRNaiai[a,i,a1,i1] = Taiai[a,i,a1,i1]
    endpardo a,i,a1,i1
    pardo a,i,b,j
	request RB2_ab[qsub,a,i,b,j]
	Taibj[a,i,b,j] = Tk[qsub]*RB2_ab[qsub,a,i,b,j]
	put DRNaibj[a,i,b,j] = Taibj[a,i,b,j]
    endpardo a,i,b,j
    server_barrier

    do ksub
    where ksub < qsub
server_barrier
#######################
# form (Ak+1,Gk) = Loverlap1
	Tk[ksub] = 1.0
        LoverlapS   = 0.0
	pardo a,i
	    get DLNai[a,i]
	    request RB1_a[ksub,a,i]
	    Tai[a,i]    = Tk[ksub]*RB1_a[ksub,a,i]
	    overlapT    = DLNai[a,i]*Tai[a,i]
	    overlapT   *= 2.0
	    LoverlapS  += overlapT
	endpardo a,i
	pardo a,i,a1,i1
	    get DLNaiai[a,i,a1,i1]
	    request RB2_aa[ksub,a,i,a1,i1]
	    Taiai[a,i,a1,i1] = Tk[ksub]*RB2_aa[ksub,a,i,a1,i1]
	    overlapT         = DLNaiai[a,i,a1,i1]*Taiai[a,i,a1,i1]
	    overlapT        *= 0.5
	    LoverlapS       += overlapT
	endpardo a,i,a1,i1
	pardo a,i,b,j
	    get DLNaibj[a,i,b,j]
	    request RB2_ab[ksub,a,i,b,j]
	    Taibj[a,i,b,j] = Tk[ksub]*RB2_ab[ksub,a,i,b,j]
	    overlapT       = DLNaibj[a,i,b,j]*Taibj[a,i,b,j]
	    LoverlapS     += overlapT
	endpardo a,i,b,j
#######################
# form (Ck,Fk+1)
	Tk[ksub] = 1.0
        RoverlapS   = 0.0
	pardo a,i
	    get DRNai[a,i]
	    request LB1_a[ksub,a,i]
	    Tai[a,i]    = Tk[ksub]*LB1_a[ksub,a,i]
	    overlapT    = DRNai[a,i]*Tai[a,i]
	    overlapT   *= 2.0
	    RoverlapS  += overlapT
	endpardo a,i
	pardo a,i,a1,i1
	    get DRNaiai[a,i,a1,i1]
	    request LB2_aa[ksub,a,i,a1,i1]
	    Taiai[a,i,a1,i1] = Tk[ksub]*LB2_aa[ksub,a,i,a1,i1]
	    overlapT         = DRNaiai[a,i,a1,i1]*Taiai[a,i,a1,i1]
	    overlapT        *= 0.5
	    RoverlapS       += overlapT
	endpardo a,i,a1,i1
	pardo a,i,b,j
	    get DRNaibj[a,i,b,j]
	    request LB2_ab[ksub,a,i,b,j]
	    Taibj[a,i,b,j] = Tk[ksub]*LB2_ab[ksub,a,i,b,j]
	    overlapT       = DRNaibj[a,i,b,j]*Taibj[a,i,b,j]
	    RoverlapS     += overlapT
	endpardo a,i,b,j
	server_barrier
	Loverlap1   = 0.0
	Roverlap1   = 0.0
	collective Loverlap1   += LoverlapS
	collective Roverlap1   += RoverlapS
#######################
# do in place sum Bk+1 -= Loverlap1 * Ck
	Tkk[qsub,ksub] = -1.0*Loverlap1
	pardo a,i
	    request LB1_a[ksub,a,i]
	    Tkai[qsub,a,i] = Tkk[qsub,ksub]*LB1_a[ksub,a,i]
	    prepare LB1_a[qsub,a,i] += Tkai[qsub,a,i]
	endpardo a,i
	pardo a,i,a1,i1
	    request LB2_aa[ksub,a,i,a1,i1]
	    Tkaiai[qsub,a,i,a1,i1] = Tkk[qsub,ksub]*LB2_aa[ksub,a,i,a1,i1]
	    prepare LB2_aa[qsub,a,i,a1,i1] += Tkaiai[qsub,a,i,a1,i1]
	endpardo a,i,a1,i1
	pardo a,i,b,j
	    request LB2_ab[ksub,a,i,b,j]
	    Tkaibj[qsub,a,i,b,j] = Tkk[qsub,ksub]*LB2_ab[ksub,a,i,b,j]
	    prepare LB2_ab[qsub,a,i,b,j] += Tkaibj[qsub,a,i,b,j]
	endpardo a,i,b,j
#######################
# do in place sum Gk+1 -= Roverlap1 * Gk
	Tkk[qsub,ksub] = -1.0*Roverlap1
	pardo a,i
	    request RB1_a[ksub,a,i]
	    Tkai[qsub,a,i] = Tkk[qsub,ksub]*RB1_a[ksub,a,i]
	    prepare RB1_a[qsub,a,i] += Tkai[qsub,a,i]
	endpardo a,i
	pardo a,i,a1,i1
	    request RB2_aa[ksub,a,i,a1,i1]
	    Tkaiai[qsub,a,i,a1,i1] = Tkk[qsub,ksub]*RB2_aa[ksub,a,i,a1,i1]
	    prepare RB2_aa[qsub,a,i,a1,i1] += Tkaiai[qsub,a,i,a1,i1]
	endpardo a,i,a1,i1
	pardo a,i,b,j
	    request RB2_ab[ksub,a,i,b,j]
	    Tkaibj[qsub,a,i,b,j] = Tkk[qsub,ksub]*RB2_ab[ksub,a,i,b,j]
	    prepare RB2_ab[qsub,a,i,b,j] += Tkaibj[qsub,a,i,b,j]
	endpardo a,i,b,j
    server_barrier
    enddo ksub
    server_barrier

#######################
# scale Ck+1 = 1/(Bk+1,Fk+1)
#######################
    normS   = 0.0
    Tk[qsub] = 1.0
    pardo a,i
	request RB1_a[qsub,a,i]
	request LB1_a[qsub,a,i]
	normT  = LB1_a[qsub,a,i]*RB1_a[qsub,a,i]
	normT *= 2.0
	normS += normT
    endpardo a,i
    pardo a,i,a1,i1
	request RB2_aa[qsub,a,i,a1,i1]
	request LB2_aa[qsub,a,i,a1,i1]
	normT  = LB2_aa[qsub,a,i,a1,i1]*RB2_aa[qsub,a,i,a1,i1]
	normT *= 0.5
	normS += normT
    endpardo a,i,a1,i1
    pardo a,i,b,j
	request RB2_ab[qsub,a,i,b,j]
	request LB2_ab[qsub,a,i,b,j]
	normT  = LB2_ab[qsub,a,i,b,j]*RB2_ab[qsub,a,i,b,j]
	normS += normT
    endpardo a,i,b,j
    server_barrier
    norm1   = 0.0
    collective norm1   += normS
    etemp = 1.0
    if norm1 < 0.0
	etemp = -1.0
    endif
    norm1 *= etemp
    norm2 = (norm1)**(-0.5)
#    if norm1 < (10.0)**(-12.0)
#	norm2 = 1.0
#    endif
#######################
    pardo a,i
        prepare RB1_a[qsub,a,i] *= norm2
    endpardo a,i
    pardo a,i,a1,i1
        prepare RB2_aa[qsub,a,i,a1,i1] *= norm2
    endpardo a,i,a1,i1
    pardo a,i,b,j
        prepare RB2_ab[qsub,a,i,b,j] *= norm2
    endpardo a,i,b,j
    server_barrier
#
    norm2 *= etemp
#
    pardo a,i
        prepare LB1_a[qsub,a,i] *= norm2
    endpardo a,i
    pardo a,i,a1,i1
        prepare LB2_aa[qsub,a,i,a1,i1] *= norm2
    endpardo a,i,a1,i1
    pardo a,i,b,j
        prepare LB2_ab[qsub,a,i,b,j] *= norm2
    endpardo a,i,b,j
    server_barrier
enddo qsub
server_barrier
#
ENDPROC all_GS

PROC update_vecs
#
server_barrier

server_barrier
call move_by_one_RK1
call move_by_one_LK1

call move_by_one_RK2aa
call move_by_one_LK2aa

call move_by_one_RK2ab
call move_by_one_LK2ab
server_barrier

call form_new_RK1
call form_new_LK1

call form_new_RK2aa
call form_new_LK2aa

call form_new_RK2ab
call form_new_LK2ab

call form_residual_R1
call form_residual_R2aa
call form_residual_R2ab

server_barrier
call update_RB1
call update_LB1

call update_RB2aa
call update_LB2aa

call update_RB2ab
call update_LB2ab

server_barrier
sum1 = 0.0
pardo a,i,kstate
    request cRk1_a[kstate,a,i]
    Tkai[kstate,a,i] = cRk1_a[kstate,a,i]
    etemp = Tkai[kstate,a,i] * cRk1_a[kstate,a,i]
    sum1 += etemp
endpardo a,i,kstate

pardo a,i,a1,i1,kstate
    request cRk2_aa[kstate,a,i,a1,i1]
    Tkaiai[kstate,a,i,a1,i1] = cRk2_aa[kstate,a,i,a1,i1]
    etemp = Tkaiai[kstate,a,i,a1,i1]*cRk2_aa[kstate,a,i,a1,i1]
    sum1 += etemp
endpardo a,i,a1,i1,kstate

pardo a,i,b,j,kstate
    request cRk2_ab[kstate,a,i,b,j]
    Tkaibj[kstate,a,i,b,j] = cRk2_ab[kstate,a,i,b,j]
    etemp = Tkaibj[kstate,a,i,b,j]*cRk2_ab[kstate,a,i,b,j]
    sum1 += etemp
endpardo a,i,b,j,kstate
server_barrier
sum2 = 0.0
collective sum2 += sum1
etemp3 = (scalar)eom_roots
rms_orb_conv = (sum2/etemp3)**(0.5)
server_barrier
assert_same rms_orb_conv
#
ENDPROC update_vecs

PROC form_guess

server_barrier

pardo a,i,ksub
    request RB1_a[ksub,a,i]
    Tkai[ksub,a,i]  = RB1_a[ksub,a,i]
    Tkai[ksub,a,i] *= 0.5
    prepare LB1_a[ksub,a,i] = Tkai[ksub,a,i]
endpardo a,i,ksub

pardo a,i,kstate
    request R1k1_a[kstate,a,i]
    Tkai[kstate,a,i]  = R1k1_a[kstate,a,i]
    Tkai[kstate,a,i] *= 0.5
    prepare L1k1_a[kstate,a,i] = Tkai[kstate,a,i]
endpardo a,i,kstate


pardo a,i,kstate
    prepare R0k1_a[kstate,a,i] = 0.0
endpardo a,i,kstate

pardo a,i,kstate
    prepare cRk1_a[kstate,a,i] = 0.0
endpardo a,i,kstate

pardo a,i,kstate
    prepare L0k1_a[kstate,a,i] = 0.0
endpardo a,i,kstate

pardo a,i,kstate
    prepare cLk1_a[kstate,a,i] = 0.0
endpardo a,i,kstate

pardo a,i,a1,i1,ksub
    prepare RB2_aa[ksub,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,ksub

pardo a,i,a1,i1,ksub
    prepare LB2_aa[ksub,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,ksub

pardo a,i,a1,i1,kstate
    prepare R0k2_aa[kstate,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,kstate

pardo a,i,a1,i1,kstate
    prepare R1k2_aa[kstate,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,kstate

pardo a,i,a1,i1,kstate
    prepare cRk2_aa[kstate,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,kstate

pardo a,i,a1,i1,kstate
    prepare L0k2_aa[kstate,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,kstate

pardo a,i,a1,i1,kstate
    prepare L1k2_aa[kstate,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,kstate

pardo a,i,a1,i1,kstate
    prepare cLk2_aa[kstate,a,i,a1,i1] = 0.0
endpardo a,i,a1,i1,kstate

pardo a,i,b,j,ksub
    prepare RB2_ab[ksub,a,i,b,j] = 0.0
endpardo a,i,b,j,ksub

pardo a,i,b,j,ksub
    prepare LB2_ab[ksub,a,i,b,j] = 0.0
endpardo a,i,b,j,ksub

pardo a,i,b,j,kstate
    prepare R0k2_ab[kstate,a,i,b,j] = 0.0
endpardo a,i,b,j,kstate

pardo a,i,b,j,kstate
    prepare R1k2_ab[kstate,a,i,b,j] = 0.0
endpardo a,i,b,j,kstate

pardo a,i,b,j,kstate
    prepare cRk2_ab[kstate,a,i,b,j] = 0.0
endpardo a,i,b,j,kstate

pardo a,i,b,j,kstate
    prepare L0k2_ab[kstate,a,i,b,j] = 0.0
endpardo a,i,b,j,kstate

pardo a,i,b,j,kstate
    prepare L1k2_ab[kstate,a,i,b,j] = 0.0
endpardo a,i,b,j,kstate

pardo a,i,b,j,kstate
    prepare cLk2_ab[kstate,a,i,b,j] = 0.0
endpardo a,i,b,j,kstate

server_barrier

ENDPROC form_guess
#
#---------------------------------------------------------------
#
proc norm_lr_vec
#
do ksub
#######################
    normS   = 0.0
    Tk[ksub] = 1.0
    pardo a,i
	request RB1_a[ksub,a,i]
	Tkai[ksub,a,i] = RB1_a[ksub,a,i]
	normT  = Tkai[ksub,a,i]*RB1_a[ksub,a,i]
	normT *= 2.0
	normS += normT
    endpardo a,i
    pardo a,i,a1,i1
	request RB2_aa[ksub,a,i,a1,i1]
	Tkaiai[ksub,a,i,a1,i1] = RB2_aa[ksub,a,i,a1,i1]
	normT  = Tkaiai[ksub,a,i,a1,i1]*RB2_aa[ksub,a,i,a1,i1]
	normT *= 0.5
	normS += normT
    endpardo a,i,a1,i1

    pardo a,i,b,j
	request RB2_ab[ksub,a,i,b,j]
	Tkaibj[ksub,a,i,b,j] = RB2_ab[ksub,a,i,b,j]
	normT  = Tkaibj[ksub,a,i,b,j]*RB2_ab[ksub,a,i,b,j]
	normS += normT
    endpardo a,i,b,j
    server_barrier
    norm1   = 0.0
    collective norm1   += normS
    norm2 = (norm1)**(-0.5)
#######################

    pardo a,i
        prepare RB1_a[ksub,a,i] *= norm2
    endpardo a,i
    pardo a,i,a1,i1
        prepare RB2_aa[ksub,a,i,a1,i1] *= norm2
    endpardo a,i,a1,i1
    pardo a,i,b,j
        prepare RB2_ab[ksub,a,i,b,j] *= norm2
    endpardo a,i,b,j

    norm2 = (norm1)**(0.5)

    pardo a,i
        prepare LB1_a[ksub,a,i] *= norm2
    endpardo a,i
    pardo a,i,a1,i1
        prepare LB2_aa[ksub,a,i,a1,i1] *= norm2
    endpardo a,i,a1,i1
    pardo a,i,b,j
        prepare LB2_ab[ksub,a,i,b,j] *= norm2
    endpardo a,i,b,j
enddo ksub
#
endproc norm_lr_vec

proc form_r0
#
do kstate
    sum1 = 0.0
    sum2 = 0.0
    sum3 = 0.0
    pardo a,i
        request RB1_a[kstate,a,i]
        Tk[kstate] = 1.0
        Tai[a,i] = Tk[kstate]*RB1_a[kstate,a,i]
        etemp  = LHBAR_ia[i,a]*Tai[a,i]
        etemp *= 2.0
        sum1  += etemp
    endpardo a,i
    pardo a,i,a1,i1
        request VSpipi[a,i,a1,i1]
        request RB2_aa[kstate,a,i,a1,i1]
        Tk[kstate] = 1.0
        Taiai[a,i,a1,i1] = Tk[kstate]*RB2_aa[kstate,a,i,a1,i1]
        etemp  = VSpipi[a,i,a1,i1]*Taiai[a,i,a1,i1]
        etemp *= 0.5
        sum2  += etemp
    endpardo a,i,a1,i1

    pardo a,i,b,j
        request Vpiqj[a,i,b,j]
        request RB2_ab[kstate,a,i,b,j]
        Tk[kstate] = 1.0
        Taibj[a,i,b,j] = Tk[kstate]*RB2_ab[kstate,a,i,b,j]
        etemp = Vpiqj[a,i,b,j]*Taibj[a,i,b,j]
        sum3 += etemp
    endpardo a,i,b,j
    server_barrier
    etemp1 = 0.0
    etemp2 = 0.0
    etemp3 = 0.0
    collective etemp1 += sum1
    collective etemp2 += sum2
    collective etemp3 += sum3

    etemp4  = etemp1
    etemp4 += etemp2
    etemp4 += etemp3

    omega = SEk0[kstate]
    etemp = (etemp4/omega)
    normT = 1.0
    normT += etemp**2.0
    normS = 1.0/(normT)**0.5
    r0 = etemp*normS
    SR0[kstate] = r0
enddo kstate
endproc form_r0

    PROC form_t1_secondorder

    print "forming approximate second-order T1 amplitudes"
    server_barrier

#    pardo a1,b,i1,a
#	request Vaaai[b,a,a1,i1]
#	do i
#	    request T2ab[b,i,a1,i1]
#	    request T2aa[b,i,a1,i1]
#
#	    Taibj[b,i,a1,i1]  = T2ab[b,i,a1,i1]
#	    T1aibj[b,i,a1,i1] = T2aa[b,i,a1,i1]
#	    Taibj[b,i,a1,i1] += T1aibj[b,i,a1,i1]
#
#	    Tai[a,i] = Vaaai[b,a,a1,i1]*Taibj[b,i,a1,i1]
#
#	    prepare Mck_a[a,i] += Tai[a,i]
#	enddo i
#    endpardo a1,b,i1,a

    pardo a, a1, a2, i1 

        request Vaaai[a1,a,a2,i1]

        do i
            request T2ab[a1,i,a2,i1]
            request T2ab[a2,i,a1,i1]

            Taibj[a1,i,a2,i1]  = T2ab[a1,i,a2,i1]
            Taibj[a1,i,a2,i1] *= 2.0
            T1aibj[a1,i,a2,i1] = T2ab[a2,i,a1,i1]
            Taibj[a1,i,a2,i1] -= T1aibj[a1,i,a2,i1]

            Tai[a,i] = Vaaai[a1,a,a2,i1]*Taibj[a1,i,a2,i1]

            prepare Mck_a[a,i] += Tai[a,i]
        enddo i
    endpardo a, a1, a2, i1

    pardo a1,i,a2,i1

        request T2ab[a1,i,a2,i1]
        request T2ab[a2,i,a1,i1]

        Taibj[a1,i,a2,i1]  = T2ab[a1,i,a2,i1]
        Taibj[a1,i,a2,i1] *= 2.0
        T1aibj[a1,i,a2,i1] = T2ab[a2,i,a1,i1]
        Taibj[a1,i,a2,i1] -= T1aibj[a1,i,a2,i1]

        Tai[a1,i] = Fock_a[a2,i1]*Taibj[a1,i,a2,i1]

        prepare Mck_a[a1,i] += Tai[a1,i]

    endpardo a1,i,a2,i1

    pardo a2,i2,i,i1 

        request Vpiqj[a2,i2,i,i1]

        do a1

            request T2ab[a1,i1,a2,i2]
            request T2ab[a1,i2,a2,i1]

            Taibj[a1,i1,a2,i2]  = T2ab[a1,i1,a2,i2]
            Taibj[a1,i1,a2,i2] *= 2.0
            T1aibj[a1,i1,a2,i2] = T2ab[a1,i2,a2,i1]
            Taibj[a1,i1,a2,i2] -= T1aibj[a1,i1,a2,i2]

            Tai[a1,i] = Vpiqj[a2,i2,i,i1]*Taibj[a1,i1,a2,i2]
            Tai[a1,i] *= -1.0

            prepare Mck_a[a1,i] += Tai[a1,i]
        enddo a1
    endpardo a2,i2,i,i1

    server_barrier
# t1(2) guess
    esum = 0.0
	pardo a,i
	    request Mck_a[a,i]
	    Tai[a,i] = Mck_a[a,i]
	    execute energy_denominator_rhf Tai[a,i] SFock_a
	    prepare t1a_old[a,i] = Tai[a,i]
	    etemp = Fock_a[a,i]*tai[a,i]
	    esum += etemp
	endpardo a,i
    server_barrier
    second_order_singles = 0.0
    collective second_order_singles += esum
    print second_order_singles
    eold = second_order_singles
    server_barrier

    do kiter
	print " "
	print kiter
	server_barrier

	pardo a,i
	    Tai[a,i] = 0.0
	    prepare t1a_new[a,i] = Tai[a,i]
	endpardo a,i
	server_barrier

	pardo a,i
	    Tai[a,i] = 0.0
	    do b
		do j
		    request Viaai[i,a,b,j]
		    request t1a_old[b,j]

		    T1ai[a,i] = Viaai[i,a,b,j]*t1a_old[b,j]
		    Tai[a,i] += T1ai[a,i]
		enddo j
	    enddo b
	    do a1
		do i1
		    request Vaaii[a,a1,i1,i]
		    request Viaai[i1,a1,a,i]
		    request t1a_old[a1,i1]
		    Tpppp[i1,a1,a,i]  = Vaaii[a,a1,i1,i]
		    Tpppp[i1,a1,a,i] -= Viaai[i1,a1,a,i]

		    T2ai[a,i] = Tpppp[i1,a1,a,i]*t1a_old[a1,i1]
		    Tai[a,i] -= t2ai[a,i]

		enddo i1
	    enddo a1

	    request Mck_a[a,i]
	    T1ai[a,i] = Mck_a[a,i]

	    Tai[a,i] += T1ai[a,i]

	    prepare t1a_new[a,i] += Tai[a,i]
	endpardo a,i
	server_barrier
	esum = 0.0
	pardo a,i
	    request t1a_new[a,i]
	    Tai[a,i] = t1a_new[a,i]
	    execute energy_denominator_rhf Tai[a,i] SFock_a
	    prepare t1a_old[a,i] = Tai[a,i]
	    T1ai[a,i] = Tai[a,i]
	    etemp = tai[a,i]*t1ai[a,i]
	    esum += etemp
	endpardo a,i
	server_barrier
	norm = 0.0
	collective norm += esum
	etemp2 = norm - eold
	ediff = (etemp2**2.0)**0.5
	print ediff

	if ediff < cc_conv
	    exit
        endif

	eold = norm
	server_barrier
    enddo kiter

	esum = 0.0
	pardo a,i
	    request t1a_old[a,i]
	    etemp = t1a_old[a,i]*Fock_a[a,i]
	    esum += etemp
	endpardo a,i
	server_barrier
	second_order_singles = 0.0
	collective second_order_singles += esum
	print second_order_singles
#
    ENDPROC form_t1_secondorder

#
#-------------------------------------------------------------------------
#
#
# -----------------
#  MAIN
# -----------------
normcrit = 0.0000000000001
ZERO = 0.0
one = 1.0
root = 0
subspc = eom_subspc
roots = eom_roots

# Initilize the vaiable to zmax and imax (memory of ERD and OED).
zmax = 0.0
imax = 0.0
execute compute_int_scratchmem_lowmem oed_ovl zmax imax

print " "
print "-- Parallel left-right EE-EOM-MCPT(2) program"
print "-- ....... "
print "-- Subspace collapse non-symmetric davidson update"
print "-- J. Comp. Chem. 2001, 22, 1574-1589"
print "-- Written by Jason N. Byrd, 2015"
print " "
server_barrier
CALL READ_AMP
call tran_uhf
server_barrier
#call form_t1_secondorder
#server_barrier
call form_H_MCPT

call form_diag

iguess=0
print "Assuming 0.0 for initial R2 vectors"
call form_guess

do kstate
    SEkold[kstate] = 0.0
enddo kstate

do kiter
    print " "
    print kiter

    call form_G
    call diag_G
    call update_vecs
    call all_GS

    etemp = 0.0
    etemp2 = 0.0
    do kstate
        etemp1 = SEk0[kstate]
        etemp2 = SEkold[kstate]
        etemp1 -= etemp2
        etemp2 = etemp1**2.0
        etemp += etemp2
    enddo kstate
    etemp3 = (scalar)eom_roots
    rms_e_conv = (etemp/etemp3)**0.5
    do kstate
        SEkold[kstate] = SEk0[kstate]
    enddo kstate
    print rms_e_conv
    print rms_orb_conv
    server_barrier
    assert_same rms_e_conv
    if rms_e_conv < eom_tol
        exit
    endif
    server_barrier
enddo kiter

print " "
print "EOM-MCPT has converged"

allocate contiguous EOM_EE_Energy[1:eom_roots]
allocate contiguous EOM_EE_eV[1:eom_roots]

call norm_lr_vec
call form_r0

do kstate
    print " "
    print "--------"
    print kstate

    omega  = SEk0[kstate]

    etemp = omega
    etemp *=27.2113961

    r0 = SR0[kstate]

    EOM_EE_Energy[kstate:kstate] = omega
    EOM_EE_eV[kstate:kstate] = etemp
    print EOM_EE_Energy[kstate:kstate]
    print EOM_EE_eV[kstate:kstate]
    print " "
    print r0

enddo kstate

server_barrier

endSIAL R_EE_EOM_CCSD_RHF
