  import "rccsd_rhf_defs.sialx"
                           SIAL CCSD_RHF_SV1
#
#-------------------------------------------------------------------------------
#
# Declare indeces 
# --------------- 
#
      index   kiter  = 1: cc_iter   
      index   kbeg   = 1: scf_beg # Change to cc_beg 
      index   korder = 1: scf_hist # Change to cc_hist 
      index   ixyz   = 1: 3
      index   kone   = 1: 1
      index   kdiis  = 1: 30 
      index   k1diis = 1: 30 
      index   jdiis  = 1: 30 
      index   j1diis = 1: 30 
      index      D1  = 1: 30
      index      D2  = 1: 30 
#
      aoindex mu     = 1: norb 
      aoindex nu     = 1: norb
      aoindex lambda = 1: norb
      aoindex sigma  = 1: norb
#
      moaindex i = baocc: eaocc
      moaindex i1= baocc: eaocc
      moaindex i2= baocc: eaocc
      moaindex i3= baocc: eaocc
#
      moaindex a = bavirt: eavirt
      moaindex a1= bavirt: eavirt
      moaindex a2= bavirt: eavirt
      moaindex a3= bavirt: eavirt
#
      moaindex j = baocc: eaocc
      moaindex j1= baocc: eaocc
      moaindex j2= baocc: eaocc
      moaindex j3= baocc: eaocc
#
      moaindex b = bavirt: eavirt
      moaindex b1= bavirt: eavirt
      moaindex b2= bavirt: eavirt
      moaindex b3= bavirt: eavirt
#
      moaindex p = baocc: eavirt
      moaindex p1= baocc: eavirt
      moaindex p2= baocc: eavirt
      moaindex p3= baocc: eavirt
#
      moaindex q = baocc: eavirt
      moaindex q1= baocc: eavirt
      moaindex q2= baocc: eavirt
      moaindex q3= baocc: eavirt
# 
# Declare static arrays 
# --------------------- 
#

      static zz[mu,nu] 
#
# local arrays used for data storage
# ---------------------------------- 
#
     local Liiai[i2,i,a,i1] 
     local L1iiai[i,i1,a2,i2] 
     local L2iiai[i2,i1,a2,i]  
     local L3iiai[i,i1,a,i2]  
     local L4iiai[i2,i1,a,i]  
     local Laiai[a,i,a2,i1] 
     local L1aiai[a,i,a1,i2] 
     local L2aiai[a1,i1,a2,i] 
     local L3aiai[a2,i1,a,i2] 
     local L4aiai[a1,i,a2,i1] 
     local Laaai[a,a2,a1,i] 
#
     local Ljjbj[j2,j,b,j1] 
     local Lbjbj[b,j,b2,j1] 
     local L1bjbj[b,j,b1,j2] 
     local L2bjbj[b1,j1,b2,j] 
     local L3bjbj[b2,j1,b,j2] 
     local L4bjbj[b1,j,b2,j1] 
     local Lbbbj[b,b2,b1,j] 
#
     local Laijj[a,i,j1,j] 
     local Laibj[a,i,b1,j] 
     local L1aibj[a1,i,b,j] 
     local L2aibj[a,i,b,j2] 
     local L3aibj[a,i1,b,j] 
     local L4aibj[a,i,b1,j] 
     local Liibj[i1,i,b,j] 
     local L1iibj[i,i1,b,j] 
     local Lbbai[b,b1,a,i] 
     local Laabj[a,a1,b,j] 
     local LLaiai[a,i,a1,i1] 
     local Lxiai[lambda,i,a1,i1] 
     local LLbjbj[b,j,b1,j1] 
     local Lxjbj[lambda,j,b1,j1] 
     local LLaibj[a,i,b,j] 
     local Lxibj[lambda,i,b,j] 
     local L1xixi[mu,i,nu,i1]  
     local L2xixi[nu,i1,mu,i]  
     local L1xjxj[mu,j,nu,j1]  
     local L2xjxj[nu,j1,mu,j]  
     local L1xixj[mu,i,nu,j]  
     local Laiii[a,i,i2,i1] 
     local L1aiii[a1,i2,i,i1] 
     local Lbjjj[b,j,j2,j1] 
     local L1bjjj[b1,j2,j,j1] 
     local Ljjai[a,i,j,j1] 
#
     local LWaaai[a2,a,a1,i1] 
     local LWbbbj[b2,b,b1,j1] 
     local LWbbai[b1,b,a,i] 
     local LWaabj[a1,a,b,j] 
     local LXbbai[b1,b,a1,i1] 
     local LXaabj[a1,a,b1,j1] 
     local LWaiai[a2,i,a,i1] 
     local LWbjbj[b2,j,b,j1] 
     local LWaibj[a,i,b,j] 
     local LWiaai[i1,a,a2,i]
     local LWjbai[j,b,a,i]
#
# Arrays used in the DIIS 
# -----------------------
#
      int Idiis_order
      distributed Dai[a,i,kdiis]
      distributed Eai[a,i,jdiis]
      served D0ai[a,i]

      static BB[d1,d2]
      temp tbb[d1,d2]
      distributed DIST_BB[d1,d2]
      scalar n1
      scalar n2
      scalar worder
      int Iorder
#
# Arrays used in transformation for AO2 algorithm
# -----------------------------------------------
#
      temp Txixj[mu,i,nu,j]
#
# End Arrays used in transformation for AO2 algorithm
# --------------------------------------------------- 
#
# Declare temporary arrays 
# ------------------------ 
#
      temp Txjjx[mu,j,j1,nu]
      temp Txijx[mu,i,j,nu]
      temp Txqii[mu,q,i,i1]
      temp Tqqii[q,q1,i,i1]
      temp Txpjj[mu,p,j,j1]
      temp Txqjj[mu,q,j,j1]
      temp Tppjj[p,p1,j,j1]
      temp Tqqjj[q,q1,j,j1]
      temp Tjxqj[j,mu,q,j1]
      temp Tjqqj[j,q,q1,j1]
      temp Tixqj[i,mu,q,j]
      temp Tipqj[i,p,q,j]
#
      temp Taiai[p,i,p1,i1]
      temp T1aiai[p,i,p1,i1]
      temp T2aiai[p,i,p1,i1]
      temp T3aiai[p,i,p1,i1]
      temp Tbjbj[q,j,q1,j1]
      temp T1bjbj[q,j,q1,j1]
      temp T2bjbj[q,j,q1,j1]
      temp T3bjbj[q,j,q1,j1]
      temp Taibj[p,i,q,j]
      temp Taibj1[p,i,q,j]
      temp Taibj2[p,i,q,j]
      temp T1aibj[p,i,q,j]
      temp T2aibj[p,i,q,j]
      temp T3aibj[p,i,q,j]
      temp T4aibj[p,i,q,j]
      temp T5aibj[p,i,q,j]
#
      temp Txxxp[mu,nu,lambda,i]
      temp Txxxq[mu,nu,lambda,j]
      temp Txxpp[mu,nu,p1,i]
      temp Txxqq[mu,nu,q1,j]
      temp Txppp[mu,p2,p1,i]
      temp Txqpp[mu,q,p1,i]
      temp Txqqq[mu,q2,q1,j]
      temp Txpqq[mu,p,q1,j]
      temp Tpppp[p3,p2,p1,p]
      temp Tqqqq[q3,q2,q1,q]
      temp Tppqq[p1,p,q1,j]
      temp Tqqpp[q1,q,p1,i]
      temp Tixxx[i,mu,nu,sigma] 
      temp Tipxx[i,p,nu,sigma] 
      temp Tipqx[i,p,q,sigma] 
      temp Tipqq[i,p,q,q1] 
      temp Txiai[lambda,i,a1,i1] 
      temp Txjbj[lambda,j,b1,j1] 
      temp Txibj[lambda,i,b1,j1] 
#
      temp tmp1_aiai[a,i,a1,i1] 
      temp tmp2_aiai[a,i,a1,i1] 
      temp tmp3_aiai[a,i,a1,i1] 
      temp tmp1_aibj[a,i,b,j] 
      temp tmp2_aibj[a,i,b,j] 
#
      temp Tai[a,i] 
      temp T1ai[a,i] 
      temp T2ai[a,i] 
      temp T3ai[a,i] 
      temp Tbj[b,j] 
      temp T1bj[b,j] 
      temp T2bj[b,j] 
#
      temp Tpx[p,nu]
      temp Tpx1[p,nu]
      temp Taa[a,a1] 
      temp Taa1[a,a1] 
      temp T1aa[a,a1] 
      temp T1bb[b,b1] 
      temp Tae_a[a,a1] 
      temp Tae_b[b,b1] 
#
      temp Tia[i,a] 
      temp T1ia[i,a] 
      temp Tjb[j,b] 
      temp T1jb[j,b] 
      temp Tme_a[i,a] 
      temp Tme_b[j,b] 
#
      temp Tii[i,i1] 
      temp Tii1[i,i1] 
      temp T1ii[i,i1] 
      temp T2ii[i,i1] 
      temp Tjj[j,j1] 
      temp T1jj[j,j1] 
      temp Tmi_a[i,i1] 
      temp Tmi_b[j,j1] 
#
      temp T1pppp[p,p1,p2,p3] 
      temp T1qqqq[q,q1,q2,q3] 
      temp Taiii[a,i,i1,i2] 
      temp T1aiii[a,i,i1,i2] 
#
      temp  Tiiii[i,i1,i2,i3] 
      temp T1iiii[i,i1,i2,i3] 
#
      temp  Tjjjj[j,j1,j2,j3] 
      temp T1jjjj[j,j1,j2,j3] 
      temp  Tbjjj[b,j,j1,j2] 
      temp T1bjjj[b,j,j1,j2] 
#
      temp  Tiijj[i,i1,j2,j3] 
      temp T1iijj[i,i1,j2,j3] 
#
      temp  tmp_aa[a,a1] 
      temp tmp1_aa[a,a1] 
      temp  tmp_ii[i,i1] 
      temp tmp1_ii[i,i1] 
#
      temp  Tiiai[i,i1,a,i2] 
      temp T1iiai[i,i1,a,i2] 
#
      temp  tmp_bb[b,b1] 
      temp tmp1_bb[b,b1] 
      temp  tmp_jj[j,j1] 
      temp tmp1_jj[j,j1] 
#
      temp  Tjjbj[j,j1,b,j2] 
      temp T1jjbj[j,j1,b,j2] 
# 
      temp T1aaai[a,a1,a2,i]  
      temp T2aaai[a,a1,a2,i]  
      temp Taaaa[a,a1,a2,a3]  
      temp T1aaaa[a,a1,a2,a3]  
#
      temp T1bbbj[b,b1,b2,j]  
      temp T2bbbj[b,b1,b2,j]  
      temp Tbbbb[b,b1,b2,b3]  
      temp T1bbbb[b,b1,b2,b3]  
#
      temp Taabb[a,a1,b,b1]  
      temp T1aabb[a,a1,b,b1]  
#
      temp R1aiai[a,i,a1,i1] 
      temp R2aiai[a,i,a1,i1] 
      temp R3aiai[a,i,a1,i1] 
      temp R4aiai[a,i,a1,i1] 
      temp R1bjbj[b,j,b1,j1] 
      temp R2bjbj[b,j,b1,j1] 
      temp R3bjbj[b,j,b1,j1] 
      temp R4bjbj[b,j,b1,j1] 
      temp R1aibj[a,i,b,j] 
      temp R2aibj[a,i,b,j] 
      temp R3aibj[a,i,b,j] 
      temp R4aibj[a,i,b,j] 
#
      temp T1iaai[i,a,a1,i1] 
      temp T2iaai[i,a,a1,i1] 
      temp T1jbbj[j,b,b1,j1] 
      temp T2jbbj[j,b,b1,j1] 
      temp T1iabj[i,a,b,j] 
      temp T2iabj[i,a,b,j] 
      temp Tjjpp[j,j1,p,p1] 
      temp T1jjpp[j,j1,p,p1] 
      temp T2jjpp[j,j1,p,p1] 
      temp  Tiiqq[i,i1,q,q1] 
      temp T1iiqq[i,i1,q,q1] 
      temp T2iiqq[i,i1,q,q1] 
      temp  Tjjai[j,j1,a,i] 
      temp T1jjai[j,j1,a,i] 
      temp T2jjai[j,j1,a,i] 
      temp  Tiibj[i,i1,b,j] 
      temp T1iibj[i,i1,b,j] 
      temp T2iibj[i,i1,b,j] 
      temp  Tjbai[j,b,a,i]  
      temp T1jbai[j,b,a,i]  
      temp T2jbai[j,b,a,i]  
      temp  Taijj[a,i,j,j1] 
      temp T1aijj[a,i,j,j1] 
      temp Tqqip[a,i,b,b1]  
#
      temp tqx[q,mu] 
      temp t1qx[q,mu] 
      temp txi[mu,i] 
      temp t1xi[mu,i] 
      temp txj[mu,j] 
      temp t1xj[mu,j] 
#
# Declare served arrays 
# -------------------------- 
#
      served VSpipi[p1,i,p,i1]
      served Viaai[i,a1,a,i1]
      served Vaaii[a,a1,i,i1]
      served Vaaai[a2,a,a1,i]
      served Vpiqj[p,i,q,j]

      served T2old_aa[a,i,a1,i1]
      served T2old_ab[a,i,b,j]
#
      served Tau_ab[a,i,b,j]
      served Taup_aa[a,i,a1,i1]
      served Taup_ab[a,i,b,j]
#
      served t1a_old[a,i]
      served t1a_new[a,i]
      served Mck_a[a,i]
#
      temp   DAOINT[mu,nu]
      static Sxyz[ixyz]
      static dipole[ixyz]
      static NucDip[ixyz]
      static Dip02[ixyz]
      served Dxx_02[mu,nu]
      served Dpx_02[p,nu]
      temp Txx[mu,nu]
      temp Txx1[mu,nu]
      temp T1xx[mu,nu]
      temp Tpq[p,q]
#
# Declare served arrays 
# --------------------- 
#
      scalar ncount1
      scalar ncount2
      scalar jcount 
      scalar kcount 
      scalar niter 
      scalar diis_start 
      scalar diis_order  
      scalar temp_order
      scalar zero
      scalar one
      scalar two
      scalar five
      scalar six
      scalar seven
#
# Arrays needed for AOLADDER contribution
# ---------------------------------------
#
     temp Zab[lambda,i,b,j]
     temp Yab[lambda,i,mu,j]
     temp Y1ab[lambda,i,mu,j]
#
     temp TXaiai[a,i,nu,i1]
     temp Taixi[a,i,nu,i1]   
     temp TYaiai[a,i,a1,i1]
     temp TY1aiai[a,i,a1,i1]
     temp TXbjbj[b,j,nu,j1]
     temp Tbjxj[b,j,nu,j1]
     temp TYbjbj[b,j,b1,j1]
     temp TY1bjbj[b,j,b1,j1]
     temp TXaibj[a,i,nu,j]
     temp TZaibj[a,i,nu,j]
     temp Taixj[a,i,nu,j]
     temp T1aixj[a,i,nu,j]
     temp TYaibj[a,i,b,j]
#
     served TAO_ab[lambda,i,sigma,j]
     served T2AO_ab[lambda,i,sigma,j]
     served t1a_ax[a,mu] 
     served t1a_xi[mu,i] 
     served t1b_xj[mu,j] 
     served TDaixj[a,i,nu,j]
     local LDaixj[a,i,nu,j] 
#
      temp aoint[mu,nu,lambda,sigma]
      temp Txixi[mu,i1,lambda,i]
      temp Txxii[mu,nu,i1,i]
      temp Tixxi[i1,nu,lambda,i]
      temp Txipi[mu,i,p,i1]
      temp T1xipi[mu,i,p,i1]
      temp Tpipi[p1,i,p,i1]
      temp T1pipi[p1,i,p,i1]
      temp Tixai[i,mu,a,i1]
      temp Txaii[mu,a,i,i1]
      temp Tiaai[i,a1,a,i1]
      temp Taaii[a,a1,i,i1]
      temp Txaai[mu,a1,a,i]
      temp Taaai[a2,a,a1,i]
      temp Txxai[mu,nu,a,i]
      temp T1xaai[mu,a1,a,i] 
      temp T1xxxi[mu,nu,lambda,i]  
      temp T1xixi[mu,i,nu,i1]
      temp Txiix[mu,i,i1,nu]
      temp Txpii[mu,p,i,i1]
      temp Tppii[p,p1,i,i1]
      temp Tixpi[i,mu,p,i1]
      temp Tippi[i,p,p1,i1]
#
      local Lxxxi[mu,nu,lambda,i]
      local Lxxai[mu,nu,a,i] 
      local Lxaai[mu,a1,a,i] 
#
# Declare scalars 
# --------------- 
#
      scalar etemp
      scalar esum
      scalar esuma
      scalar esumb
      scalar esumab
      scalar dsum
      scalar dold
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar enew 
      scalar eold 
      scalar ecrit 
      scalar ediff 
      scalar escr
      scalar mp2_energy
      scalar restart
      scalar norm
      scalar AbsDip
#
#    ------------------------------------------------------------------------ 
# AA t2 amps
    PROC T2oldaa
      PARDO a, i, b, j 
            REQUEST                     T2old_ab[a,i,b,j]  
            REQUEST                     T2old_ab[a,j,b,i]  
            taiai[a,i,b,j]            = T2old_ab[a,i,b,j] 
            t1aiai[a,i,b,j]           = T2old_ab[a,j,b,i] 
            taiai[a,i,b,j]           -= t1aiai[a,i,b,j] 
            PREPARE T2old_aa[a,i,b,j] = taiai[a,i,b,j] 
      ENDPARDO a, i, b, j 
    server_barrier
#
    ENDPROC T2oldaa
#
    PROC form_Mck_a

    pardo a,i
        Tai[a,i] = 0.0
	prepare Mck_a[a,i] = Tai[a,i]
    endpardo a,i
    server_barrier

    pardo a1,b,i1,a
	request Vaaai[b,a,a1,i1]
	do i
	    request T2old_ab[b,i,a1,i1]
	    request T2old_aa[b,i,a1,i1]

	    Taibj[b,i,a1,i1]  = T2old_ab[b,i,a1,i1]
	    T1aibj[b,i,a1,i1] = T2old_aa[b,i,a1,i1]
	    Taibj[b,i,a1,i1] += T1aibj[b,i,a1,i1]

	    Tai[a,i] = Vaaai[b,a,a1,i1]*Taibj[b,i,a1,i1]
	    prepare Mck_a[a,i] += Tai[a,i]
	enddo i
    endpardo a1,b,i1,a

    pardo a1,i1,j,i
        request Vpiqj[a1,i1,i,j]
	do a
	    request T2old_ab[a,j,a1,i1]
	    request T2old_aa[a,j,a1,i1]

	    Taibj[a,j,a1,i1]  = T2old_ab[a,j,a1,i1]
	    T1aibj[a,j,a1,i1] = T2old_aa[a,j,a1,i1]
	    Taibj[a,j,a1,i1] += T1aibj[a,j,a1,i1]

	    Tai[a,i] = Vpiqj[a1,i1,i,j]*Taibj[a,j,a1,i1]
	    Tai[a,i] *= -1.0
	    prepare Mck_a[a,i] += Tai[a,i]
	enddo a
    endpardo a1,i1,j,i

    server_barrier

    ENDPROC form_Mck_a

    PROC t1guess

    pardo a,i
        request Mck_a[a,i]
	Tai[a,i] = Mck_a[a,i]
	execute energy_denominator_rhf Tai[a,i] fock_a
	prepare t1a_old[a,i] = Tai[a,i]
        PREPARE D0ai[a,i] = tai[a,i]
    endpardo a,i
    server_barrier

    ENDPROC t1guess

    PROC t1newzero
    pardo a,i
        Tai[a,i] = 0.0
	prepare t1a_new[a,i] = Tai[a,i]
    endpardo a,i
    server_barrier
    ENDPROC t1newzero

    PROC formt1a
    
    pardo a,i
	Tai[a,i] = 0.0
        do b
	    do j
		request Viaai[i,a,b,j]
		request t1a_old[b,j]

		T1ai[a,i] = Viaai[i,a,b,j]*t1a_old[b,j]
		Tai[a,i] += T1ai[a,i]
	    enddo j
        enddo b
        do a1
	    do i1
		request Vaaii[a,a1,i1,i]
		request Viaai[i1,a1,a,i]
		request t1a_old[a1,i1]
		Tpppp[i1,a1,a,i]  = Vaaii[a,a1,i1,i]
		Tpppp[i1,a1,a,i] -= Viaai[i1,a1,a,i]

		T2ai[a,i] = Tpppp[i1,a1,a,i]*t1a_old[a1,i1]
		Tai[a,i] -= t2ai[a,i]

	    enddo i1
        enddo a1

	request Mck_a[a,i]
	T1ai[a,i] = Mck_a[a,i]

	Tai[a,i] += T1ai[a,i]

	prepare t1a_new[a,i] += Tai[a,i]
    endpardo a,i
#
    server_barrier
    ENDPROC formt1a

    PROC updatet1

      PARDO a, i
#
            request                t1a_new[a,i]
            request                t1a_old[a,i]
            tai[a,i]         = t1a_new[a,i]
            t1ai[a,i]        = t1a_old[a,i]
            execute energy_denominator_rhf tai[a,i] fock_a
            tai[a,i]        -= t1ai[a,i]

            if kiter < Idiis_order
               PUT Eai[a,i,kiter] = Tai[a,i]
            endif

            if kiter >= Idiis_order
               DO jdiis
                  if jdiis == Idiis_order
                     PUT Eai[a,i,jdiis] = Tai[a,i]
                     exit
                  endif
               ENDDO jdiis
            endif
#
      ENDPARDO a, i

    server_barrier

    pardo a,i
        request    t1a_new[a,i]
	Tai[a,i] = t1a_new[a,i]
	execute energy_denominator_rhf Tai[a,i] fock_a
	prepare t1a_old[a,i] = Tai[a,i]
    endpardo a,i
    server_barrier
    ENDPROC updatet1

      PROC MOVET1
#     ------------
#
      PARDO a, i
#
            request        t1a_old[a,i]
            tai[a,i] = t1a_old[a,i]

            if kiter < Idiis_order
               PUT Dai[a,i,kiter] = Tai[a,i]
            endif

            if kiter >= Idiis_order
               DO kdiis
                  if kdiis == (Idiis_order - 1)
                     PUT Dai[a,i,kdiis] = Tai[a,i]
                     exit
                  endif
               ENDDO kdiis
            endif
#
      ENDPARDO a, i
#
      ENDPROC MOVET1

      PROC DIISN 
#     ---------- 

      worder = niter 
      if niter >= diis_order 
         worder = diis_order 
      endif 
      Iorder = (int)worder
      sip_barrier 
      PARDO a, i 
         DO jdiis 
         where jdiis <= Iorder

               GET Eai[a,i,jdiis] 

         DO j1diis 
         where j1diis <= Iorder

               GET Eai[a,i,j1diis] 

               tbb[jdiis,j1diis]          = Eai[a,i,jdiis]*Eai[a,i,j1diis] 
               tbb[jdiis,j1diis]         *= 4.0  
               PUT DIST_BB[jdiis,j1diis] += tbb[jdiis,j1diis]  
 
         ENDDO j1diis 
         ENDDO jdiis 
      ENDPARDO a, i  

      sip_barrier 

      DO jdiis 
      where jdiis <= Iorder
	  DO j1diis 
	  where j1diis <= Iorder
		GET DIST_BB[jdiis,j1diis] 
		BB[jdiis,j1diis] = DIST_BB[jdiis,j1diis] 
	  ENDDO j1diis 
      ENDDO jdiis 

      execute compute_diis BB 
      temp_order = worder 
      sip_barrier 

      PARDO a, i 
            tai[a,i] = 0.0 
            n1 = 0.0  
            DO kdiis    
	    where kdiis < Iorder
               n1 = (scalar)kdiis
               GET         Dai[a,i,kdiis] 
               t2ai[a,i] = Dai[a,i,kdiis] 
            
		DO d2   
		where d2 <= Iorder
		   n2 = (scalar)d2
		   kcount  = n2 
		   kcount -= n1 
		   if kcount == one 
		      GET         Eai[a,i,d2] 
		      t3ai[a,i] = Eai[a,i,d2] 
		      etemp = BB[d2,d2]
		      t3ai[a,i] += t2ai[a,i] 
		      t3ai[a,i] *= etemp   
		      tai[a,i]  += t3ai[a,i]  
		   endif 
		ENDDO d2   
            ENDDO kdiis 

            DO d2   
               if d2 == 1
                  REQUEST D0ai[a,i]  
                  t2ai[a,i] = D0ai[a,i] 
                  GET         Eai[a,i,d2] 
                  t3ai[a,i] = Eai[a,i,d2] 
                  etemp = BB[d2,d2]
                  t3ai[a,i] += t2ai[a,i] 
                  t3ai[a,i] *= etemp   
                  tai[a,i]  += t3ai[a,i]  
               endif 
            ENDDO d2   

            prepare t1a_old[a,i] = tai[a,i]  
      ENDPARDO a, i  

      server_barrier

# If history space is full shift history end error vectors 

      if kiter >= Idiis_order  

# histories first 

      PARDO a, i  
      DO kdiis 
      where kdiis < Iorder
          n1 = (scalar)kdiis
          GET Dai[a,i,kdiis]   
          tai[a,i] = Dai[a,i,kdiis]   
	  DO k1diis 
	     n2 = (scalar)k1diis
	     etemp = n1 
	     etemp -= n2 
	     if etemp == 1.0 
		PUT Dai[a,i,k1diis] = tai[a,i] 
	     endif 
	  ENDDO k1diis  
	     if n1 == one 
		PREPARE D0ai[a,i] = tai[a,i] 
	     endif 
      ENDDO kdiis 
      ENDPARDO a, i  

# Now error vectors 
      PARDO a, i  
      DO kdiis 
      where kdiis <= Iorder
         n1 = (scalar)kdiis
         GET Eai[a,i,kdiis]   
         tai[a,i] = Eai[a,i,kdiis]   
	  DO k1diis 
	     n2 = (scalar)k1diis
	     etemp = n1 
	     etemp -= n2 
	     if etemp == 1.0 
		PUT Eai[a,i,k1diis] = tai[a,i] 
	     endif 
	  ENDDO k1diis  
      ENDDO kdiis 
      ENDPARDO a, i  
      endif 
      server_barrier

      ENDPROC DIISN 


    proc t1norm
    server_barrier
    escr = 0.0
    esum = 0.0
    pardo a,i
        request t1a_old[a,i]
	Tai[a,i]  = t1a_old[a,i]
	T1ai[a,i] = t1a_old[a,i]
	etemp     = Tai[a,i]*T1ai[a,i]
	esum     += etemp
    endpardo a,i
    server_barrier
    collective escr += esum
    server_barrier
    norm = escr**0.5
    endproc t1norm

    PROC form_Dxx_02

    pardo mu,nu
        Txx[mu,nu] = 0.0
	prepare Dxx_02[mu,nu] = Txx[mu,nu]
    endpardo mu,nu
    pardo p,nu
        Tpx[p,nu] = 0.0
	prepare Dpx_02[p,nu] = Tpx[p,nu]
    endpardo p,nu
    server_barrier
    pardo a,nu
        Tpx[a,nu] = 0.0
	do i
	    request t1a_old[a,i]
	    Tpx1[a,nu] = t1a_old[a,i]*Ca[nu,i]
	    Tpx[a,nu] += Tpx1[a,nu]
	enddo i
	prepare Dpx_02[a,nu] += Tpx[a,nu]
    endpardo a,nu
    server_barrier
    pardo mu,nu
        Txx[mu,nu] = 0.0
	do a
	    request Dpx_02[a,nu]
	    Txx1[mu,nu] = Dpx_02[a,nu]*Ca[mu,a]
	    Txx[mu,nu] += Txx1[mu,nu]
	enddo a
	prepare Dxx_02[mu,nu] += Txx[mu,nu]
    endpardo mu,nu
    server_barrier

    do ixyz
	ncount2 = (scalar)ixyz
	esum = 0.0
	dsum = 0.0
	pardo mu,nu
	    request Dxx_02[mu,nu]
	    ncount1 = 0.0
	    execute compute_dipole_integrals DAOINT[mu,nu] ncount1 ncount2
	    Txx[mu,nu] = Dxx_02[mu,nu]
	    etemp = Txx[mu,nu]*DAOINT[mu,nu]
	    esum += etemp
	endpardo mu,nu
	server_barrier
	collective dsum += esum
	server_barrier
	dsum *= 4.0
	Dip02[ixyz] = dsum

    enddo ixyz
    server_barrier
    dsum = 0.0
    esum = 0.0
    do ixyz
	escr = Dip02[ixyz]**2.0
	esum += escr
    enddo ixyz
    dsum = esum**0.5

    ENDPROC form_Dxx_02
#
#    ------------------------------------------------------------------------ 
#           MAIN
#    ------------------------------------------------------------------------ 

print " "
print "-- Parallel CCPT(1)(2s) property program"
print "-- Written by Jason N. Byrd, 2015"
print " "

    ecrit = cc_conv
    zero = 0.0
    one = 1.0
    two = 2.0
    five  = 5.0
    six   = 6.0
    seven = 7.0

      diis_start = (scalar)scf_beg
      diis_order = (scalar)scf_hist
      Idiis_order = scf_hist

      print diis_start
      print diis_order
      print " "
#
##################
    server_barrier
    restore_persistent ca       "ca"
    restore_persistent Fock_a   "fock_a"
    restore_persistent T2old_ab "T2old_ab"
    restore_persistent VSpipi "VSpipi"
    restore_persistent Vpiqj    "Vpiqj"
    restore_persistent Vaaii    "Vaaii"
    restore_persistent Viaai    "Viaai"
    restore_persistent Vaaai    "Vaaai"
    restore_persistent dipole "lccd_dipole"
    server_barrier
##################

    print " "
    print "Computing second-order singles correction"

    call T2oldaa
    call form_Mck_a
    call t1guess

    eold = 0.0
    do kiter
	print " "
	print kiter
	niter = (scalar)kiter

	call t1newzero
	call formt1a
	call updatet1
        call t1norm

         SERVER_BARRIER
         if kiter >= (int)diis_start # two
            CALL DIISN
         ENDIF
#
         CALL MOVET1

        server_barrier
	assert_same norm
	assert_same eold
	escr = (eold - norm)**(2.0)
	ediff = escr**0.5
	print ediff
	assert_same ediff
	if ediff < cc_conv
	    exit
	endif
	eold = norm
    enddo kiter

    call form_Dxx_02
    escr = 0.0
    do ixyz
	dipole[ixyz] -= dip02[ixyz]
	etemp = dipole[ixyz]**2.0
	escr += etemp
    enddo ixyz
    print " "
    print "CCPT(1)(2s) response dipole moments"
    print dipole
    server_barrier
#
#    ------------------------------------------------------------------------ 
                           ENDSIAL CCSD_RHF_SV1
