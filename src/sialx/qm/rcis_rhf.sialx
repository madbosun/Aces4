import "reom_rhf_defs.sialx" 
#
SIAL RCIS_RHF
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# Declare indeces
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
index kiter    = 1: cc_iter
index kstate   = 1: eom_roots
index kstate1  = 1: eom_roots
index jstate   = 1: eom_roots
index qstate   = 2: eom_roots
index ksub     = 1: eom_subspc
index ksub1    = 1: eom_subspc
index ksub2    = 1: eom_subspc
index qsub     = 2: eom_subspc
index jsub     = 1: eom_subspc
index cart     = 1: 3
#
aoindex mu     = 1: norb
aoindex nu     = 1: norb
aoindex lambda = 1: norb
aoindex sigma  = 1: norb
#
moaindex i = baocc: eaocc
moaindex i1= baocc: eaocc
moaindex i2= baocc: eaocc
moaindex i3= baocc: eaocc
#
moaindex a = bavirt: eavirt
moaindex a1= bavirt: eavirt
moaindex a2= bavirt: eavirt
moaindex a3= bavirt: eavirt
#
moaindex j = baocc: eaocc
moaindex j1= baocc: eaocc
moaindex j2= baocc: eaocc
moaindex j3= baocc: eaocc
#
moaindex b = bavirt: eavirt
moaindex b1= bavirt: eavirt
moaindex b2= bavirt: eavirt
moaindex b3= bavirt: eavirt
#
moaindex p = baocc: eavirt
moaindex p1= baocc: eavirt
moaindex p2= baocc: eavirt
moaindex p3= baocc: eavirt
#
moaindex q = baocc: eavirt
moaindex q1= baocc: eavirt
moaindex q2= baocc: eavirt
moaindex q3= baocc: eavirt

#
scalar rank
int myrank
int root
#
static SEk[ksub]
static SEkold[kstate]
static SEk0[kstate]
distributed Ek[kstate]

static C1_a[ksub2,a,i]

served  R2AA[a,i,a1,i1]
served  R2BB[b,j,b1,j1]
served  R2AB[a,i,b,j]

served  L2AA[i,a,i1,a1]
served  L2BB[j,b,j1,b1]
served  L2AB[i,a,j,b]

served  A2AA[i,a,i1,a1]
served  A2BB[j,b,j1,b1]
served  A2AB[i,a,j,b]

served  R1A[a,i]
served  R1B[b,j]

served  L1A[i,a]
local        LL1A[i,a]
served  L1B[j,b]

served  A1A[i,a]
local        LA1A[i,a]
served  A1B[j,b]

distributed  T1A[a,i]
local        LT1A[a,i]
distributed  T1B[b,j]

served  T2AA[a,i,a1,i1]
served  T2AB[a,i,b,j]
served  T2BB[b,j,b1,j1]

temp  Tk[ksub]
temp  T1k[ksub]
temp  T2k[ksub]
temp  tpipi[p,i,p1,i1]
temp  tiaia[i,a,i1,a1]
temp  tjbjb[j,b,j1,b1]
temp  tiajb[i,a,j ,b ]
temp  taibj[a,i,b ,j ]
temp  taibj1[a,i,b ,j ]
temp  tbjai[b,j,a,i]
temp  taiai[a,i,a1,i1]
temp  taiai1[a,i,a1,i1]
temp  tbjbj[b,j,b1,j1]
temp  tpppp[p,p1,q,q1] 

temp  tia [i,a]
temp  tia1[i,a]
temp  tia2[i,a]
temp  tia3[i,a]
temp  tai [a,i]
temp  tai1[a,i]
temp  tai2[a,i]
temp  tjb [j,b]
temp  tjb1[j,b]
temp  tjb2[j,b]
temp  tjb3[j,b]
temp  tbj [b,j]
temp  tbj2[b,j]
temp  tbj3[b,j]
temp  tii [i1,i]
temp  tjj [j1,j]
temp  taa [a,a1]
temp  taa2[a,a1]
temp  tbb [b,b1]
temp  tbb2[b,b1]

temp  tij[i,j]
temp  tii1[i,i1]
temp  tii2[i,i1]
temp  tjj1[j,j1]
temp  tjj2[j,j1]
temp  taa1[a,a1]
temp  tbb1[b,b1]

local  lai[a,i]
local  lbj[b,j]
local  lia[i,a]
local  ljb[j,b]
local  laa[a,a1]
local  lbb[b,b1]
local  lii[i,i1]
local  ljj[j,j1]
local  lxx[mu,nu]

temp  txx [mu,nu]
temp  txx2[mu,nu]
temp  txx3[mu,nu]
temp  txi [mu,i]
temp  txj [mu,j]
temp  txa [mu,a]
temp  txb [mu,b]

served  HBAR_ia[i,a]
served  HBAR_jb[j,b]

served  Vaaii [a,a1,i,i1]
served  Viaai [i,a,a1,i1]
served  Vaaai [a,a1,a2,i]

served  DENS_VV_A[a,a1]
served  DENS_OO_A[i,i1]
served  DENS_OV_A[i,a]
served  DENS_VO_A[a,i]

served T2L2_VV_A[a,a1] 
served R2L2_VV_A[a,a1] 
served DENS_INT_OV_A[i,a] 
served T1L1_OO_A[i,i1] 
served T2L2_OO_A[i,i1] 
served R2L2_OO_A[i,i1] 

served  AO_DENS[mu,nu]
served  DHF[mu,nu]

local  liaia [i,a,i1,a1]
local  laiai [a,i,a1,i1]
local  laibj [a,i,b, j ]
local  liajb [i,a,j, b ]
local  laiai2[a,i,a1,i1]
local  laibj2[a,i1,b,j ]
local  laiai3[a,i,a1,i2]
local  laiai4[a,i2,a1,i] 
local  laiai5[a,i2,a1,i] 
local  laibj3[a,i1,b, j]
local  laibj4[a,j,b,i] 
local  laibj5[a,j,b,i] 
local  lbiaj [b,i,a,j] 
local  lbiaj2[b,i,a,j] 

local  lbjbj [b,j,b1,j1]
local  lbjbj2[b,j,b1,j1]
local  lbjbj3[b,j,b1,j2]
local  lbjbj4[b,j2,b1,j] 
local  lbjbj5[b,j2,b1,j] 

scalar normcrit
SCALAR  ZERO
SCALAR  ONE
SCALAR  TWO
SCALAR  THREE
SCALAR  ONEHALF
SCALAR  tmpnuc
SCALAR  dipnuc
SCALAR  dipnucx
SCALAR  dipnucy
SCALAR  dipnucz
SCALAR  AMPLTHRESH
SCALAR  OMEGA
SCALAR  OMEGA2
SCALAR  OLD_R0
SCALAR  R0
SCALAR  L0
SCALAR  R0_THRESH
SCALAR  LOGRIGHT
SCALAR  GROUNDSTATE
SCALAR  EXCITESTATE
SCALAR  iroot
SCALAR  imomcount
SCALAR  rootcount
scalar rmsconv
SCALAR  etemp
SCALAR  etemp1
SCALAR  etemp2
SCALAR  etemp3
SCALAR  etemp4
SCALAR  etemp5
SCALAR  etemp6
SCALAR  sum1
SCALAR  sum2
SCALAR  sum3
SCALAR  sum4
SCALAR  sum5
SCALAR  sum6
SCALAR  OSC_STREN
SCALAR  OSC_STREN1
SCALAR  OSC_STREN2
SCALAR  OSC_STREN3
SCALAR  OSC_STREN_X
SCALAR  OSC_STREN_Y
SCALAR  OSC_STREN_Z
SCALAR  DIP_SCF_X
SCALAR  DIP_SCF_Y
SCALAR  DIP_SCF_Z
SCALAR  DIP_EXC_X
SCALAR  DIP_EXC_Y
SCALAR  DIP_EXC_Z
SCALAR  DIP_GRD_X
SCALAR  DIP_GRD_Y
SCALAR  DIP_GRD_Z
SCALAR  DIP_MOM_X
SCALAR  DIP_MOM_Y
SCALAR  DIP_MOM_Z
SCALAR  DIP_MOM_X_L
SCALAR  DIP_MOM_Y_L
SCALAR  DIP_MOM_Z_L
SCALAR  DIP_MOM_X_R
SCALAR  DIP_MOM_Y_R
SCALAR  DIP_MOM_Z_R
SCALAR  DIPXY
SCALAR  DIPXZ
SCALAR  DIPYZ
SCALAR  POLXX
SCALAR  POLYY
SCALAR  POLZZ
SCALAR  POLXY
SCALAR  POLXZ
SCALAR  POLYZ
SCALAR  POLTOTXX
SCALAR  POLTOTYY
SCALAR  POLTOTZZ
SCALAR  POLTOTXY
SCALAR  POLTOTXZ
SCALAR  POLTOTYZ
SCALAR  SECONDMOM
SCALAR  LRNORM  
SCALAR  esum  
#
#
# Declare two-electron integral arrays
# ------------------------------------
#
served VSpipi[p1,i,p,i1]
served VSaaai[a2,a,a1,i]
#
served VSqjqj[q1,j,q,j1]
served Vjbbj[j,b1,b,j1]
served Vbbjj[b,b1,j,j1]
#
served Vjbii[j,b,i,i1]
served Vbbii[b,b1,i,i1]
served Vbbai[b,b1,a,i]
#
served Vpiqj[p,i,q,j]
served Vaajj[a,a1,j,j1]
served Viabj[i,a,b,j]
served Vaabj[a,a1,b,j]
#
served NIAAI[i,a,a1,i1]
served NJBAI[j,b,a,i]
served NIABJ[i,a,b,j]
served NJJAA[j1,j,a1,a]
served NIIBB[i1,i,b1,b]
#
# Declare CCSD amplitude arrays
# -----------------------------
#
static St1a[a,i] 
static St1b[b,j] 
#
# Arrays for AO routine
#
temp AOINT[mu,lambda,nu,sigma]
temp Txxxx[mu,nu,lambda,sigma]
local Lxxxj[mu,lambda,nu,j]
local Lxxbj[mu,nu,b,j]
local Lxabj[mu,a,b,j]
local Laabj[a1,a,b,j]
local Lxxxi[mu,lambda,nu,i]
local Lxxai[mu,nu,a,i]
local Lxbai[mu,b,a,i]
local Lbbai[b1,b,a,i]
local Lxaai[mu,a1,a,i]
local Laaai[a2,a1,a,i]
local Lxbbj[mu,b1,b,j]
local Lbbbj[b2,b1,b,j]
local Xbbbj[b,b2,b1,j] 
temp tmxxxj[mu,lambda,nu,j]
temp t1mxxxj[mu,lambda,nu,j]
temp tmxxbj[mu,lambda,b,j]
temp t1mxxbj[mu,lambda,b,j]
temp tmxabj[mu,a,b,j]
temp t1mxabj[mu,a,b,j]
temp tmaabj[a1,a,b,j]
temp t1maabj[a1,a,b,j]
#
temp tmxbbj[mu,b1,b,j]
temp t1mxbbj[mu,b1,b,j]
temp tmbbbj[b2,b1,b,j]
temp t1mbbbj[b2,b1,b,j]
#
temp tmxaai[mu,a1,a,i]
temp t1mxaai[mu,a1,a,i]
temp tmaaai[a2,a1,a,i]
temp t1maaai[a2,a1,a,i]
#
temp tmxxxi[mu,lambda,nu,i]
temp t1mxxxi[mu,lambda,nu,i]
temp tmxxai[mu,lambda,a,i]
temp t1mxxai[mu,lambda,a,i]
temp tmxbai[mu,b,a,i]
temp t1mxbai[mu,b,a,i]
temp tmbbai[b1,b,a,i]
temp t1mbbai[b1,b,a,i]
#
served Mxxxj[mu,lambda,nu,j]
served Mxxbj[mu,lambda,b,j]
served Mxabj[mu,a,b,j]
served Mxaai[mu,a1,a,i]
served Mxbbj[mu,b1,b,j]
#
served Mxxxi[mu,lambda,nu,i]
served Mxxai[mu,lambda,a,i]
served Mxbai[mu,b,a,i]
#
temp t1xj[sigma,j]
distributed Mxj[sigma,j]
temp t1xi[sigma,i]
distributed Mxi[sigma,i]
#
# Declare HBAR arrays. 
# -------------------- 
#
served HBAR_aa[a,a1] 
served HBAR_ii[i1,i] 
#
local LHBAR_ii[i1,i] 
local LHBAR_ia[i,a] 
local LHBAR_jb[j,b] 
local LHBAR_aa[a,a1] 
#
served HBAR_iiii[i,i1,i2,i3] 
served HBAR_iijj[i,i1,j,j1] 
#
served HBAR_AIBC_aaaa[a,a1,i,a2]
served HBAR_AIBC_aabb[a,a1,j,b2]
#
served HBAR_JKIA_aaaa[i1,i,i2,a] 
served HBAR_JKIA_aabb[i1,i,j2,b] 
#
served HBAR_IAJK_aaaa[i,i1,a,i2] 
served HBAR_IAJK_aabb[i,i1,b,j] 
#
served HBAR_AJIB_aaaa[i1,a1,a,i] 
served HBAR_AJIB_aabb[i,a,b,j] 
served HBAR_AJIB_iibb[i1,i,b,b1] 
#
served HBAR_ABCI_aaaa[a,a1,a2,i] 
served HBAR_ABCI_aabb[a,a1,b,j] 
#
served WHIAAI[i,a,a1,i1] 
served WHJBBJ[j,b,b1,j1] 
served WHIABJ[i,a,b1,j1] 
served WHJBAI[j,b,a1,i1] 
served WHIIBB[i,i1,b,b1] 
served WHJJAA[j,j1,a,a1] 
#
distributed D2aa[a,i,a1,i1] 
#
served Vxxaa[mu,nu,a1,a] 
served Vaaaa[a3,a2,a1,a] 
temp Txxxp[mu,nu,lambda,p] 
temp Txxpp[mu,nu,p1,p] 
temp Txppp[mu,p2,p1,p] 
#
temp Txxxq[mu,nu,lambda,q] 
temp Txxqq[mu,nu,q1,q] 
temp Txqqq[mu,q2,q1,q] 
#
served Gxxbb[mu,nu,b1,b] 
served Vaabb[a3,a2,b1,b] 
temp Txpqq[mu,p2,q1,q] 
temp tba[b,a]     
temp tab[a,b]     

served Ctau[a,i,b,j]
#
# Declare temporary arrays
# ------------------------
#
temp T2jbai[j,b,a,i]
temp T3iaai[i,a,a1,i1]
temp T4iaai[i,a,a1,i1]
temp T3jbbj[j,b,b1,j1]
temp T4jbbj[j,b,b1,j1]
temp t1pppp[p,p1,p2,p3] 
temp t2pppp[p,p1,p2,p3] 
temp t3pppp[p,p1,p2,p3] 
temp t4pppp[p,p1,p2,p3] 
temp tSpppp[p,p1,p2,p3] 
temp tqqqq[q,q1,q2,q3] 
temp t1qqqq[q,q1,q2,q3] 
temp t2qqqq[q,q1,q2,q3] 
temp t3qqqq[q,q1,q2,q3] 
temp t4qqqq[q,q1,q2,q3] 
temp tSqqqq[q,q1,q2,q3] 
temp tppqq[p,p1,q,q1] 
temp tqpqp[q,p,q1,p1]
temp t0pqqp[p,q1,q,p2] 
temp t1ppqq[p,p1,q,q1] 
temp t2ppqq[p,p1,q,q1] 
temp t3ppqq[p,p1,q,q1] 
temp tqqpq[q,q1,p,q2] 
temp tqppq[q,p,p1,q1] 
temp tqqpp[q,q1,p,p1] 
temp t1qqpp[q,q1,p,p1] 
temp t2qqpp[q,q1,p,p1] 
temp t3qqpp[q,q1,p,p1] 
#
temp Tiaai[i,a,a1,i1] 
temp T1iaai[i,a,a1,i1] 
temp T2iaai[i,a,a1,i1] 
temp Tiiai[i,i1,a,i2] 
temp T1iiai[i,i1,a,i2] 
temp T2iiai[i,i1,a,i2] 
temp TSiiai[i,i1,a,i2] 
temp Tjbbj[j,b,b1,j1] 
temp T1jbbj[j,b,b1,j1] 
temp T2jbbj[j,b,b1,j1] 
temp Tjjbj[j,j1,b,j2] 
temp T1jjbj[j,j1,b,j2] 
temp T2jjbj[j,j1,b,j2] 
temp TSjjbj[j,j1,b,j2] 
temp Tiibb[i,i1,b,b1] 
temp Tijab[i,j,a,b]
temp T2iibb[i,i1,b,b1] 
temp T1iibb[i,i1,b,b1] 
temp Tjjaa[j,j1,a,a1] 
temp T2jjaa[j,j1,a,a1] 
temp T1jjaa[j,j1,a,a1] 
temp Tiabj[i,a,b,j] 
temp T2iabj[i,a,b,j] 
temp T1iabj[i,a,b,j] 
temp Tjbai[j,b,a,i] 
temp T1jbai[j,b,a,i] 
temp Tiibj[i,i1,b,j] 
temp T1iibj[i,i1,b,j] 
temp Tjjai[j,j1,a,i] 
temp T1jjai[j,j1,a,i] 
temp T1aiai[a1,i2,a2,i1]  
temp T2aiai[a1,i2,a2,i1]  
temp T1bjbj[b2,j,b,j2] 
temp T2bjbj[b2,j,b,j2] 
temp T1aibj[a1,i,b,j1]  
temp taabb[a,a1,b,b1]
temp taaaa[a,a1,a2,a3]
temp tbbbb[b,b1,b2,b3]
#
temp tpp[p,p1] 
temp t1pp[p,p1] 
temp t2pp[p,p1] 
temp t1ai[a,i] 
temp tqq[q,q1] 
temp t1qq[q,q1] 
temp t2qq[q,q1] 
temp t1bj[b,j] 
#
# Declare integral arrays
# ------------------------
#
# Define scalars
# --------------
#
scalar icopy
scalar e1
scalar e2
scalar e3
scalar etot 
scalar etot1
scalar etot2
scalar etot3
scalar etot4
scalar etot5
scalar etot6
scalar etot7
scalar etot8
scalar etot9
scalar etot10 
scalar etot11
scalar etot12

scalar normT
scalar normS
scalar norm1
scalar norm2
scalar norml
scalar normr
static Lnorm[ksub]
static Rnorm[ksub]
scalar overlap1
scalar overlap2
scalar overlapT
scalar overlapS
scalar overlapJK
static SBnorm[ksub]
static S1overlap[ksub,ksub1]
static S2aaoverlap[ksub,ksub1]
static S2aboverlap[ksub,ksub1]
distributed DLNia[i,a]
distributed DRNai[a,i]
distributed DLNiaia[i,a,i1,a1]
distributed D2LNiaia[i,a,i1,a1]
distributed DRNaiai[a,i,a1,i1]
distributed D2RNaiai[a,i,a1,i1]
distributed DLNiajb[i,a,j,b]
distributed DRNaibj[a,i,b,j]
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# Declare arrays
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
#    served arrays used in EOM
#
served VCONV2AA[a,i,a1,i1]
served VCONV2AB[a,i,b,j]
##
served VCE2AA[a,i,a1,i1]
served VCE2AB[a,i,b,j]
##
served VCACT2AA[a,i,a1,i1]
served VCACT2AB[a,i,b,j]
served VCHACT2AA[a,i,a1,i1]
served VCHACT2AB[a,i,b,j]

distributed Faa[a,a1]
distributed Fab[a,b]

temp Tp[p]

temp Tkk[ksub,ksub1]
temp T1kk[ksub,ksub1]
temp T2kk[ksub,ksub1]

###### Davidson arrays
served Gmat[ksub,ksub1]
local  LGmat[ksub,ksub1]
static GSmat[ksub,ksub1]
served Gold[ksub,ksub1]
static GSold[ksub,ksub1]
static SAlphaL[ksub,ksub1]
static SAlphaR[ksub,ksub1]
static AL[ksub]
static AR[ksub]
static kkmat[ksub,ksub1]
# 3n subspace H.B
served HB2_aa[ksub,a,i,a1,i1]
served HB2_ab[ksub,a,i,b,j]
served HB1_a[ksub,a,i]
# 3n subspace vectors
served RB2_aa[ksub,a,i,a1,i1]
served RB2_ab[ksub,a,i,b,j]
served RB1_a[ksub,a,i]
served LB2_aa[ksub,i,a,i1,a1]
served LB2_ab[ksub,i,a,j,b]
served LB1_a[ksub,i,a]
# partition (1) k vectors
served R1k2_aa[kstate,a,i,a1,i1]
served R1k2_ab[kstate,a,i,b,j]
served R1k1_a[kstate,a,i]
served L1k2_aa[kstate,i,a,i1,a1]
served L1k2_ab[kstate,i,a,j,b]
served L1k1_a[kstate,i,a]
# partition (2) k-1 vectors
served R0k2_aa[kstate,a,i,a1,i1]
served R0k2_ab[kstate,a,i,b,j]
served R0k1_a[kstate,a,i]
served L0k2_aa[kstate,i,a,i1,a1]
served L0k2_ab[kstate,i,a,j,b]
served L0k1_a[kstate,i,a]
# partition (3) correction vectors
served cRk2_aa[kstate,a,i,a1,i1]
served cRk2_ab[kstate,a,i,b,j]
served cRk1_a[kstate,a,i]
served cLk2_aa[kstate,i,a,i1,a1]
served cLk2_ab[kstate,i,a,j,b]
served cLk1_a[kstate,i,a]
# 
local loc_RB2_aa[kstate,a,i,a1,i1]
local loc_R1k2_aa[kstate,a,i,a1,i1]
local loc_R0k2_aa[kstate,a,i,a1,i1]
local loc_cRk2_aa[kstate,a,i,a1,i1]
contiguous local CLRB2_aa[ksub,a,i,a1,i1]
contiguous local CLRB2_ab[ksub,a,i,b,j]
contiguous local CLRB1_a[ksub,a,i]
contiguous local CLLB2_aa[ksub,i,a,i1,a1]
contiguous local CLLB2_ab[ksub,i,a,j,b]
contiguous local CLLB1_a[ksub,i,a]
contiguous local CIS_EE_Energy[kstate]
int roots
int subspc
int kstart
int kend
int as
int at
int a1s
int a1t
int is
int it
int i1s
int i1t

temp Tkai[ksub,a,i]
temp T1kai[ksub,a,i]
temp T2kai[ksub,a,i]
temp T3kai[ksub,a,i]
temp T4kai[ksub,a,i]

temp Tkia[ksub,i,a]
temp T1kia[ksub,i,a]
temp T2kia[ksub,i,a]
temp T3kia[ksub,i,a]

temp Tkaiai[ksub,a,i,a1,i1]
temp T1kaiai[ksub,a,i,a1,i1]
temp T2kaiai[ksub,a,i,a1,i1]
temp T3kaiai[ksub,a,i,a1,i1]

temp Tkaibj[ksub,a,i,b,j]
temp T1kaibj[ksub,a,i,b,j]
temp T2kaibj[ksub,a,i,b,j]
temp T3kaibj[ksub,a,i,b,j]

temp Tkiaia[ksub,i,a,i1,a1]
temp T1kiaia[ksub,i,a,i1,a1]
temp T2kiaia[ksub,i,a,i1,a1]
temp T3kiaia[ksub,i,a,i1,a1]

temp Tkiajb[ksub,i,a,j,b]
temp T1kiajb[ksub,i,a,j,b]
temp T2kiajb[ksub,i,a,j,b]
temp T3kiajb[ksub,i,a,j,b]

#
# VFL arrays 
# ---------- 
#
served VFLAB[a1,b,i,j]  
served VFLAA[a2,a1,i,i2] 
served VFLBB[b2,b1,j,j2] 
temp T1qppq[q1,p1,p,q]    
temp tpqpq[p,q,p1,q1]  
temp T1pqpq[p,q,p1,q1]  
served Njjai[j1,a,i,j]
served Niibj[i1,b,i,j]
served Niiai[i1,a,i,i2]
distributed Niijj[i,i1,j,j1]
distributed Niiii[i,i1,i2,i3]
#
# Arrays needed for AOLADDER contribution
# ---------------------------------------
#
local LLaa[a,i,nu,i1] 
local LLbb[b,j,nu,j1] 
local LLab[a,i,nu,j] 
temp Txixj[lambda,i,sigma,j]
temp Txjxj[lambda,j,sigma,j1]
temp Txixi[lambda,i,sigma,i1]
temp Txiai[lambda,i,a1,i1]
temp Txjbj[lambda,j,b1,j1]
temp Txibj[lambda,i,b,j]
#
temp Zaa[lambda,i,a1,i1]
temp Zbb[lambda,j,b,j1]
temp Zab[lambda,i,b,j]
temp ZZaa[lambda,i,sigma,i1]
temp ZZ1aa[lambda,i,sigma,i1]
temp ZZbb[lambda,j,sigma,j1]
temp ZZ1bb[lambda,j,sigma,j1]
temp ZZab[lambda,i,sigma,j]
#
temp Yaa[lambda,i,mu,i1]
temp Ybb[lambda,j,mu,j1]
temp Yab[lambda,i,mu,j]
temp Y1aa[lambda,i,mu,i1]
temp Y1bb[lambda,j,mu,j1]
temp Y1ab[lambda,i,mu,j]
#
temp Taixi[a,i,nu,i1]
temp Tbjxj[b,j,nu,j1]
temp Taixj[a,i,nu,j]
#
served TAO_aa[lambda,i,sigma,i1]
served TAO_bb[lambda,j,sigma,j1]
served TAO_ab[lambda,i,sigma,j]
served T1AO_aa[lambda,i,a,i1]
served T1AO_bb[lambda,j,b,j1]
served T1AO_ab[lambda,i,b,j]
served T2AO_aa[lambda,i,sigma,i1]
served T2AO_bb[lambda,j,sigma,j1]
served T2AO_ab[lambda,i,sigma,j]
#
temp  T3iaia[i,a,i1,a1]
temp  T3aiai[a,i,a1,i1]
temp  T4aiai[a,i,a1,i1]
temp  T3bjbj[b,j,b1,j1]
temp  T4bjbj[b,j,b1,j1]
temp  TSaiai[a,i,a1,i1]
temp  TSiaai[i,a,a1,i1]
temp  TS2iaai[i,a,a1,i1]
temp  TSbjbj[b,j,b1,j1]
temp  Taaii[a,a2,i,i2]
temp  Tabij[a,b,i,j]
temp  T1aaii[a,a2,i,i2]
temp  Tbbjj[b,b1,j,j1]
temp  T2bbjj[b,b1,j,j1]
temp  T2aibj[a,i,b,j]
temp  T3aibj[a,i,b,j]
temp  T4aibj[a,i,b,j]
temp  T1ii[i,i1]
temp  T1jj[j,j1]
temp  Tdaa[a,a1]
temp  Tiijj[i,i1,j,j1]
temp  T1iijj[i,i1,j,j1]
temp  Tiiii[i,i1,i2,i3]
temp  T1iiii[i,i1,i2,i3]
temp  Tjjjj[j,j1,j2,j3]
temp  T1jjjj[j,j1,j2,j3]
temp  Taajj[a,a1,j,j1]
temp  T1aajj[a,a1,j,j1]
temp  Tbbii[b,b1,i,i1]
temp  T1bbii[b,b1,i,i1]
temp  R1aiai[a1,i1,a,i]
temp  R2aiai[a1,i,a,i1]
temp  R3aiai[a,i1,a1,i]
temp  R4aiai[a,i1,a1,i]
temp  R1bjbj[b1,j1,b,j]
temp  R2bjbj[b1,j,b,j1]
temp  R3bjbj[b,j1,b1,j]
temp  R4bjbj[b,j1,b1,j]
temp  t11ai[a,i]
temp  t1aa[a,a1]
temp  t11aa[a,a1]
temp  t1bb[b,b1]
temp  t11bb[b,b1]
temp  t111bb[b,b1]
temp  t2ia[i,a]
temp  t2jb[j,b]
temp  t1ia[i,a]
temp  t2ai[a,i]
temp  t3ai[a,i]
temp  t1jb[j,b]
temp  t2bj[b,j]
temp  t3bj[b,j]
temp  t11bj[b,j]
temp  Taaai[a,a2,a1,i]
#
local L1xixi[mu,i,nu,i1]
local L1xjxj[mu,j,nu,j1]
local L1xixj[mu,i,nu,j]
local Lxibj[lambda,i,b,j]
local Lxjbj[lambda,j,b1,j1]
local LLaiai[a,i,a1,i1]
local LLbjbj[b,j,b1,j1]
local LLaibj[a,i,b,j]
local Lxiai[lambda,i,a1,i1]
#
local Ljbbj[j2,b2,b1,j1]
local Liaai3[i1,a1,a,i]
local Liiai[i2,i,a,i1]
local L2iiai[i,i2,a,i1]
local L1aibj[a,i,b1,j]
local Ljjai[a,i,j,j1]
local Lbjjj[b1,j2,j,j1]
local Ljjbj[j2,j,b,j1]
local L2jjbj[j,j2,b,j1]
local Laijj[a,i,j1,j]
local Liibj[i1,i,b,j]
local L2iibj[i1,i,b,j]
local L1iibj[i,i1,b,j]
local Laiii[a1,i2,i,i1]
local L2bjbj[b,j,b2,j1]
local L3bjbj[b,j,b2,j2]
#======================================================
local Rai[a,i]
local Rbj[b,j]
local Raiai[a,i,a1,i1]
local Rbjbj[b,j,b1,j1]
local Raibj[a,i,b,j]
#
served DDaa[a,a1]
served DDii[i,i1]
served DDia[i,a]
#served DDjj[j,j1]
served DDjb[j,b]
distributed VCONV1A[a,i]
static SHDiag[a,i]
distributed Fae_a[a,a1]
distributed Fmi_a[i1,i]
distributed Fmi_b[j1,j]
#served Fia_a(i,a)
#served Fia_b(j,b)
served Wmnijab[i,i1,j,j1]
served Wmnijaa[i,i1,i2,i3]
served Wmnijbb[j,j1,j2,j3]

local LFmi_a[i1,i]
local LFmi_b[j1,j]
local LFae_a[a,a1]
#
#     served arrays used in EOM
#
served VCE1A[a,i]
#
distributed VCACT1A[a,i]
#
distributed VCHACT1A[a,i]
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# Declare scalars
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
scalar maxcycle
scalar imaxc
scalar ncount
scalar aeigtemp
scalar aeigtemp2
scalar rootmax
scalar evfev
scalar eomthresh
scalar sqr
scalar sqr2
scalar egvmax
scalar lcount
scalar icount
scalar xcount
scalar imax
scalar emax
scalar energaa
scalar energbb
scalar energab
scalar esuma
scalar esumb
scalar esumab
scalar ecorraa
scalar ecorrbb
scalar ecorrab
scalar ecorrT
scalar eccsd
scalar eold
scalar etemp0
scalar eetemp
scalar ediff
scalar xcor
scalar xcor0
scalar xcor1
scalar xcor2
scalar xcor3
scalar count_iter
#
#     eom scalars
#
scalar ispdim
scalar omega_old
scalar omega_new
scalar residuum
scalar square
scalar squarert
scalar mult
scalar exponent
#
scalar nsp
scalar proot
scalar xroot
#
scalar Aeig1
scalar Aeig2
scalar Aeig3
scalar Aeig4
scalar Aeig5
scalar Aeig6
scalar Aeig7
scalar Aeig8
scalar Aeig9
#
scalar Aeigv1
scalar Aeigv2
scalar Aeigv3
scalar Aeigv4
scalar Aeigv5
scalar Aeigv6
scalar Aeigv7
scalar Aeigv8
scalar Aeigv9
#
scalar Aeigvm1
scalar Aeigvm2
scalar Aeigvm3
scalar Aeigvm4
scalar Aeigvm5
scalar Aeigvm6
scalar Aeigvm7
scalar Aeigvm8
scalar Aeigvm9
#
scalar xmax
#
scalar xtemp
scalar xtemp1
#
# 
# Declare served arrays 
# ---------------------
#
served Vxxxi[mu,nu,lambda,i]
served Vxixi[mu,i1,lambda,i]
served Vxxii[mu,nu,i1,i]
served Vixxi[i1,nu,lambda,i]
served Vxipi[mu,i,p,i1]
served Vixai[i,mu,a,i1]
served Vxaii[mu,a,i,i1]
served Vxaai[mu,a1,a,i]
served Vxxai[mu,nu,a,i]
#
served Vxxxj[mu,nu,lambda,j]
served Vxjxj[mu,j1,lambda,j]
served Vxxjj[mu,nu,j1,j]
served Vjxxj[j1,nu,lambda,j]
served Vxjqj[mu,j,q,j1]
served Vjxbj[j,mu,b,j1]
served Vxbjj[mu,b,j,j1]
served Vxbbj[mu,b1,b,j]
served Vxxbj[mu,nu,b,j] 
#
served Vxbii[mu,b,i,i1]
served Vxbai[mu,b,a,i]
#
served Vxixj[mu,i,nu,j]
served Vxiqj[mu,i,q,j]
served Vxajj[mu,a,j,j1]
served Vxabj[mu,a,b,j]
served Vxxij[mu,nu,i,j]
served Vixxj[i,mu,nu,j]
served Vixbj[i,mu,b,j]
#
# Declare temporary arrays 
# ------------------------ 
#
temp T1xjxj[mu,j1,lambda,j]
temp Txxjj[mu,nu,j1,j]
temp T1xxjj[mu,nu,j1,j]
temp Tjjxx[j1,nu,lambda,j]
temp Tjxxj[j1,nu,lambda,j]
temp T1jxxj[j1,nu,lambda,j]
temp Txjqj[mu,j,q,j1]
temp T1xjqj[mu,j,q,j1]
temp Tqjqj[q1,j,q,j1]
temp T1qjqj[q1,j,q,j1]
temp Tjxbj[j,mu,b,j1]
temp T1jxbj[j,mu,b,j1]
temp Txbjj[mu,b,j,j1]
temp T1xbjj[mu,b,j,j1]
temp T1bbjj[b,b1,j,j1]
temp Txbbj[mu,b1,b,j]
temp T1xbbj[mu,b1,b,j]
temp Tbbbj[b2,b,b1,j]
temp T1bbbj[b2,b,b1,j]
temp Txxbj[mu,nu,b,j]
#
temp T1xixj[mu,i,nu,j]
temp Txiqj[mu,i,q,j]
temp T1xiqj[mu,i,q,j]
temp Tpiqj[p,i,q,j]
temp T1piqj[p,i,q,j]
temp Tiixx[i,i1,mu,nu]
temp Tiixb[i,i1,mu,b]
temp Txajj[mu,a,j,j1]
temp T1xajj[mu,a,j,j1]
temp Txabj[mu,a,b,j]
temp T1xabj[mu,a,b,j]
temp Tixxj[i,mu,nu,j]
temp Tixbj[i,mu,b,j]
temp T1ixbj[i,mu,b,j]
temp Taabj[a,a1,b,j]
temp T1aabj[a,a1,b,j]
#
temp Txbii[mu,b,i,i1]
temp T1xbii[mu,b,i,i1]
temp Tjbii[j,b,i,i1]
temp T1jbii[j,b,i,i1]
temp Txbai[mu,b,a,i]
temp T1xbai[mu,b,a,i]
temp Tbbai[b,b1,a,i]
temp T1bbai[b,b1,a,i]
#
temp T1aaai[a,a1,a2,i] 
temp Txxai[mu,nu,a,i] 
temp Txaai[mu,a,a1,i] 
temp T1xaai[mu,a,a1,i] 
temp Txaii[mu,a,i,i1] 
temp T1xaii[mu,a,i,i1] 
temp T1xxai[mu,nu,a,i] 
temp Tixai[i,mu,a,i1] 
temp T1ixai[i,mu,a,i1] 
temp Txipi[mu,i,p1,i1] 
temp T1xipi[mu,i,p1,i1] 
temp T1pipi[p,i,p1,i1] 
#
temp T1xxbj[mu,nu,b,j] 
#
temp Txxij[mu,nu,i,j] 
temp T1xxij[mu,nu,i,j] 
temp T1ixxj[i,mu,nu,j] 
local Txxxi[mu,nu,lambda,i]
temp T1xxxi[mu,nu,lambda,i]
local Txxxj[mu,nu,lambda,j]
temp T1xxxj[mu,nu,lambda,j]
temp T1xixi[mu,i,nu,i1]
temp Txxii[mu,nu,i1,i] 
temp T1xxii[mu,nu,i1,i] 
temp Tixxi[i1,mu,nu,i] 
temp T1ixxi[i1,mu,nu,i] 
#
# Declare integral arrays 
# ------------------------  
#
local TAOINT[mu,nu,lambda,sigma] 
local L1xxxi[mu,nu,lambda,i] 
local L2xxxi[mu,lambda,nu,i] 
local L3xxxi[lambda,mu,nu,i] 
local L1xxxj[mu,nu,lambda,j] 
local L2xxxj[mu,lambda,nu,j] 
local L3xxxj[lambda,mu,nu,j] 
local Lxixi[mu,i,nu,i1] 
local Lxxii[mu,nu,i,i1] 
local Lixxi[i,mu,nu,i1] 
local Lxjxj[mu,j,nu,j1] 
local Lxxjj[mu,nu,j,j1] 
local Ljxxj[j,mu,nu,j1] 
local Lxixj[mu,i,nu,j] 
local Lixxj[i,mu,nu,j] 
local Lxipi[mu,i,p,i1] 
local Lxaii[mu,a,i,i1] 
local Lixai[i,mu,a,i1] 
local L1xaai[mu,a,a1,i]  
local L2xaai[mu,a,a2,i]  
local Lxjqj[mu,j,q,j1]  
local Lxbjj[mu,b,j,j1] 
local Ljxbj[j,mu,b,j1] 
local Lxbii[mu,b,i,i1] 
local Lxiqj[mu,i,q,j] 
local Lxajj[mu,a,j,j1] 
local Lixbj[i,mu,b,j] 
local L1xbbj[mu,b,b1,j] 
#***********************************************************
#***********************************************************
#
PROC READ_AMP
#     -------------
print "reading persistent arrays"
#     -------------
restore_persistent ca    "ca"
restore_persistent Fock_a "fock_a"
#restore_persistent C1_a "C1_A"
#restore_persistent t1a "t1a_old"
#restore_persistent T2aa "T2old_aa"
#restore_persistent T2ab "T2old_ab" 
#restore_persistent VSpipi "VSpipi"
restore_persistent Vaaii "Vaaii"
restore_persistent Viaai "Viaai"
#restore_persistent Vaaai "Vaaai"
#restore_persistent VSaaai "VSaaai"
#restore_persistent VSqjqj "VSqjqj"
#restore_persistent Vbbjj "Vbbjj"
#restore_persistent Vjbbj "Vjbbj"
#restore_persistent Vbbii "Vbbii"
#restore_persistent Vjbii "Vjbii"
#restore_persistent Vbbai "Vbbai"
#restore_persistent Vpiqj "Vpiqj"
#restore_persistent Vaajj "Vaajj"
#restore_persistent Viabj "Viabj"
#restore_persistent Vaabj "Vaabj"
server_barrier
#
ENDPROC READ_AMP
#
PROC form_guess
#
print "Using the Hamiltonian diagonal for guess"
server_barrier
#
execute get_my_rank rank
if rank == 0.0
#
    do a
	do i
        get VCONV1A[a,i]
	SHDiag[a,i] = VCONV1A[a,i]
	enddo i
    enddo a
#
    execute cis_unit_guess C1_a SHDiag
#
    do ksub
	do a
	    do i
		prepare RB1_a[ksub,a,i] = C1_a[ksub,a,i]
	    enddo i
	enddo a
    enddo ksub
#
endif
#
server_barrier
pardo a,i
do kstate
    request RB1_a[kstate,a,i]
    Tkai[kstate,a,i] = RB1_a[kstate,a,i]
    prepare R1k1_a[kstate,a,i] = Tkai[kstate,a,i]
enddo kstate
endpardo a,i
pardo a,i
do kstate
    Tkai[kstate,a,i] = 0.0
    prepare R0k1_a[kstate,a,i] = Tkai[kstate,a,i]
    prepare cRk1_a[kstate,a,i] = Tkai[kstate,a,i]
enddo kstate
endpardo a,i
#
do kstate
    SEkold[kstate] = 0.0
enddo kstate
#
server_barrier
#
ENDPROC form_guess
#
PROC HBAR_AB
#
pardo a, a1 
#
    tpp[a,a1] = fock_a[a,a1]       
    prepare HBAR_aa[a,a1] += tpp[a,a1] 
#
endpardo a, a1 
server_barrier 
#
ENDPROC HBAR_AB
#
PROC HBAR_IJ
#
pardo i, i1 
#
    tpp[i1,i] = fock_a[i1,i] 
    prepare HBAR_ii[i1,i] += tpp[i1,i]
#
endpardo i, i1 
server_barrier 
#
ENDPROC HBAR_IJ
#
PROC HBAR_AJIB     
#
pardo i1, a1, a, i
#
    request                              Viaai[i1,a1,a,i]  
    request                              Vaaii[a,a1,i1,i]  
    Tiaai[i1,a1,a,i]                   = Vaaii[a,a1,i1,i]
    Tiaai[i1,a1,a,i]                  -= Viaai[i1,a1,a,i]
    Tiaai[i1,a1,a,i]                  *= -1.0
    prepare HBAR_AJIB_aaaa[i1,a1,a,i] += Tiaai[i1,a1,a,i]
#
endpardo i1, a1, a, i
#
pardo i, a, b, j
#
    request                           Viaai[i,a,b,j] 
    Tiabj[i,a,b,j]                  = Viaai[i,a,b,j]
    prepare HBAR_AJIB_aabb[i,a,b,j]+= Tiabj[i,a,b,j]
#
endpardo i, a, b, j 
#
ENDPROC HBAR_AJIB     
#
PROC form_H
#    --------- 
#
server_barrier 
#
print "Forming H_ab"
CALL HBAR_AB 
print "Forming H_ij"
CALL HBAR_IJ 
server_barrier 
# 
print "Forming H_ajib"
CALL HBAR_AJIB 
server_barrier
#
ENDPROC form_H
#
PROC form_diag
#    ----------- 
print "forming diagonals"
#
server_barrier
pardo a,i
    Tai[a,i] = 0.0
    put VCONV1A[a,i] = Tai[a,i]
endpardo a,i
server_barrier
#
pardo a, a1
    WHERE a==a1 
#
    taa[a,a1]      = fock_a[a,a1]
    execute return_diagonal_elements taa[a,a1]
    prepare DDaa[a,a1] = taa[a,a1]
#
endpardo a, a1
#
# -----prepare f_ii diagonal = Sdii
#
pardo i, i1
    WHERE i==i1 
#
    tii[i1,i]      = fock_a[i1,i]
    execute return_diagonal_elements tii[i1,i]
    prepare DDii[i1,i] = tii[i1,i]
#
endpardo i, i1
#
pardo a, i
#
    tai[a,i]=0.0
#
    do a1
	where a == a1
    do i1
	where i == i1
#
        request Viaai[i,a,a1,i1]
        request Vaaii[a,a1,i,i1]

        Taaii[a,a1,i,i1]  = Viaai[i,a,a1,i1]
        T1aaii[a,a1,i,i1] = Vaaii[a,a1,i,i1]

        Taaii[a,a1,i,i1] *= 2.0
        Taaii[a,a1,i,i1] -= T1aaii[a,a1,i,i1]
	execute return_diagonal_elements Taaii[a,a1,i,i1]
	tia[i1,a1]       = 1.0
	t1ai[a,i]        = Taaii[a,a1,i,i1]*tia[i1,a1]
	tai[a,i]        += t1ai[a,i]
#
    enddo i1
    enddo a1

    do a1
	where a == a1
	Taa[a,a1] = fock_a[a,a1]
	execute return_diagonal_elements Taa[a,a1]
	T1ai[a1,i] = 1.0
	T2ai[a,i] = Taa[a,a1]*T1ai[a1,i]
	Tai[a,i] += T2ai[a,i]
    enddo a1

    do i1
	where i==i1
	Tii[i,i1] = fock_a[i,i1]
	execute return_diagonal_elements Tii[i,i1]
	T1ai[a,i1] = -1.0
	T2ai[a,i] = Tii[i,i1]*T1ai[a,i1]
	Tai[a,i] += T2ai[a,i]
    enddo i1

    PUT VCONV1A[a,i] += tai[a,i]
#
#
endpardo a, i
#
server_barrier
#
ENDPROC form_diag
#
PROC form_HB
#
print "Forming H*B"
#
pardo ksub,a,i
    Tkai[ksub,a,i] = 0.0
    prepare HB1_a[ksub,a,i] = Tkai[ksub,a,i]
endpardo ksub,a,i
server_barrier
do ksub
#
    pardo a,i,a1,i1
        request HBAR_AJIB_aaaa[i1,a1,a,i]
	request RB1_a[ksub,a,i]

	Tkai[ksub,a1,i1] = HBAR_AJIB_aaaa[i1,a1,a,i]*RB1_a[ksub,a,i]
	prepare HB1_a[ksub,a1,i1] += Tkai[ksub,a1,i1]
    endpardo a,i,a1,i1
    pardo a,i,b,j
        request HBAR_AJIB_aabb[i,a,b,j]
	request RB1_a[ksub,b,j]

	Tkai[ksub,a,i] = HBAR_AJIB_aabb[i,a,b,j]*RB1_a[ksub,b,j]
	prepare HB1_a[ksub,a,i] += Tkai[ksub,a,i]
    endpardo a,i,b,j

    pardo a,i
        Tkai[ksub,a,i] = 0.0
	do i1
        request RB1_a[ksub,a,i1]

	T1kai[ksub,a,i] = RB1_a[ksub,a,i1]*fock_a[i,i1]
	T1kai[ksub,a,i] *= -1.0
	Tkai[ksub,a,i] += T1kai[ksub,a,i]
	enddo i1

        do a1
        request RB1_a[ksub,a1,i]

	T2kai[ksub,a,i] = RB1_a[ksub,a1,i]*fock_a[a,a1]
	Tkai[ksub,a,i] += T2kai[ksub,a,i]
        enddo a1

	prepare HB1_a[ksub,a,i] += Tkai[ksub,a,i]
    endpardo a,i
#
enddo ksub
server_barrier
#
ENDPROC form_HB
#
PROC form_BHB
#
print "Forming final B*HB"
#
pardo ksub,ksub1
    Tkk[ksub,ksub1] = 0.0
    prepare Gmat[ksub,ksub1] = Tkk[ksub,ksub1]
endpardo ksub,ksub1
server_barrier
#
pardo a,i
    do ksub
    do ksub1
	request RB1_a[ksub,a,i]
	request HB1_a[ksub1,a,i]
	Tkk[ksub,ksub1] = RB1_a[ksub,a,i]*HB1_a[ksub1,a,i]

	prepare Gmat[ksub,ksub1] += Tkk[ksub,ksub1]
    enddo ksub1
    enddo ksub
endpardo a,i
server_barrier
ENDPROC form_BHB
#
PROC diag_G
#
server_barrier
execute get_my_rank rank
if rank == 0.0
    do ksub
    do ksub1
	request Gmat[ksub,ksub1] 
	GSmat[ksub,ksub1] = Gmat[ksub,ksub1]
    enddo ksub1
    enddo ksub
#
#    print GSmat
#--
#-- In static alpha vecs index 1 is the range index 2 is the state
#-- La[i,state] Gmat[i,j] Ra[j,state] = E[state]
#--
#    execute gen_eigen_calc GSmat SAlphaL SAlphaR SEk
    execute eigen_calc GSmat SalphaR

    do ksub
    do ksub1
	where ksub == ksub1
	SEk[ksub] = GSmat[ksub,ksub1]
    enddo ksub1
    enddo ksub

#    print SEk
#    print salphaR

    do kstate
	SEk0[kstate] = SEk[kstate]
    enddo kstate
    print "-- RHF-CIS excitation energies --"
    do kstate
	allocate contiguous CIS_EE_Energy[kstate:kstate]
	CIS_EE_Energy[kstate:kstate] = SEk0[kstate] 
	print CIS_EE_Energy[kstate:kstate]
	deallocate contiguous CIS_EE_Energy[kstate:kstate]
    enddo kstate
#
#    print SEk0
#    print SEk
#
endif
server_barrier
broadcast_from root SAlphaR 
broadcast_from root SEk
broadcast_from root SEk0
server_barrier
#
ENDPROC diag_G
#
PROC move_by_one_R1K1
#
server_barrier
pardo a,i
    do kstate
        request R1k1_a[kstate,a,i]
        prepare R0k1_a[kstate,a,i] = R1k1_a[kstate,a,i]
    enddo kstate
endpardo a,i
# zero partition 1
server_barrier
#
ENDPROC move_by_one_R1K1
#
PROC form_new_R1K1
#
server_barrier
pardo a,i
    do kstate
        Tkai[kstate,a,i] = 0.0
        prepare R1k1_a[kstate,a,i] = Tkai[kstate,a,i]
    enddo kstate
endpardo a,i
server_barrier
#
do kstate
    pardo a,i
    Tkai[kstate,a,i] = 0.0
    do ksub
	request RB1_a[ksub,a,i] 
	T1kai[kstate,a,i] = RB1_a[ksub,a,i]*SalphaR[ksub,kstate]
	Tkai[kstate,a,i] += T1kai[kstate,a,i]
    enddo ksub
    prepare R1k1_a[kstate,a,i] = Tkai[kstate,a,i]
    endpardo a,i
enddo kstate
#
server_barrier
#
ENDPROC form_new_R1K1
#
PROC form_residual_R1
#
server_barrier
pardo a,i

    get VCONV1A[a,i]

do kstate
    etemp = SEk[kstate]
    etemp *= -1.0
    Tkai[kstate,a,i] = 0.0

    do ksub
	request HB1_a[ksub,a,i]
	request RB1_a[ksub,a,i]

# a*HB
	T1kai[kstate,a,i] = HB1_a[ksub,a,i]*SalphaR[ksub,kstate]

	Tkai[kstate,a,i] += T1kai[kstate,a,i]
# a*E*B
	T2kai[kstate,a,i]  = RB1_a[ksub,a,i]*SalphaR[ksub,kstate]
	T2kai[kstate,a,i] *= etemp

	Tkai[kstate,a,i] += T2kai[kstate,a,i]
    enddo ksub

    Tk[kstate] = 1.0
    Tai[a,i]   = 1.0

    T3kai[kstate,a,i] = Tk[kstate]^VCONV1A[a,i]
    T4kai[kstate,a,i] = etemp
    T3kai[kstate,a,i] += T4kai[kstate,a,i]

#    print Tkai[kstate,a,i]
#    print T3kai[kstate,a,i]
    execute invert_diagonal Tkai[kstate,a,i] T3kai[kstate,a,i]
    Tkai[kstate,a,i] *= -1.0
    prepare cRk1_a[kstate,a,i] = Tkai[kstate,a,i]

enddo kstate
endpardo a,i
server_barrier
#
ENDPROC form_residual_R1
#
PROC update_RB1
#
#print "updating RB1 vec"
server_barrier
pardo a,i
    allocate contiguous CLRB1_a[1:subspc,a:a,i:i]
    do kstate
        request R1k1_a[kstate,a,i]
        request R0k1_a[kstate,a,i]
        request cRk1_a[kstate,a,i]

# davidson space 1
        kstart = kstate
        CLRB1_a[kstart:kstart,a:a,i:i] = R0k1_a[kstate,a,i]
# davidson space 2
        kstart = kstate + roots
        CLRB1_a[kstart:kstart,a:a,i:i] = R1k1_a[kstate,a,i]
# davidson space 3
        kstart = kstate + 2*roots
        CLRB1_a[kstart:kstart,a:a,i:i] = cRk1_a[kstate,a,i]
    enddo kstate
    do ksub
        Tkai[ksub,a,i] = CLRB1_a[ksub:ksub,a:a,i:i]
        prepare RB1_a[ksub,a,i] = Tkai[ksub,a,i]
    enddo ksub

    deallocate contiguous CLRB1_a[1:subspc,a:a,i:i]
endpardo a,i
server_barrier
#
ENDPROC update_RB1
#
PROC normalize_RB1
#
server_barrier
do ksub
    normS = 0.0
    pardo a,i
        request RB1_a[ksub,a,i]
	Tkai[ksub,a,i] = RB1_a[ksub,a,i]
	normT  = Tkai[ksub,a,i]*RB1_a[ksub,a,i]
	normS += normT
    endpardo a,i
#
    server_barrier
    norm1 = 0.0
    norm2 = 1.0
    collective norm1 += normS
#    if norm1 > normcrit
	norm2 = (norm1)**(-0.5)
#    endif

     pardo a,i
         prepare RB1_a[ksub,a,i] *= norm2
     endpardo a,i

#    print norm2
#    Tk[ksub] = norm2
#
#    server_barrier
#    pardo a,i
#	request RB1_a[ksub,a,i]
#        Tai[a,i] = Tk[ksub]*RB1_a[ksub,a,i]
#	put DRNai[a,i] = Tai[a,i]
#    endpardo a,i
#    server_barrier
##
#    T1k[ksub] = 1.0
#    pardo a,i
#        get DRNai[a,i]
#	Tkai[ksub,a,i] = T1k[ksub]*DRNai[a,i]
#	prepare RB1_a[ksub,a,i] = Tkai[ksub,a,i]
#    endpardo a,i
#
enddo ksub
server_barrier
pardo a,i
put DRNai[a,i] = 0.0
endpardo a,i
#
ENDPROC normalize_RB1
#
PROC GS_RB1
# -----------------------------
# Gram-Schmidt orthogonalization 
#   x(q) = x(q) - x(j)*<x(q)|x(k)>/<x(k)|x(k)>
#   with update done via numerically stable in place update
# -----------------------------
server_barrier
do qsub
do ksub
where ksub < qsub
#
server_barrier
    overlapS = 0.0
    normS    = 0.0
    Tk[qsub] = 1.0
    T1k[ksub] = 1.0
#
# form overlap and norm
#
    server_barrier
    pardo a,i
        request RB1_a[qsub,a,i]
	request RB1_a[ksub,a,i]

	T1ai[a,i] = Tk[qsub]*RB1_a[qsub,a,i]
	T2ai[a,i] = T1k[ksub]*RB1_a[ksub,a,i]

	overlapT  = T1ai[a,i]*T2ai[a,i]
	overlapS += overlapT

	normT  = RB1_a[ksub,a,i]*RB1_a[ksub,a,i]
	normS += normT
#
# store x(k) in temporary distributed
#
	put DRNai[a,i] = T2ai[a,i]
    endpardo a,i
    server_barrier
    norm1 = 0.0
    norm2 = 1.0
    overlap1 = 0.0
    collective overlap1 += overlapS
    collective norm1 += normS
    overlap2 = overlap1/norm1
    overlap2 *= -1.0
    Tkk[qsub,ksub] = overlap2
#    T2k[qsub] = overlap2

# update x(q) inplace
    pardo a,i
        request RB1_a[ksub,a,i]
	Tkai[qsub,a,i] = Tkk[qsub,ksub]*RB1_a[ksub,a,i]
	prepare RB1_a[qsub,a,i] += Tkai[qsub,a,i]
    endpardo a,i

#    pardo a,i
#	get DRNai[a,i]
#	Tkai[qsub,a,i] = T2k[qsub]*DRNai[a,i]
#	prepare RB1_a[qsub,a,i] += Tkai[qsub,a,i]
#    endpardo a,i
#
enddo ksub
enddo qsub
#
server_barrier
#
ENDPROC GS_RB1
#
PROC update_B
#
print "Updating vector"
#
call move_by_one_R1K1

call form_new_R1K1

call form_residual_R1

call update_RB1

call normalize_RB1
call GS_RB1
call normalize_RB1
#
#
# JNB debug - vector print
# 
#pardo a ,i
#allocate contiguous CLRB1_a[1:eom_subspc,a:a,i:i]
#do kstate
#request cRk1_a[kstate,a,i]
#CLRB1_a[kstate:kstate,a:a,i:i] = cRk1_a[kstate,a,i]
#enddo kstate
#print CLRB1_a[1:eom_roots,a:a,i:i]
#deallocate contiguous CLRB1_a[1:eom_subspc,a:a,i:i]
#endpardo a ,i
# JNB debug - overlap print
#do ksub
#do ksub1
#    Tkk[ksub,ksub1] = 0.0
#    pardo a,i
#        request RB1_a[ksub,a,i]
#        request RB1_a[ksub1,a,i]
#	T1kk[ksub,ksub1] = RB1_a[ksub,a,i]*RB1_a[ksub1,a,i]
#	Tkk[ksub,ksub1] += T1kk[ksub,ksub1]
#    endpardo a,i
#    S1overlap[ksub,ksub1] = Tkk[ksub,ksub1]
#enddo ksub1
#enddo ksub
#print S1overlap

#
ENDPROC update_B
#
PROC normalize_R1k1
#
server_barrier
do kstate
    normS = 0.0
    pardo a,i
        request R1k1_a[kstate,a,i]
	Tkai[kstate,a,i] = R1k1_a[kstate,a,i]
	normT  = Tkai[kstate,a,i]*R1k1_a[kstate,a,i]
	normS += normT
    endpardo a,i
#
    server_barrier
    norm1 = 0.0
    norm2 = 1.0
    collective norm1 += normS
    norm2 = (norm1)**(-0.5)
    Tk[kstate] = norm2
#
    server_barrier
    pardo a,i
	request R1k1_a[kstate,a,i]
        Tai[a,i] = Tk[kstate]*R1k1_a[kstate,a,i]
	put DRNai[a,i] = Tai[a,i]
    endpardo a,i
    server_barrier
#
    T1k[kstate] = 1.0
    pardo a,i
        get DRNai[a,i]
	Tkai[kstate,a,i] = T1k[kstate]*DRNai[a,i]
	prepare R1k1_a[kstate,a,i] = Tkai[kstate,a,i]
    endpardo a,i
#
enddo kstate
server_barrier
pardo a,i
put DRNai[a,i] = 0.0
endpardo a,i
server_barrier
#
ENDPROC normalize_R1k1
#
PROC GS_R1k1
# -----------------------------
# Gram-Schmidt orthogonalization 
#   x(q) = x(q) - x(j)*<x(q)|x(k)>/<x(k)|x(k)>
#   with update done via numerically stable in place update
# -----------------------------
server_barrier
do qstate
do kstate
where kstate < qstate
#
    overlapS = 0.0
    normS    = 0.0
    Tk[qstate] = 1.0
    T1k[kstate] = 1.0
#
# form overlap and norm
#
    pardo a,i
        request R1k1_a[qstate,a,i]
	request R1k1_a[kstate,a,i]

	T1ai[a,i] = Tk[qstate]*R1k1_a[qstate,a,i]
	T2ai[a,i] = T1k[kstate]*R1k1_a[kstate,a,i]

	overlapT  = T1ai[a,i]*T2ai[a,i]
	overlapS += overlapT

	normT  = R1k1_a[kstate,a,i]*R1k1_a[kstate,a,i]
	normS += normT
#
# store x(k) in temporary distributed
#
	put DRNai[a,i] = T2ai[a,i]
    endpardo a,i
    server_barrier
    norm1 = 0.0
    norm2 = 1.0
    overlap1 = 0.0
    collective overlap1 += overlapS
    collective norm1 += normS
    overlap2 = overlap1/norm1
    overlap2 *= -1.0
    T2k[qstate] = overlap2

# update x(q) inplace
    pardo a,i
	get DRNai[a,i]
	Tkai[qstate,a,i] = T2k[qstate]*DRNai[a,i]
	prepare R1k1_a[qstate,a,i] += Tkai[qstate,a,i]
    endpardo a,i
#
enddo kstate
enddo qstate
#
server_barrier
#
ENDPROC GS_R1k1
#------------------------------------------------------------------------
#
# -----------------
#  MAIN
# -----------------
normcrit = 0.0000000000001
ZERO = 0.0
root = 0
subspc = eom_subspc
roots = eom_roots
#
#
print " "
print "-- Parallel RHF-CIS program v2"
print "-- J. Phys. Chem. 1992, 96, 135-149."
print "-- Subspace collapse symmetric davidson update"
print "-- J. Comp. Phys. 1992, 103, 382-389 | J. Comp. Chem. 2001, 22, 1574-1589"
print "-- Written by Jason N. Byrd, 2015"
print " "
server_barrier
CALL READ_AMP
call form_H
call form_diag
call form_guess
server_barrier
#
#
do kiter
    print " "
    print kiter
    call form_HB
    call form_BHB
    call diag_G
    call update_B
#
    etemp = 0.0
    etemp2 = 0.0
    do kstate
	etemp1 = SEk0[kstate]
	etemp2 = SEkold[kstate]
	etemp1 -= etemp2
	etemp2 = etemp1**2.0
	etemp += etemp2
	etemp3 += 1.0
    enddo kstate
    rmsconv = (etemp/etemp3)**0.5
    do kstate
	SEkold[kstate] = SEk0[kstate]
    enddo kstate
    print rmsconv
    server_barrier
    assert_same rmsconv
    if rmsconv < eom_tol
	exit
    endif
#
enddo kiter

print " "
print "CIS has converged"
print "FINAL RHF-CIS excitation energies"
do kstate
    allocate contiguous CIS_EE_Energy[kstate:kstate]
    CIS_EE_Energy[kstate:kstate] = SEk0[kstate] 
    print CIS_EE_Energy[kstate:kstate]
    deallocate contiguous CIS_EE_Energy[kstate:kstate]
enddo kstate

# store vector
server_barrier
do kstate
pardo a,i
    request RB1_a[kstate,a,i]
    prepare R0k1_a[kstate,a,i] = RB1_a[kstate,a,i]
endpardo a,i
enddo kstate
server_barrier

#
set_persistent ca       "ca"
set_persistent Fock_a   "fock_a"
set_persistent Vaaii    "Vaaii"
set_persistent Viaai    "Viaai"
set_persistent R0k1_a   "C1_a"
set_persistent RB1_a    "B1_a"
set_persistent SEk0     "CIS_E"
server_barrier
#
#
ENDSIAL RCIS_RHF
