import "mcpt2_defs.sialx" 
import "mcpt2_vars.sialx"
#
SIAL tran_frag
      PROC FRAG_TRAN    
#     -------------- 

      sip_barrier

      print "Computing wC_ao"

# ----------------------------------------------------------------------------
#     zero wC_ao
# ----------------------------------------------------------------------------
      PARDO kfrag,mu,nu "Frag{i}{aa}{}"
      where (int)SwAO_frag[(index)mu] == kfrag
      where (int)SwAO_frag[(index)nu] == kfrag

	  PUT wC_ao[mu,nu] = 0.0

      ENDPARDO kfrag,mu,nu

      server_barrier

# ---------------------------------------------------------------------------- 
#     Form wC_ao  
# ---------------------------------------------------------------------------- 

      PARDO ifrag, jfrag, mu, nu "Frag{Nij}{aa}{}"
      WHERE jfrag != ifrag
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag      

	  LwC_ao[mu,nu] = 0.0 

	  DO j
	  where (int)SwOccA_frag[(index)j] == jfrag
	      allocate LVxxqq[mu,nu,j,j]
	  ENDDO j

	  DO lambda
          where (int)SwAO_frag[(index)lambda] == jfrag

	      DO j
	      where (int)SwOccA_frag[(index)j] == jfrag
		  allocate LVxxxq[mu,nu,lambda,j]
	      ENDDO j

	      DO sigma
	      where (int)SwAO_frag[(index)sigma] == jfrag

		  aoint[mu,nu,lambda,sigma]  = 0.0
		  execute compute_integral_batch aoint[mu,nu,lambda,sigma] #  1 1 2 2  

		  DO j
		  where (int)SwOccA_frag[(index)j] == jfrag
		      txxxq[mu,nu,lambda,j]   = aoint[mu,nu,lambda,sigma]*ca[sigma,j]
		      LVxxxq[mu,nu,lambda,j] += txxxq[mu,nu,lambda,j]
		  ENDDO j

	      ENDDO sigma

	      DO j
	      where (int)SwOccA_frag[(index)j] == jfrag

	      DO j1
	      where j == j1
	      where (int)SwOccA_frag[(index)j1] == jfrag
		  txxqq[mu,nu,j1,j]   = LVxxxq[mu,nu,lambda,j]*ca[lambda,j1]
		  LVxxqq[mu,nu,j1,j] += txxqq[mu,nu,j1,j] 
	      ENDDO j1
	      ENDDO j

	      DO j
	      where (int)SwOccA_frag[(index)j] == jfrag
		  deallocate LVxxxq[mu,nu,lambda,j]
	      ENDDO j

	  ENDDO lambda

	  DO j
	  where (int)SwOccA_frag[(index)j] == jfrag

	      DO j1
	      where j == j1 
	      where (int)SwOccA_frag[(index)j1] == jfrag
		  txxqq[mu,nu,j1,j] = LVxxqq[mu,nu,j1,j] 
		  txx[mu,nu]    = 0.0  
		  execute return_vpq txxqq[mu,nu,j1,j] txx[mu,nu] 
		  txx[mu,nu]   *= 2.0  
		  LwC_ao[mu,nu] += txx[mu,nu]
	      ENDDO j1

	  ENDDO j

	  PUT wC_ao[mu,nu] += LwC_ao[mu,nu]

	  DO j
	  where (int)SwOccA_frag[(index)j] == jfrag
	      deallocate LVxxqq[mu,nu,j,j]
	  ENDDO j

      ENDPARDO ifrag, jfrag, mu, nu

      sip_barrier
      print "Done initial formation of wC(AO)"

      PARDO ifrag, mu, nu "Frag{i}{aa}{}"
	 where (int)SwAO_frag[(index)mu] == ifrag
         where (int)SwAO_frag[(index)nu] == ifrag

             GET             wC_ao[mu,nu]
   
	     DO a
	     where (int)SwVirtA_frag[(index)a] == ifrag
		 DO i
		 where (int)SwOccA_frag[(index)i] == ifrag
		     txp[mu,i]     = wC_ao[mu,nu]*ca[nu,i]
		     tpp[a,i]     = txp[mu,i]*ca[mu,a]
		     PUT wC[a,i] += tpp[a,i]
		     t1pp[i,a]    = tpp[a,i]
		     PUT wC[i,a] += t1pp[i,a]
		 ENDDO i
	      ENDDO a
       
	      DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag
		  DO a1
		  where (int)SwVirtA_frag[(index)a1] == ifrag
		      txp[mu,a1] = wC_ao[mu,nu]*ca[nu,a1]
		      tpp[a,a1]  = txp[mu,a1]*ca[mu,a]
		      t1pp[a,a1] = tpp[a,a1]
		      PUT wC[a,a1] += tpp[a,a1]
		  ENDDO a1
	      ENDDO a
       
       
	      DO i1
	      where (int)SwOccA_frag[(index)i1] == ifrag
		  DO i
		  where (int)SwOccA_frag[(index)i] == ifrag
		      txp[mu,i] = wC_ao[mu,nu]*ca[nu,i]
		      tpp[i1,i]  = txp[mu,i]*ca[mu,i1]
		      t1pp[i1,i] = tpp[i1,i]
		      PUT wC[i1,i] += tpp[i1,i]
		  ENDDO i
	      ENDDO i1

      ENDPARDO ifrag, mu, nu

      sip_barrier 

      print "Done Final formation of wC(MO)"

# ---------------------------------------------------------------------------- 
#     First stage --> form Vxxxj (1122) 
# ---------------------------------------------------------------------------- 

PARDO ifrag, jfrag, mu, nu, lambda "Frag{ij}{aa}{a}"
where (int)elst_dist[ifrag,jfrag] == ifrag
where (int)SwAO_frag[(index)mu] == ifrag
where (int)SwAO_frag[(index)nu] == ifrag
where (int)SwAO_frag[(index)lambda] == jfrag

    DO j 
    where (int)SwOccA_frag[(index)j] == jfrag
	  allocate LVxxxq[mu,nu,lambda,j] 
    ENDDO j 

    DO sigma 
    where (int)SwAO_frag[(index)sigma] == jfrag

	  aoint[mu,nu,lambda,sigma]  = 0.0 
	  execute compute_integral_batch aoint[mu,nu,lambda,sigma] #  1 1 2 2  

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      txxxq[mu,nu,lambda,j]   = aoint[mu,nu,lambda,sigma]*ca[sigma,j] 
	      LVxxxq[mu,nu,lambda,j] += txxxq[mu,nu,lambda,j] 
	  ENDDO j 
    ENDDO sigma 


    DO j 
    where (int)SwOccA_frag[(index)j] == jfrag

        put Vxxxq[mu,nu,lambda,j] = LVxxxq[mu,nu,lambda,j]

    ENDDO j 

    DO j 
    where (int)SwOccA_frag[(index)j] == jfrag
	  deallocate LVxxxq[mu,nu,lambda,j] 
    ENDDO j 

ENDPARDO ifrag, jfrag, mu, nu, lambda

# Exchange integrals 

      PARDO ifrag, jfrag, nu, lambda, mu "Frag{ij}{aa}{a}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwAO_frag[(index)lambda] == ifrag
      where (int)SwAO_frag[(index)mu] == jfrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      allocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

	  DO sigma 
	  where (int)SwAO_frag[(index)sigma] == jfrag

	      aoint[mu,nu,lambda,sigma]  = 0.0 
	      execute compute_integral_batch aoint[mu,nu,lambda,sigma] #  1 1 2 2  

	      DO j 
	      where (int)SwOccA_frag[(index)j] == jfrag
		txxxq[mu,nu,lambda,j]   = aoint[mu,nu,lambda,sigma]*ca[sigma,j] 
		LVxxxq[mu,nu,lambda,j] += txxxq[mu,nu,lambda,j] 
	      ENDDO j 

	  ENDDO sigma 


	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag

	      DO i 
	      where (int)SwOccA_frag[(index)i] == ifrag
  		 txxqq[mu,nu,i,j]      = LVxxxq[mu,nu,lambda,j]*ca[lambda,i] 
		 PUT Vxxqq_x[mu,nu,i,j] += txxqq[mu,nu,i,j] 
	      ENDDO i  
	  ENDDO j 

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      deallocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

      ENDPARDO ifrag, jfrag, nu, lambda, mu
#
      PARDO ifrag, jfrag, mu, nu, lambda "Frag{ij}{aaa}{}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwAO_frag[(index)lambda] == ifrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      allocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

	  DO sigma 
	  where (int)SwAO_frag[(index)sigma] == jfrag

	      aoint[mu,nu,lambda,sigma]  = 0.0 
	      execute compute_integral_batch aoint[mu,nu,lambda,sigma] #  1 1 2 2  

	      DO j 
	      where (int)SwOccA_frag[(index)j] == jfrag
		    txxxq[mu,nu,lambda,j]   = aoint[mu,nu,lambda,sigma]*ca[sigma,j] 
		    LVxxxq[mu,nu,lambda,j] += txxxq[mu,nu,lambda,j] 
	      ENDDO j 

	  ENDDO sigma 


	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag

	      DO i 
	      where (int)SwOccA_frag[(index)i] == ifrag
		    txxqq[mu,nu,i,j]      = LVxxxq[mu,nu,lambda,j]*ca[lambda,i] 
		    PUT Vxxqq_x[mu,nu,i,j] += txxqq[mu,nu,i,j] 
	      ENDDO i  

	  ENDDO j 

	  DO j 
	  where (int)SwOccA_frag[(index)j] == jfrag
	      deallocate LVxxxq[mu,nu,lambda,j] 
	  ENDDO j 

      ENDPARDO ifrag, jfrag, mu, nu, lambda


sip_barrier

PARDO ifrag, jfrag, mu, nu, lambda "Frag{ij}{aa}{a}"
where (int)elst_dist[ifrag,jfrag] == ifrag
where (int)SwAO_frag[(index)mu] == ifrag
where (int)SwAO_frag[(index)nu] == ifrag
where (int)SwAO_frag[(index)lambda] == jfrag

    DO j 
    where (int)SwOccA_frag[(index)j] == jfrag
          get Vxxxq[mu,nu,lambda,j]
	  DO i1 
	  where (int)SwOccA_frag[(index)i1] == ifrag
	      txpxq[mu,i1,lambda,j]      = Vxxxq[mu,nu,lambda,j]*ca[nu,i1] 
	      PUT Vxpxq[mu,i1,lambda,j] += txpxq[mu,i1,lambda,j] 
	  ENDDO i1 
    ENDDO j 
ENDPARDO ifrag, jfrag, mu, nu, lambda

PARDO ifrag, jfrag, mu, nu, lambda "Frag{ij}{aa}{a}"
where (int)elst_dist[ifrag,jfrag] == ifrag
where (int)SwAO_frag[(index)mu] == ifrag
where (int)SwAO_frag[(index)nu] == ifrag
where (int)SwAO_frag[(index)lambda] == jfrag

    DO j 
    where (int)SwOccA_frag[(index)j] == jfrag
          get Vxxxq[mu,nu,lambda,j]
	  DO i1 
	  where (int)SwOccA_frag[(index)i1] == ifrag
	      tpxxq[i1,nu,lambda,j]      = Vxxxq[mu,nu,lambda,j]*ca[mu,i1] 
	      PUT Vpxxq[i1,nu,lambda,j] += tpxxq[i1,nu,lambda,j] 
	  ENDDO i1 
    ENDDO j 
ENDPARDO ifrag, jfrag, mu, nu, lambda

PARDO ifrag, jfrag, mu, nu, lambda "Frag{ij}{aa}{a}"
where (int)elst_dist[ifrag,jfrag] == ifrag
where (int)SwAO_frag[(index)mu] == ifrag
where (int)SwAO_frag[(index)nu] == ifrag
where (int)SwAO_frag[(index)lambda] == jfrag

    DO j 
    where (int)SwOccA_frag[(index)j] == jfrag
          get Vxxxq[mu,nu,lambda,j]
	  DO j1  
	  where (int)SwOccA_frag[(index)j1] == jfrag
	      txxqq[mu,nu,j1,j]      = Vxxxq[mu,nu,lambda,j]*ca[lambda,j1] 
	      PUT Vxxqq[mu,nu,j1,j] += txxqq[mu,nu,j1,j] 
	  ENDDO j1  
    ENDDO j 
ENDPARDO ifrag, jfrag, mu, nu, lambda

# ---------------------------------------------------------------------------- 
#     Done second stage --> form Vixxj (1122) 
# ---------------------------------------------------------------------------- 
      sip_barrier 
      print "Done first two stages of two-electron integral transformation" 

# ---------------------------------------------------------------------------- 
#     Third stage --> form Vxibj (1122) 
# ---------------------------------------------------------------------------- 

      PARDO ifrag, jfrag, mu, i, lambda, j "Frag{ij}{ao}{ao}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwAO_frag[(index)lambda] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag

	  GET                    Vxpxq[mu,i,lambda,j] 

	  DO b 
	  where (int)SwVirtA_frag[(index)b] == jfrag
	      txpqq[mu,i,b,j]      = Vxpxq[mu,i,lambda,j]*ca[lambda,b] 
	      PUT Vxpbq[mu,i,b,j] += txpqq[mu,i,b,j] 
	  ENDDO b 

      ENDPARDO ifrag,jfrag, mu, i, lambda, j

# ---------------------------------------------------------------------------- 
#     Third stage --> form Vixbj (1122) 
# ---------------------------------------------------------------------------- 
#
      PARDO ifrag, jfrag, nu, i, lambda, j "Frag{ij}{ao}{ao}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwAO_frag[(index)lambda] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag

	  GET                    Vpxxq[i,nu,lambda,j] 

	  DO b 
	  where (int)SwVirtA_frag[(index)b] == jfrag
	      tpxqq[i,nu,b,j]      = Vpxxq[i,nu,lambda,j]*ca[lambda,b] 
	      PUT Vixbj[i,nu,b,j] += tpxqq[i,nu,b,j] 
	  ENDDO b 

	  DO j1 
	  where (int)SwOccA_frag[(index)j1] == jfrag
	      tpxqq[i,nu,j1,j]      = Vpxxq[i,nu,lambda,j]*ca[lambda,j1] 
	      PUT Vixjj[i,nu,j1,j] += tpxqq[i,nu,j1,j] 
	  ENDDO j1  
      ENDPARDO ifrag,jfrag, nu, i, lambda, j
#
      PARDO ifrag, jfrag, nu, mu, j, j1 "Frag{ij}{aa}{oo}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwOccA_frag[(index)j1] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag

	  GET                 Vxxqq[mu,nu,j1,j] 

	  DO a 
	  where (int)SwVirtA_frag[(index)a] == ifrag
	      tpxqq[a,nu,j1,j]      = Vxxqq[mu,nu,j1,j]*ca[mu,a] 
	      PUT Vaxjj[a,nu,j1,j] += tpxqq[a,nu,j1,j] 
	  ENDDO a 

      ENDPARDO ifrag,jfrag, nu, mu, j, j1
#
      PARDO ifrag, jfrag,nu,i,mu,j "Frag{ij}{ao}{ao}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwAO_frag[(index)mu] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag
         icount = (scalar)ifrag
         jcount = (scalar)jfrag
       
		 GET                 Vxxqq_x[mu,nu,i,j] 

		 DO i1 
		 where (int)SwOccA_frag[(index)i1] == ifrag
		       txpqq[mu,i1,i,j]      = Vxxqq_x[mu,nu,i,j]*ca[nu,i1] 
		       PUT Vxiij[mu,i1,i,j] += txpqq[mu,i1,i,j] 
		 ENDDO i1  

      ENDPARDO ifrag, jfrag,nu,i,mu,j

      PARDO ifrag, jfrag,nu,i,mu,j "Frag{ij}{aoa}{o}" ####line 407
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwOccA_frag[(index)j] == jfrag

		 GET                 Vxxqq_x[mu,nu,i,j] 

		 DO i1 
		 where (int)SwOccA_frag[(index)i1] == ifrag
		       txpqq[mu,i1,i,j]      = Vxxqq_x[mu,nu,i,j]*ca[nu,i1] 
		       PUT Vxiij[mu,i1,i,j] += txpqq[mu,i1,i,j] 
		 ENDDO i1  

      ENDPARDO ifrag, jfrag,nu,i,mu,j

      print "Done third stage of two-electron integral transformation" 
      sip_barrier 

# ---------------------------------------------------------------------------- 
#     Fourth stage --> form Vaibj (1122) 
# ---------------------------------------------------------------------------- 

      PARDO ifrag, jfrag, mu, i, b, j "Frag{ij}{ao}{vo}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwVirtA_frag[(index)b] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag

	  GET               Vxpbq[mu,i,b,j] 

	  DO a 
	  where (int)SwVirtA_frag[(index)a] == ifrag
		tppqq[a,i,b,j]      = Vxpbq[mu,i,b,j]*ca[mu,a] 
		PUT Vaibj[a,i,b,j] += tppqq[a,i,b,j] 
	  ENDDO a 

      ENDPARDO ifrag, jfrag, mu, i, b, j

# ---------------------------------------------------------------------------- 
#     Fourth stage --> form Viabj (1122) 
# ---------------------------------------------------------------------------- 
      PARDO ifrag, jfrag, nu, i, b, j  "Frag{ij}{ao}{vo}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwVirtA_frag[(index)b] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag
#

	  GET               Vixbj[i,nu,b,j]  

	  DO a 
	  where (int)SwVirtA_frag[(index)a] == ifrag
		tppqq[i,a,b,j]      = Vixbj[i,nu,b,j]*ca[nu,a] 
		PUT Viabj[i,a,b,j] += tppqq[i,a,b,j] 
	  ENDDO a 

      ENDPARDO ifrag,jfrag, nu, i, b, j

      PARDO ifrag, jfrag, nu, a, j, j1 "Frag{ij}{av}{oo}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwVirtA_frag[(index)a] == ifrag
      where (int)SwOccA_frag[(index)j1] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag

	  GET                Vaxjj[a,nu,j1,j] 

	  DO a1 
	  where (int)SwVirtA_frag[(index)a1] == ifrag
		tppqq[a,a1,j1,j]      = Vaxjj[a,nu,j1,j]*ca[nu,a1] 
		PUT Vaajj[a,a1,j1,j] += tppqq[a,a1,j1,j] 
	  ENDDO a1 

      ENDPARDO ifrag,jfrag, nu, a, j, j1

# ---------------------------------------------------------------------------- 
#     Fourth stage --> form Viijj (1122) 
# ---------------------------------------------------------------------------- 
#
      PARDO ifrag, jfrag, nu, i, j, j1  "Frag{ij}{ao}{oo}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)nu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwOccA_frag[(index)j] == jfrag
      where (int)SwOccA_frag[(index)j1] == jfrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag

	  GET                Vixjj[i,nu,j1,j] 

	  DO i1 
	  where (int)SwOccA_frag[(index)i1] == ifrag
		tppqq[i,i1,j1,j]      = Vixjj[i,nu,j1,j]*ca[nu,i1] 
		PUT Viijj[i,i1,j1,j] += tppqq[i,i1,j1,j] 
	  ENDDO i1 

      ENDPARDO ifrag, jfrag, nu, i, j, j1

      PARDO ifrag, jfrag, i, i1, mu, j  "Frag{ij}{oo}{ao}"
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwOccA_frag[(index)i1] == ifrag
      where (int)SwAO_frag[(index)mu] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag

	 GET                 Vxiij[mu,i1,i,j] 

	 DO j1 
	 where (int)SwOccA_frag[(index)j1] == jfrag
	       tppqq[j1,i1,i,j]      = Vxiij[mu,i1,i,j]*ca[mu,j1] 
	       PUT Vjiij[j1,i1,i,j] += tppqq[j1,i1,i,j] 
	 ENDDO j1  

      ENDPARDO ifrag, jfrag, i, i1, mu, j

      PARDO ifrag, jfrag, mu, i, i1, j "Frag{ij}{aoo}{o}" ######## line 532
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwAO_frag[(index)mu] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwOccA_frag[(index)i1] == ifrag
      where (int)SwOccA_frag[(index)j] == jfrag
        icount = (scalar)ifrag
        jcount = (scalar)jfrag

	 GET                 Vxiij[mu,i1,i,j] 

	 DO j1 
	 where (int)SwOccA_frag[(index)j1] == ifrag
	       tppqq[j1,i1,i,j]      = Vxiij[mu,i1,i,j]*ca[mu,j1] 
	       PUT Viiij[j1,i1,i,j] += tppqq[j1,i1,i,j] 
	 ENDDO j1  

      ENDPARDO ifrag, jfrag, mu, i, i1, j
      
      print "Done fourth stage of transformation" 

      sip_barrier 




# ---------------------------------------------------------------------------- 
#     Compute E^(20) on all dimers  
# ---------------------------------------------------------------------------- 
      PARDO ifrag, jfrag, a, i, b, j "Frag{ij}{vo}{vo}"   #### line 561
      where (int)elst_dist[ifrag,jfrag] == ifrag
      where (int)SwVirtA_frag[(index)a] == ifrag
      where (int)SwOccA_frag[(index)i] == ifrag
      where (int)SwVirtA_frag[(index)b] == jfrag
      where (int)SwOccA_frag[(index)j] == jfrag

	if ifrag != jfrag

	      GET                         Vaibj[a,i,b,j]  
	      tppqq[a,i,b,j]            = Vaibj[a,i,b,j] 
	      t1ppqq[a,i,b,j]           = Vaibj[a,i,b,j] 
	      execute energy_denominator_rhf  tppqq[a,i,b,j] fock_a  
	      etemp                     = tppqq[a,i,b,j]*t1ppqq[a,i,b,j]  
	      etemp                    *= 4.0 
	      t20disp[ifrag,jfrag]      = etemp 
	      PUT e20disp[ifrag,jfrag] += t20disp[ifrag,jfrag] 

	endif # icount != jcount 

	if ifrag == jfrag

	      GET                         Vaibj[a,i,b,j]  
	      GET                         Vaibj[a,j,b,i]  
	      tppqq[a,i,b,j]            = Vaibj[a,i,b,j] 
	      t2ppqq[a,i,b,j]           = Vaibj[a,i,b,j] 
	      t3ppqq[a,j,b,i]           = Vaibj[a,j,b,i] 
	      t1ppqq[a,i,b,j]           = t3ppqq[a,j,b,i] 
	      tppqq[a,i,b,j]           *= 2.0  
	      tppqq[a,i,b,j]           -= t1ppqq[a,i,b,j]   
	      execute energy_denominator_rhf  t2ppqq[a,i,b,j] fock_a  
	      etemp                     = tppqq[a,i,b,j]*t2ppqq[a,i,b,j]  
	     #print_scalar etemp 
	      t20disp[ifrag,jfrag]      = etemp 
	      PUT e20disp[ifrag,jfrag] += t20disp[ifrag,jfrag] 

	endif # icount != jcount 

      ENDPARDO ifrag,jfrag, a, i, b, j

      sip_barrier 


    execute get_my_rank rank
    if rank == 0.0
    do ifrag
    do jfrag
    where (int)elst_dist[ifrag,jfrag] == ifrag
       allocate contiguous final_e20disp[ifrag:ifrag,jfrag:jfrag]
       GET e20disp[ifrag,jfrag] 
       final_e20disp[ifrag:ifrag,jfrag:jfrag] = e20disp[ifrag,jfrag]
       print final_e20disp[ifrag:ifrag,jfrag:jfrag]
       deallocate contiguous final_e20disp[ifrag:ifrag,jfrag:jfrag]
    enddo jfrag
    enddo ifrag
    endif
#
      ENDPROC FRAG_TRAN    
#
# ---------------------------------------------------------------------------- 
#
      PROC REFORM_WC
      server_barrier
      PARDO ifrag, mu, nu "Frag{i}{aa}{}"
	 where (int)SwAO_frag[(index)mu] == ifrag
	 where (int)SwAO_frag[(index)nu] == ifrag

         icount = (scalar)ifrag

               txx[mu,nu] = 0.0 
               execute return_h1frag txx[mu,nu] icount  
# Reform wC_ao for use in alternative exchange energy 
               PUT wC_ao[mu,nu]  = txx[mu,nu] 

               do b 
	       where (int)SwVirtA_frag[(index)b] == ifrag
                     tbx[b,nu] = txx[mu,nu]*ca[mu,b] 

                     do j 
	             where (int)SwOccA_frag[(index)j] == ifrag
                           tbj[b,j]     = tbx[b,nu]*ca[nu,j] 
                           PUT wC[b,j] += tbj[b,j] 
                           tpp[j,b]     = tbj[b,j] 
                           PUT wC[j,b] += tpp[j,b] 
                     enddo j 

                     do b1  
		     where (int)SwVirtA_frag[(index)b1] == ifrag
                           tpp[b,b1] = tbx[b,nu]*ca[nu,b1] 
                           t1pp[b,b1] = tpp[b,b1] 
                           PUT wC[b,b1] += tpp[b,b1] 
                     enddo b1  

               enddo b 

               do i 
	       where (int)SwOccA_frag[(index)i] == ifrag

                     tpx[i,nu] = txx[mu,nu]*ca[mu,i] 

                     do j 
		     where (int)SwOccA_frag[(index)j] == ifrag
                           t1pp[i,j] = tpx[i,nu]*ca[nu,j] 
                           tpp[i,j] = t1pp[i,j] 
                           PUT wC[i,j] += tpp[i,j] 
                     enddo j 

               enddo i 

      ENDPARDO ifrag, mu, nu
      server_barrier

      ENDPROC REFORM_WC
# 
# -----------------------------------------------------------------------------
# 
      PROC OVERLAP_TRANS 
#     ------------------ 
      PARDO ifrag, jfrag 
         t20disp[ifrag,jfrag]    = 0.0  
         PUT e10pol[ifrag,jfrag] = t20disp[ifrag,jfrag] 
      ENDPARDO ifrag, jfrag 
      sip_barrier

      PARDO ifrag,jfrag
      where ifrag != jfrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag
#
         DO mu
	 where (int)SwAO_frag[(index)mu] == ifrag
         DO nu
	 where (int)SwAO_frag[(index)nu] == jfrag

	      execute return_ovl txx[mu,nu]  
	      PUT oed_ovl[mu,nu] = txx[mu,nu] 

         ENDDO nu
         ENDDO mu

      ENDPARDO ifrag,jfrag
      sip_barrier 
# 
      PARDO ifrag,jfrag
      where ifrag != jfrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag
#
         DO mu
	 where (int)SwAO_frag[(index)mu] == ifrag
         DO nu
	 where (int)SwAO_frag[(index)nu] == jfrag

	      GET oed_ovl[mu,nu] 

              DO a
	      where (int)SwVirtA_frag[(index)a] == jfrag
              DO i
	      where (int)SwOccA_frag[(index)i] ==ifrag

                    txp[mu,a] = oed_ovl[mu,nu]*ca[nu,a]  
                    tpp[i,a]  = txp[mu,a]*ca[mu,i] 
                    PUT SOVL[i,a] += tpp[i,a] 

              ENDDO i
              ENDDO a

              DO i1  
	      where (int)SwOccA_frag[(index)i1] == jfrag
              DO i
	      where (int)SwOccA_frag[(index)i] == ifrag

                    txp[mu,i1] = oed_ovl[mu,nu]*ca[nu,i1]  
                    tpp[i,i1]  = txp[mu,i1]*ca[mu,i] 
                    PUT SOVL[i,i1] += tpp[i,i1] 

              ENDDO i
              ENDDO i1  

              DO a1  
	      where (int)SwVirtA_frag[(index)a1] == jfrag
              DO a
	      where (int)SwVirtA_frag[(index)a] == ifrag

                    txp[mu,a1] = oed_ovl[mu,nu]*ca[nu,a1]  
                    tpp[a,a1]  = txp[mu,a1]*ca[mu,a] 
                    PUT SOVL[a,a1] += tpp[a,a1] 

              ENDDO a
              ENDDO a1  

         ENDDO nu
         ENDDO mu

      ENDPARDO ifrag,jfrag
      sip_barrier

# 
      PARDO ifrag,jfrag
      where ifrag != jfrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag
#
         esum = 0.0 
         DO a
	 where (int)SwVirtA_frag[(index)a] == ifrag
         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag

               GET wC[a,i] 

               DO j
	       where (int)SwOccA_frag[(index)j] == jfrag

                     GET SOVL[j,a] 
                     GET SOVL[i,j] 

                     tpp[i,a] = SOVL[i,j]*SOVL[j,a] 
                     etemp = wC[a,i]*tpp[i,a] 
                     etemp*= -2.0  
                     esum += etemp 

               ENDDO j
         ENDDO i
         ENDDO a

         if (int)elst_dist[ifrag,jfrag] == ifrag
#
         DO a
	 where (int)SwVirtA_frag[(index)a] == ifrag
         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag

               DO b
	       where (int)SwVirtA_frag[(index)b] == jfrag
               DO j
	       where (int)SwOccA_frag[(index)i] == jfrag
                     GET Vaibj[a,i,b,j] 
                     GET SOVL[j,a] 
                     GET SOVL[i,b] 
                     tpp[a,j] = Vaibj[a,i,b,j]*SOVL[i,b]  
                     etemp = SOVL[j,a]*tpp[a,j] 

                     etemp*= -1.0  # Not 2 to avoid overcounting ??? 
                     esum += etemp 
               ENDDO j
               ENDDO b
         ENDDO i
         ENDDO a
         endif # pair_flag > zero  

         t20disp[ifrag,jfrag]      = esum   
         PUT e10exch[ifrag,jfrag] += t20disp[ifrag,jfrag] 

      ENDPARDO ifrag,jfrag

# Now compute the first-order polarization energy 
#
      PARDO ifrag,jfrag
      where ifrag != jfrag
      where (int)elst_dist[ifrag,jfrag] == ifrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag

         esum = 0.0 

         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag
         DO i1 
         where i == i1 
               DO j
	       where (int)SwOccA_frag[(index)j] == jfrag
               DO j1 
               where j == j1 
                     GET Viijj[i,i1,j,j1] 
                     tpppp[i,i1,j,j1] = Viijj[i,i1,j,j1]
                     execute return_diagonal tpppp[i,i1,j,j1] etemp  
                     etemp*= 2.0  
                     esum += etemp 
               ENDDO j1
               ENDDO j 
         ENDDO i1 
         ENDDO i

         t20disp[ifrag,jfrag]     = esum  
         PUT e10pol[ifrag,jfrag] += t20disp[ifrag,jfrag] 

      ENDPARDO ifrag, jfrag
# 
      PARDO ifrag,jfrag
      where ifrag == jfrag
	 icount = (scalar)ifrag
	 jcount = (scalar)jfrag
# 
         esum = 0.0 
         DO i
	 where (int)SwOccA_frag[(index)i] == ifrag
         DO i1
         where i == i1 
               GET         VE[i,i1] 
               tpp[i,i1] = VE[i,i1] 
               execute return_diagonal tpp[i,i1] etemp  
               etemp*= 2.0  
               esum += etemp 
         ENDDO i1 
         ENDDO i

         t20disp[ifrag,jfrag]     = esum  
         PUT e10pol[ifrag,jfrag] += t20disp[ifrag,jfrag] 

      ENDPARDO ifrag, jfrag
      sip_barrier

      e10pol_at = 0.0
      esum = 0.0 
      sip_barrier
      pardo ifrag,jfrag
         GET e10pol[ifrag,jfrag] 
         etemp = e10pol[ifrag,jfrag] 
         esum += etemp 
      endpardo ifrag,jfrag
      sip_barrier
      collective e10pol_at += esum 
# this is the total systems e10 polarization energy
      e10pol_at += nn_rep
      print e10pol_at
#
      execute get_my_rank rank
      if rank == 0.0
      do ifrag
      do jfrag
      where jfrag >= ifrag
      where (int)elst_dist[ifrag,jfrag] == ifrag
	  icount = (scalar)ifrag
	  jcount = (scalar)jfrag
      
      # nn rep between fragments
	  execute compute_pair_nn icount jcount nn_rep
	  allocate contiguous final_e10pol[ifrag:ifrag,jfrag:jfrag]
	  GET                 e10pol[ifrag,jfrag] 
	  Tij[ifrag,jfrag] = e10pol[ifrag,jfrag]
      # factor of two for upper triangle
	  if jfrag > ifrag
	      Tij[ifrag,jfrag] *= 2.0 
	  endif
	  T1ij[ifrag,jfrag] = nn_rep
	  Tij[ifrag,jfrag] += T1ij[ifrag,jfrag]
	  final_e10pol[ifrag:ifrag,jfrag:jfrag] = Tij[ifrag,jfrag]
#print pair polarization energies
	  print final_e10pol[ifrag:ifrag,jfrag:jfrag]
	  deallocate contiguous final_e10pol[ifrag:ifrag,jfrag:jfrag]
      enddo jfrag
      enddo ifrag
      endif
      sip_barrier

# 
      ENDPROC OVERLAP_TRANS 
#
# ----------------------------------------------------------------------------
# 
PROC ADDITIONAL_FRAG_TRAN
    server_barrier
    print "performing additional first/second stage integral transformation"

    PARDO ifrag, jfrag, mu, nu, lambda "Frag{ij}{aa}{a}"
    where (int)elst_dist[ifrag,jfrag] == ifrag
    where (int)SwAO_frag[(index)mu] == ifrag
    where (int)SwAO_frag[(index)nu] == ifrag
    where (int)SwAO_frag[(index)lambda] == jfrag

	      DO j 
	      where (int)SwOccA_frag[(index)j] == jfrag
	    allocate LVxxxq[mu,nu,lambda,j] 
	      ENDDO j 

	      DO sigma 
	      where (int)SwAO_frag[(index)sigma] == jfrag

		aoint[mu,nu,lambda,sigma]  = 0.0 
		execute compute_integral_batch aoint[mu,nu,lambda,sigma] #  1 1 2 2  

		DO j 
		where (int)SwOccA_frag[(index)j] == jfrag
			  txxxq[mu,nu,lambda,j]   = aoint[mu,nu,lambda,sigma]*ca[sigma,j] 
			  LVxxxq[mu,nu,lambda,j] += txxxq[mu,nu,lambda,j] 
		ENDDO j 
	    ENDDO sigma 

	      DO j 
	      where (int)SwOccA_frag[(index)j] == jfrag
		DO a1
		where (int)SwVirtA_frag[(index)a1] == jfrag
			  txxqq[mu,nu,a1,j]= LVxxxq[mu,nu,lambda,j]*ca[lambda,a1] 
			  PUT Vxxai[mu,nu,a1,j] += txxqq[mu,nu,a1,j] 
		ENDDO a1
	      ENDDO j 

	      DO j 
	      where (int)SwOccA_frag[(index)j] == jfrag
	    deallocate LVxxxq[mu,nu,lambda,j] 
	      ENDDO j 

    ENDPARDO ifrag, jfrag, mu, nu, lambda

    server_barrier
    print "performing additional third transformation"

    PARDO ifrag, jfrag, mu, nu, b, j "Frag{ij}{aa}{vo}"
    where (int)elst_dist[ifrag,jfrag] == ifrag
    where (int)SwAO_frag[(index)mu] == ifrag
    where (int)SwAO_frag[(index)nu] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag

	get Vxxai[mu,nu,b,j]

	      do a1
	      where (int)SwVirtA_frag[(index)a1] == ifrag
		    tpxqq[a1,nu,b,j]= Vxxai[mu,nu,b,j]*ca[mu,a1]
		    PUT Vaxaj[a1,nu,b,j] += tpxqq[a1,nu,b,j]
	      enddo a1

    ENDPARDO ifrag, jfrag, mu, nu, b, j
    server_barrier
    print "performing additional fourth transformation"



    PARDO ifrag, jfrag, nu, i, j, j1  "Frag{ij}{ao}{oo}"
    where (int)elst_dist[ifrag,jfrag] == ifrag
    where (int)SwAO_frag[(index)nu] == ifrag
    where (int)SwOccA_frag[(index)i] == ifrag
    where (int)SwOccA_frag[(index)j] == jfrag
    where (int)SwOccA_frag[(index)j1] == jfrag


	      GET          Vixjj[i,nu,j1,j] 

	      DO a1 
	      where (int)SwVirtA_frag[(index)a1] == ifrag
		    tppqq[i,a1,j1,j]= Vixjj[i,nu,j1,j]*ca[nu,a1] 
		    PUT Viaii[i,a1,j1,j] += tppqq[i,a1,j1,j] 
	      ENDDO a1 

    ENDPARDO ifrag, jfrag, nu, i, j, j1

    PARDO ifrag, jfrag, nu, a, b, j "Frag{ij}{av}{vo}"
    where (int)elst_dist[ifrag,jfrag] == ifrag
    where (int)SwVirtA_frag[(index)a] == ifrag
    where (int)SwAO_frag[(index)nu] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag

	get Vaxaj[a,nu,b,j]

	      do a1
	      where (int)SwVirtA_frag[(index)a1] == ifrag
		    tppqq[a,a1,b,j]= Vaxaj[a,nu,b,j]*ca[nu,a1]
		    PUT Vaaai[a,a1,b,j] += tppqq[a,a1,b,j]
	      enddo a1

    ENDPARDO ifrag, jfrag, nu, a, b, j

    server_barrier
ENDPROC ADDITIONAL_FRAG_TRAN

ENDSIAL tran_frag
##
###############################################################################
