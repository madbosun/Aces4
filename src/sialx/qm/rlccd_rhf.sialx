import "rccsd_rhf_defs.sialx" 
SIAL CCSD_RHF_SV1
#
#-------------------------------------------------------------------------------
#
# Declare indeces 
# --------------- 
#
      index kiter    = 1: cc_iter   
      index   kbeg   = 1: scf_beg # Change to cc_beg 
      index   korder = 1: scf_hist # Change to cc_hist 
      index   kone   = 1: 1
      index   kdiis  = 1: 30 
      index   k1diis = 1: 30 
      index   jdiis  = 1: 30 
      index   j1diis = 1: 30 
      index      D1  = 1: 30 
      index      D2  = 1: 30 
      index   ixyz   = 1: 3
#
      aoindex mu     = 1: norb 
      aoindex nu     = 1: norb
      aoindex lambda = 1: norb
      aoindex sigma  = 1: norb
#
      moaindex i = baocc: eaocc
      moaindex i1= baocc: eaocc
      moaindex i2= baocc: eaocc
      moaindex i3= baocc: eaocc
#
      moaindex a = bavirt: eavirt
      moaindex a1= bavirt: eavirt
      moaindex a2= bavirt: eavirt
      moaindex a3= bavirt: eavirt
#
      moaindex j = baocc: eaocc
      moaindex j1= baocc: eaocc
      moaindex j2= baocc: eaocc
      moaindex j3= baocc: eaocc
#
      moaindex b = bavirt: eavirt
      moaindex b1= bavirt: eavirt
      moaindex b2= bavirt: eavirt
      moaindex b3= bavirt: eavirt
#
      moaindex p = baocc: eavirt
      moaindex p1= baocc: eavirt
      moaindex p2= baocc: eavirt
      moaindex p3= baocc: eavirt
#
      moaindex q = baocc: eavirt
      moaindex q1= baocc: eavirt
      moaindex q2= baocc: eavirt
      moaindex q3= baocc: eavirt
# 
# Declare static arrays 
# --------------------- 
#
# 
# Declare distributed arrays 
# --------------------- 
#
      distributed t1a_old[a,i]
      distributed t1a_new[a,i]
      distributed Fae_a[a,a1]
      distributed Fme_a[i,a]
      distributed Fmi_a[i,i1]
      distributed t1a_ax[a,mu]
      distributed Wminj_ab[i2,i,j3,j1]
# 
# Declare served arrays 
# --------------------- 
#
      served VSpipi[p1,i,p,i1]
      served Viaai[i,a1,a,i1]
      served Vaaii[a,a1,i,i1]
      served Vaaai[a2,a,a1,i]
      served Vpiqj[p,i,q,j]
      served T2new_ab[a,i,b,j]
      served T2old_aa[a,i,a1,i1]
      served T2old_ab[a,i,b,j]
      served L2old_aa[i,a,i1,a1]
      served L2old_ab[i,a,j,b]
      served Tau_ab[a,i,b,j]
      served Taup_aa[a,i,a1,i1]
      served Taup_ab[a,i,b,j]
      served Wiibb[i1,i,b,b1]
      served TAO_ab[lambda,i,sigma,j]
      served T2AO_ab[lambda,i,sigma,j]
      served TDaixj[a,i,nu,j]
      served e5aibj[a,i,b,j]
      served e6aibj[a,i,b,j]
      served e5aiai[a,i,b,j]
# 
# Declare local arrays 
# --------------------- 
#
      local LTAO_ab[lambda,i,sigma,i1]
      local LDaixj[a,i,nu,j]
      local L3aiai[a2,i1,a,i2]
      local L4aiai[a1,i,a2,i1]
      local L1aibj[a1,i,b,j]
      local L3aibj[a,i1,b,j]
      local Liibj[i1,i,b,j]
      local L1iibj[i,i1,b,j]
      local Laabj[a,a1,b,j]
      local L1aiii[a1,i2,i,i1]
      local LWaibj[a,i,b,j]
      local LWiaai[i1,a,a2,i]
      local LWjbai[j,b,a,i]
# 
# Declare scalar arrays 
# --------------------- 
#
      scalar ncount1
      scalar ncount2
      scalar jcount
      scalar kcount
      scalar niter
      scalar zero
      scalar one
      scalar two
      scalar five
      scalar six
      scalar seven
      scalar lccd_correlation
      scalar lccd_energy
      scalar mp2_correlation
      scalar etemp
      scalar escr
      scalar esum
      scalar esuma
      scalar esumb
      scalar esumab
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar enew
      scalar eold
      scalar ecrit
      scalar ediff
# 
# Declare temp arrays 
# --------------------- 
#
      temp Tiaai[i,a1,a,i1]
      temp Taaai[a2,a,a1,i]
      temp Txixj[mu,i,nu,j]
      temp T1xixj[mu,i,nu,j]
      temp Taiai[p,i,p1,i1]
      temp T1aiai[p,i,p1,i1]
      temp T2aiai[p,i,p1,i1]
      temp T3aiai[p,i,p1,i1]
      temp T1bjbj[q,j,q1,j1]
      temp T2bjbj[q,j,q1,j1]
      temp Tiajb[i,a,j,b]
      temp Tiaia[i,a,i1,a1]
      temp Taibj[p,i,q,j]
      temp T1aibj[p,i,q,j]
      temp T2aibj[p,i,q,j]
      temp T3aibj[p,i,q,j]
      temp T4aibj[p,i,q,j]
      temp Tpppp[p3,p2,p1,p]
      temp tmp1_aiai[a,i,a1,i1]
      temp tmp2_aiai[a,i,a1,i1]
      temp tmp1_aibj[a,i,b,j]
      temp tmp2_aibj[a,i,b,j]
      temp Tai[a,i]
      temp T1ai[a,i]
      temp T2ai[a,i]
      temp T3ai[a,i]
      temp Tbj[b,j]
      temp Taa[a,a1]
      temp T1aa[a,a1]
      temp Tia[i,a]
      temp Tme_a[i,a]
      temp Tii[i,i1]
      temp T1ii[i,i1]
      temp  Tiijj[i,i1,j2,j3]
      temp T1iijj[i,i1,j2,j3]
      temp  tmp_aa[a,a1]
      temp tmp1_aa[a,a1]
      temp  tmp_ii[i,i1]
      temp tmp1_ii[i,i1]
      temp T1aaai[a,a1,a2,i]
      temp R1aibj[a,i,b,j]
      temp  Tiiqq[i,i1,q,q1]
      temp T1iiqq[i,i1,q,q1]
      temp  Tjjai[j,j1,a,i]
      temp T1jjai[j,j1,a,i]
      temp  Tiibj[i,i1,b,j]
      temp T1iibj[i,i1,b,j]
      temp  Tjbai[j,b,a,i]
      temp tpx[p,mu]
      temp t1px[p,mu]
      temp AOINT[mu,nu,lambda,sigma]
      temp Yab[lambda,i,mu,j]
      temp Y1ab[lambda,i,mu,j]
      temp TYaiai[a,i,a1,i1]
      temp Taixj[a,i,nu,j]
#
# Arrays used in the DIIS 
# -----------------------
#
      int Iorder  
      int Idiis_order
      static BB[d1,d2] 
      served Daibj[a,i,b,j,kdiis] 
      served Eaibj[a,i,b,j,jdiis] 
      served D0aibj[a,i,b,j] 
      served D0ai[a,i] 
      distributed DIST_BB[d1,d2] 

      distributed Dai[a,i,kdiis] 
      distributed Eai[a,i,jdiis] 

      scalar n1 
      scalar n2 
      scalar worder  
      scalar diis_start
      scalar diis_order
      scalar temp_order

      temp tbb[d1,d2] 

      temp   DAOINT[mu,nu]
      static Sxyz[ixyz]
      static scf_dipole[ixyz]
      static dipole[ixyz]
      served Dpq_11[p,q]
      served Dxx_11[mu,nu]
      served Dpx_11[p,nu]
      temp Txx[mu,nu]
      temp Txx1[mu,nu]
      temp T1xx[mu,nu]
      temp Tpq[p,q]
      scalar dsum
#
#    ------------------------------------------------------------------------ 
PROC read_2el

restore_persistent VSpipi "VSpipi"
restore_persistent Vpiqj  "Vpiqj"
restore_persistent Vaaii  "Vaaii"
restore_persistent Viaai  "Viaai"
#

endPROC read_2el
#    ------------------------------------------------------------------------ 
PROC IGUESS_UHF

#
pardo a,b,i,j
#
    REQUEST                     Vpiqj[a,i,b,j]   
    REQUEST                     Vpiqj[b,j,a,i]   
    Taibj[a,i,b,j]            = Vpiqj[b,j,a,i]
    Taibj[a,i,b,j]           += Vpiqj[a,i,b,j]
    execute energy_denominator_rhf  Taibj[a,i,b,j] fock_a  
    Taibj[a,i,b,j]           *= 0.5  
    PREPARE T2old_ab[a,i,b,j] = Taibj[a,i,b,j]  
    PREPARE D0aibj[a,i,b,j]  = Taibj[a,i,b,j]  
#
endpardo a,b,i,j
server_barrier
#
endPROC IGUESS_UHF
#
PROC energy
#
ecorrab = 0.0
esumab  = 0.0
server_barrier
pardo a,i,b,j
#
    request Vpiqj[a,i,b,j] 
    request Vpiqj[a,j,b,i] 
#
    request T2old_ab[a,i,b,j] 
    Taibj[a,i,b,j] = T2old_ab[a,i,b,j]
#
    T1aibj[a,i,b,j]  = Vpiqj[a,i,b,j]
    T2aibj[a,i,b,j]  = Vpiqj[a,j,b,i]
    T1aibj[a,i,b,j] *= 2.0
    T1aibj[a,i,b,j] -= T2aibj[a,i,b,j]
#
    etemp = Taibj[a,i,b,j]*T1aibj[a,i,b,j]
    esumab += etemp
#
endpardo a,i,b,j
server_barrier
#
collective ecorrab += esumab
ecorrT = ecorrab
#
server_barrier
endPROC energy
#    ------------------------------------------------------------------------ 
# AA t2 amps
PROC T2oldaa
#
pardo a,i,b,j
    request T2old_ab[a,i,b,j] 
    request T2old_ab[a,j,b,i] 
    T1aibj[a,i,b,j]  = T2old_ab[a,i,b,j]
    T2aibj[a,i,b,j]  = T2old_ab[a,j,b,i]
    T1aibj[a,i,b,j] -= T2aibj[a,i,b,j]
    prepare T2old_aa[a,i,b,j] = T1aibj[a,i,b,j]
endpardo a,i,b,j
server_barrier
#
endPROC T2oldaa
#    ------------------------------------------------------------------------ 
proc t2new_zero
#
pardo a,i,b,j
    Taibj[a,i,b,j] = 0.0
    prepare T2new_ab[a,i,b,j] = Taibj[a,i,b,j]
endpardo a,i,b,j
server_barrier
#
endproc t2new_zero
#    ------------------------------------------------------------------------ 
proc T2newab
#
pardo a,b,i,j
#
    request Vpiqj[a,i,b,j] 
    Taibj[a,i,b,j]  = Vpiqj[a,i,b,j]
    Taibj[a,i,b,j] *= 0.5
    T1aibj[b,j,a,i] = Taibj[a,i,b,j]
    prepare T2new_ab[a,i,b,j] += Taibj[a,i,b,j]
    prepare T2new_ab[b,j,a,i] += T1aibj[b,j,a,i]
#
endpardo a,b,i,j
#
endproc T2newab
#    ------------------------------------------------------------------------ 
proc hhladder_ab
#
pardo a,b,i1,j1
    request T2old_ab[a,i1,b,j1] 
    do i
    do j
	request Vpiqj[i,i1,j,j1] 
	Taibj[a,i,b,j] = T2old_ab[a,i1,b,j1]*Vpiqj[i,i1,j,j1]
	prepare T2new_ab[a,i,b,j] += Taibj[a,i,b,j]
    enddo j
    enddo i
endpardo a,b,i1,j1
#
endproc hhladder_ab
#    ------------------------------------------------------------------------ 
proc AOppladder_ab

#    First create and zero-out intermediate arrays
#    ---------------------------------------------
#
pardo mu, nu, i, j
    Txixj[mu,i,nu,j]           = 0.0
    PREPARE TAO_ab[mu,i,nu,j]  = Txixj[mu,i,nu,j]
    PREPARE T2AO_ab[mu,i,nu,j] = Txixj[mu,i,nu,j]
endpardo mu, nu, i, j
#
server_barrier 
#
#    Form Half back transformed cluster arrays  
#    -----------------------------------------
#
#    AB spin combination
#     -------------------
#
pardo b, a, j, i
#
    REQUEST T2old_ab[a,i,b,j] 
#
    do mu
#
    Taixj[a,i,mu,j] = T2old_ab[a,i,b,j]*ca[mu,b]
#
	do nu
#
	    Txixj[nu,i,mu,j]           = Taixj[a,i,mu,j]*ca[nu,a]
	    PREPARE TAO_ab[nu,i,mu,j] += Txixj[nu,i,mu,j]
#
	enddo nu
    enddo mu
#
endpardo b, a, j, i
#
server_barrier   
#
#    Contract AOINT with half back transformed Amplitudes 
#    ----------------------------------------------------    
#
pardo mu, nu, lambda, sigma
WHERE mu < nu 
#
    execute compute_integral_batch aoint[lambda,mu,sigma,nu] 
#
    do i
    do j
#
	REQUEST                       TAO_ab[lambda,i,sigma,j] 
	Yab[mu,i,nu,j]              = aoint[lambda,mu,sigma,nu]*TAO_ab[lambda,i,sigma,j]
	Y1ab[nu,j,mu,i]             = Yab[mu,i,nu,j]
#
	PREPARE T2AO_ab[mu,i,nu,j] += Yab[mu,i,nu,j]
	PREPARE T2AO_ab[nu,j,mu,i] += Y1ab[nu,j,mu,i]
#
    enddo j
    enddo i
#
endpardo mu, nu, lambda, sigma
#
pardo mu, nu, lambda, sigma
WHERE mu == nu 
#
    execute compute_integral_batch aoint[lambda,mu,sigma,nu] 
#
    do i
    do j
#
	REQUEST                       TAO_ab[lambda,i,sigma,j] 
	Yab[mu,i,nu,j]              = aoint[lambda,mu,sigma,nu]*TAO_ab[lambda,i,sigma,j]
	PREPARE T2AO_ab[mu,i,nu,j] += Yab[mu,i,nu,j]
#
    enddo j
    enddo i
#
endpardo mu, nu, lambda, sigma
#
server_barrier  
#
#    Perform final transformation
#    ----------------------------
#
pardo nu, i, j
#
    allocate LDaixj[*,i,nu,j]
#
    do mu
#
	REQUEST T2AO_ab[mu,i,nu,j] 
#
	do a
	Taixj[a,i,nu,j]   = T2AO_ab[mu,i,nu,j]*ca[mu,a]
	LDaixj[a,i,nu,j] += Taixj[a,i,nu,j]
	enddo a
#
    enddo mu
#
    do a
	PREPARE TDaixj[a,i,nu,j] = LDaixj[a,i,nu,j]
    enddo a
#
    deallocate LDaixj[*,i,nu,j]
#
endpardo nu, i, j
server_barrier
#
pardo a, i, j, nu
#
    REQUEST TDaixj[a,i,nu,j] 
#
    do b
#
	Taibj[a,i,b,j]             = TDaixj[a,i,nu,j]*ca[nu,b]
	PREPARE T2new_ab[a,i,b,j] += Taibj[a,i,b,j]
#
    enddo b
#
endpardo a, i, j, nu
#
sip_barrier
endproc AOppladder_ab
#
#    ------------------------------------------------------------------------ 
proc phladder_ab
#
pardo j, b, a, i
    Taibj[a,i,b,j] = 0.0
#
    do i1
    do a1
#
	REQUEST              Viaai[i,a,a1,i1] 
	REQUEST              Vaaii[a1,a,i,i1] 
	REQUEST              T2old_ab[a1,i1,b,j] 

	TYaiai[a,i,a1,i1]   = 0.0
#
	Taiai[a,i,a1,i1]    = Vaaii[a1,a,i,i1]
	TYaiai[a,i,a1,i1]  -= Taiai[a,i,a1,i1]
	Taiai[a,i,a1,i1]    = Viaai[i,a,a1,i1]
	TYaiai[a,i,a1,i1]  += Taiai[a,i,a1,i1]
#
	R1aibj[a,i,b,j]     = TYaiai[a,i,a1,i1]*T2old_ab[a1,i1,b,j]
	Taibj[a,i,b,j]     += R1aibj[a,i,b,j]
#
    enddo a1
    enddo i1

    R1aibj[b,j,a,i]            = taibj[a,i,b,j]
    PREPARE T2new_ab[a,i,b,j] += taibj[a,i,b,j]
    PREPARE T2new_ab[b,j,a,i] += R1aibj[b,j,a,i]
#
endpardo j, b, a, i
#
pardo i1, a1, a, i
    REQUEST                     T2old_ab[a1,i1,a,i] 
    REQUEST                     T2old_ab[a1,i,a,i1] 
    taiai[a1,i1,a,i]          = T2old_ab[a1,i1,a,i]
    t1aiai[a1,i1,a,i]         = T2old_ab[a1,i,a,i1]
    taiai[a1,i1,a,i]         -= t1aiai[a1,i1,a,i]
    tpppp[a1,i1,i,a]          = taiai[a1,i1,a,i]
#
    do j
    do b
#
	REQUEST                        Viaai[i,a,b,j] 
	R1aibj[a1,i1,b,j]            = tpppp[a1,i1,i,a]*Viaai[i,a,b,j]
	Taibj[b,j,a1,i1]             = R1aibj[a1,i1,b,j]
	PREPARE T2new_ab[a1,i1,b,j] += R1aibj[a1,i1,b,j]
	PREPARE T2new_ab[b,j,a1,i1] += Taibj[b,j,a1,i1]
#
    enddo b
    enddo j
#
endpardo i1, a1, a, i
#
pardo a, j, i1, b1
#
    REQUEST T2old_ab[a,i1,b1,j] 
#
    do i
    do b
#
	REQUEST                      Vaaii[b,b1,i1,i] 
#
	Taibj[a,i,b,j]             = T2old_ab[a,i1,b1,j]*Vaaii[b,b1,i1,i]
	Taibj[a,i,b,j]            *= -1.0
#
	T2aibj[b,j,a,i]            = Taibj[a,i,b,j]
	PREPARE T2new_ab[a,i,b,j] += Taibj[a,i,b,j]
	PREPARE T2new_ab[b,j,a,i] += T2aibj[b,j,a,i]
#
    enddo b
    enddo i
#
endpardo a, j, i1, b1
#
endproc phladder_ab
#    ------------------------------------------------------------------------ 
proc updatet2
#
pardo b, a, j, i
#
    REQUEST                    T2old_ab[b,j,a,i] 
    REQUEST                    T2new_ab[b,j,a,i] 
    Taibj[a,i,b,j]           = T2new_ab[b,j,a,i]
    T1aibj[a,i,b,j]          = T2old_ab[b,j,a,i]
#
    REQUEST                    T2old_ab[a,i,b,j] 
    REQUEST                    T2new_ab[a,i,b,j] 
    Taibj[a,i,b,j]          += T2new_ab[a,i,b,j]
    T1aibj[a,i,b,j]         += T2old_ab[a,i,b,j]

    execute energy_denominator_rhf Taibj[a,i,b,j] fock_a
    T1aibj[a,i,b,j] -= Taibj[a,i,b,j]
    T1aibj[a,i,b,j] *= -0.5

    if kiter < Idiis_order  
       PREPARE Eaibj[a,i,b,j,kiter] = T1aibj[a,i,b,j] 
    endif  

    if kiter >= Idiis_order  
       do jdiis 
	  if jdiis == Idiis_order
	     PREPARE Eaibj[a,i,b,j,jdiis] = T1aibj[a,i,b,j] 
	     exit 
	  endif 
       enddo jdiis 
    endif  
endpardo b, a, j, i
server_barrier
#
pardo b, a, j, i
#
    REQUEST                    T2new_ab[a,i,b,j] 
    REQUEST                    T2new_ab[b,j,a,i] 
    Taibj[a,i,b,j]           = T2new_ab[b,j,a,i]
    Taibj[a,i,b,j]          += T2new_ab[a,i,b,j]
    Taibj[a,i,b,j]          *= 0.5
    execute energy_denominator_rhf Taibj[a,i,b,j] fock_a
    PREPARE T2old_ab[a,i,b,j]    = Taibj[a,i,b,j]
#
endpardo b, a, j, i
#
endproc updatet2
#    ------------------------------------------------------------------------ 
PROC DIISN 
#     ---------- 
worder = niter 
if niter >= diis_order 
    worder = diis_order 
endif 
Iorder = (int)worder
sip_barrier 
pardo a, i, b, j 
    do jdiis 
    where jdiis <= Iorder

    REQUEST Eaibj[a,i,b,j,jdiis]   
    REQUEST Eaibj[a,j,b,i,jdiis]   

    t1aibj[a,i,b,j] = Eaibj[a,i,b,j,jdiis] 
    t3aibj[a,j,b,i] = Eaibj[a,j,b,i,jdiis] 
    t2aibj[a,i,b,j] = t3aibj[a,j,b,i] 
    t1aibj[a,i,b,j]-= t2aibj[a,i,b,j] 

    do j1diis 
    where j1diis <= Iorder

	REQUEST Eaibj[a,i,b,j,j1diis]   
	REQUEST Eaibj[a,j,b,i,j1diis]   

	t3aibj[a,i,b,j] = Eaibj[a,i,b,j,j1diis] 
	t2aibj[a,j,b,i] = Eaibj[a,j,b,i,j1diis] 
	t4aibj[a,i,b,j] = t2aibj[a,j,b,i] 
	t3aibj[a,i,b,j]-= t4aibj[a,i,b,j] 

	tbb[jdiis,j1diis]          = Eaibj[a,i,b,j,jdiis]*Eaibj[a,i,b,j,j1diis] 
	tbb[jdiis,j1diis]         *= 2.0  
	PUT DIST_BB[jdiis,j1diis] += tbb[jdiis,j1diis]  

	etemp                     = t1aibj[a,i,b,j]*t3aibj[a,i,b,j] 
	tbb[jdiis,j1diis]          = etemp 
	PUT DIST_BB[jdiis,j1diis] += tbb[jdiis,j1diis]  
    enddo j1diis 
    enddo jdiis 
endpardo a, i, b, j 

sip_barrier 

do jdiis 
where jdiis <= Iorder
    do j1diis 
    where j1diis <= Iorder
	GET DIST_BB[jdiis,j1diis] 
	BB[jdiis,j1diis] = DIST_BB[jdiis,j1diis] 
    enddo j1diis 
enddo jdiis 

execute compute_diis BB 

sip_barrier 

pardo a, i, b, j 
    taibj[a,i,b,j] = 0.0 
    do kdiis   
    where kdiis < Iorder
	n1 = (scalar)kdiis

	REQUEST           Daibj[a,i,b,j,kdiis]   
	t2aibj[a,i,b,j] = Daibj[a,i,b,j,kdiis] 
	n2 = 0.0  
	do d2   
	where d2 <= Iorder 
	    n2 = (scalar)d2
	    kcount  = n2 
	    kcount -= n1 
	    if kcount == one 
		REQUEST           Eaibj[a,i,b,j,d2]   
		t3aibj[a,i,b,j] = Eaibj[a,i,b,j,d2] 
		etemp =  BB[d2,d2]
		t3aibj[a,i,b,j] += t2aibj[a,i,b,j] 
		t3aibj[a,i,b,j] *= etemp   
		taibj[a,i,b,j]  += t3aibj[a,i,b,j]  
	    endif 
	enddo d2 
    enddo kdiis  

    do d2   
    if d2 == 1
	REQUEST           D0aibj[a,i,b,j]  
	t2aibj[a,i,b,j] = D0aibj[a,i,b,j] 
	REQUEST           Eaibj[a,i,b,j,d2]   
	t3aibj[a,i,b,j] = Eaibj[a,i,b,j,d2] 
	etemp =  BB[d2,d2]
	t3aibj[a,i,b,j] += t2aibj[a,i,b,j] 
	t3aibj[a,i,b,j] *= etemp   
	taibj[a,i,b,j]  += t3aibj[a,i,b,j]  
    endif 
    enddo d2 

    PREPARE T2old_ab[a,i,b,j] = taibj[a,i,b,j]
endpardo a, i, b, j 

server_barrier

# If history space is full shift history end error vectors 

if kiter >= Idiis_order  

# histories first 

    pardo a, i, b, j 
	do kdiis 
	where kdiis < Iorder
	    n1 = (scalar)kdiis
	    REQUEST Daibj[a,i,b,j,kdiis]   
	    taibj[a,i,b,j] = Daibj[a,i,b,j,kdiis] 
	    do k1diis 
		n2 = (scalar)k1diis
		etemp = n1 
		etemp -= n2 
		if etemp == 1.0 
		    PREPARE Daibj[a,i,b,j,k1diis] = taibj[a,i,b,j] 
		endif 
	    enddo k1diis  
		if n1 == one 
		    PREPARE D0aibj[a,i,b,j] = taibj[a,i,b,j] 
		endif 
	enddo kdiis 
    endpardo a, i, b, j 

# Now error vectors 

    pardo a, i, b, j 
	do kdiis 
	where kdiis <= Iorder
	    n1 = (scalar)kdiis
	    REQUEST Eaibj[a,i,b,j,kdiis]   
	    taibj[a,i,b,j] = Eaibj[a,i,b,j,kdiis] 
	    do k1diis 
		n2 = (scalar)k1diis
		etemp = n1 
		etemp -= n2 
		if etemp == 1.0 
		    PREPARE Eaibj[a,i,b,j,k1diis] = taibj[a,i,b,j] 
		endif 
	    enddo k1diis  
	enddo kdiis 
    endpardo a, i, b, j 

endif 
server_barrier

endPROC DIISN 
#     -------------
PROC MOVET2
#     ------------
PARDO b, a, j, i
#
    REQUEST                    T2old_ab[a,i,b,j]  
    Taibj[a,i,b,j]           = T2old_ab[a,i,b,j]

    if kiter < Idiis_order  
       PREPARE Daibj[a,i,b,j,kiter] = Taibj[a,i,b,j] 
    endif  

    if kiter >= Idiis_order  
       DO kdiis 
	  if kdiis == (Idiis_order - 1)
	     PREPARE Daibj[a,i,b,j,kdiis] = Taibj[a,i,b,j] 
	     exit 
	  endif 
       ENDDO kdiis 
    endif  
#
ENDPARDO b, a, j, i
#
endPROC MOVET2
#
PROC form_D11

print " "
restore_persistent scf_dipole "scf_dipole"
set_persistent scf_dipole "scf_dipole"
do ixyz
    dipole[ixyz] = scf_dipole[ixyz]
enddo ixyz

pardo p,q
    Tpq[p,q] = 0.0
    prepare Dpq_11[p,q] = Tpq[p,q]
endpardo p,q
pardo mu,nu
    Txx[mu,nu] = 0.0
    prepare Dxx_11[mu,nu] = Txx[mu,nu]
endpardo mu,nu
pardo p,nu
    Tpx[p,nu] = 0.0
    prepare Dpx_11[p,nu] = Tpx[p,nu]
endpardo p,nu
server_barrier

pardo a,i,b,j
    Tii[i,j] = 0.0
    do i1
	request T2old_ab[a,j,b,i1]
	request T2old_ab[a,i,b,i1]
	request T2old_ab[a,i1,b,i]

	Taibj[a,j,b,i1]   = T2old_ab[a,j,b,i1]
	T1aibj[a,i,b,i1]  = T2old_ab[a,i,b,i1]
	T1aibj[a,i,b,i1] *= 2.0
	T1aibj[a,i,b,i1] -= T2old_ab[a,i1,b,i]

	T1ii[i,j] = T1aibj[a,i,b,i1]*Taibj[a,j,b,i1]
	Tii[i,j] += T1ii[i,j]

    enddo i1
    Tii[i,j] *= -2.0
    prepare Dpq_11[i,j] += Tii[i,j]
endpardo a,i,b,j
pardo a,i,b,b1

    Taa[a,b] = 0.0
    do j
	request T2old_ab[a,i,b1,j]
	request T2old_ab[b,i,b1,j]
	request T2old_ab[b,j,b1,i]

	Taibj[a,i,b1,j]   = T2old_ab[a,i,b1,j]
	T1aibj[b,i,b1,j]  = T2old_ab[b,i,b1,j]
	T1aibj[b,i,b1,j] *= 2.0
	T1aibj[b,i,b1,j] -= T2old_ab[b,j,b1,i]

	T1aa[a,b] = Taibj[a,i,b1,j]*T1aibj[b,i,b1,j]
	Taa[a,b] += T1aa[a,b]

    enddo j
    Taa[a,b] *= 2.0
    prepare Dpq_11[a,b] += Taa[a,b]
endpardo a,i,b,b1

server_barrier
    pardo mu,nu
        prepare Dxx_11[mu,nu] = 0.0
    endpardo mu,nu
server_barrier
    pardo mu,nu,p,p1
        request Dpq_11[p,p1]
        Tpx[p,nu] = Dpq_11[p,p1]*ca[nu,p1]
        Txx[mu,nu] = Tpx[p,nu]*ca[mu,p]
        prepare Dxx_11[mu,nu] += Txx[mu,nu]
    endpardo mu,nu,p,p1
server_barrier

do ixyz
    ncount2 = (scalar)ixyz
    esum = 0.0
    dsum = 0.0
    pardo mu,nu
	request Dxx_11[mu,nu]
	ncount1 = 0.0
	execute compute_dipole_integrals DAOINT[mu,nu] ncount1 ncount2
	Txx[mu,nu] = Dxx_11[mu,nu]
	etemp = Txx[mu,nu]*DAOINT[mu,nu]
	esum += etemp
    endpardo mu,nu
    server_barrier
    collective dsum += esum
    server_barrier
    dipole[ixyz] -= dsum

enddo ixyz
server_barrier

print "LCCD response dipole moment"
print dipole
set_persistent dipole "lccd_dipole"

ENDPROC form_D11
#
#    ------------------------------------------------------------------------ 
#           MAIN
#    ------------------------------------------------------------------------ 


print " "
print "-- Parallel LCCD program"
print "-- Written by Jason N. Byrd, 2015"
print " "

ecrit = 0.00000001
zero = 0.0
one = 1.0
two = 2.0
five  = 5.0
six   = 6.0
seven = 7.0
#
diis_start = (scalar)scf_beg
diis_order = (scalar)scf_hist
Idiis_order = scf_hist

print diis_start
print diis_order
print " "
server_barrier
#
restore_persistent ca "ca"
restore_persistent Fock_a "fock_a"
restore_persistent scf_energy "scf_energy"
#  server_barrier
#  call tran_uhf
#  server_barrier
call read_2el
server_barrier
# second-order starting guess for the T2 amps
call iguess_uhf
# second-order energy
call energy
mp2_correlation  = ecorrT
print mp2_correlation
#
do kiter
    print " "
    print kiter
    niter = (scalar)kiter
    server_barrier
#
#        call T2oldaa
    call t2new_zero
#
    call t2newab
#
    call hhladder_ab # hh
    call phladder_ab # ph
    call AOppladder_ab # pp
    server_barrier
#
    call updatet2
    server_barrier
    call energy
    print ecorrT
    server_barrier
#
    if niter >= diis_start
	call diisn
    endif
    call movet2
    server_barrier
    assert_same ecorrT
    assert_same eold
    escr = (eold - ecorrT)**(2.0)
    ediff = escr**0.5
    print ediff
    assert_same ediff
    if ediff < cc_conv
	exit
    endif
#
    eold = ecorrT
#
enddo kiter
#
server_barrier
lccd_correlation  = ecorrT
lccd_energy = lccd_correlation
lccd_energy += scf_energy
print " "
print lccd_correlation
print lccd_energy
totenerg = lccd_energy

call form_D11

sip_barrier 
call T2oldaa
sip_barrier 
#
PARDO a, b, i, j 
#
    request T2old_ab[a,i,b,j]
    request T2old_aa[a,i,b,j]
    Tiajb[i,a,j,b] = T2old_ab[a,i,b,j]
    Tiaia[i,a,j,b] = T2old_aa[a,i,b,j]
    prepare L2old_ab[i,a,j,b] = Tiajb[i,a,j,b]
    prepare L2old_aa[i,a,j,b] = Tiaia[i,a,j,b]
#
ENDPARDO a, b, i, j 
SERVER_BARRIER  

has_singles = 0.0
is_ccpt = 1.0
set_persistent has_singles "has_singles"
set_persistent is_ccpt "is_ccpt"
set_persistent scf_energy "scf_energy"
set_persistent totenerg "totenerg"
set_persistent ca    "ca" 
set_persistent Fock_a "fock_a"
set_persistent T2old_aa "T2old_aa"
set_persistent T2old_ab "T2old_ab"
set_persistent L2old_aa "L2old_aa"
set_persistent L2old_ab "L2old_ab"
set_persistent Viaai  "Viaai"
set_persistent Vaaii  "Vaaii"
set_persistent Vpiqj  "Vpiqj"
set_persistent VSpipi "VSpipi"
server_barrier
#
#    ------------------------------------------------------------------------ 
endSIAL CCSD_RHF_SV1
